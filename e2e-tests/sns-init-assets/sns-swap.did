type BuyerState = record {
  icp_disbursing : bool;
  amount_sns_e8s : nat64;
  amount_icp_e8s : nat64;
  sns_disbursing : bool;
};
type CanisterCallError = record { code : opt int32; description : text };
type CanisterStatusResultV2 = record {
  controller : principal;
  status : CanisterStatusType;
  freezing_threshold : nat;
  balance : vec record { vec nat8; nat };
  memory_size : nat;
  cycles : nat;
  settings : DefiniteCanisterSettingsArgs;
  idle_cycles_burned_per_day : nat;
  module_hash : opt vec nat8;
};
type CanisterStatusType = variant { stopped; stopping; running };
type DefiniteCanisterSettingsArgs = record {
  controller : principal;
  freezing_threshold : nat;
  controllers : vec principal;
  memory_allocation : nat;
  compute_allocation : nat;
};
type DerivedState = record {
  sns_tokens_per_icp : float32;
  buyer_total_icp_e8s : nat64;
};
type ErrorRefundIcpRequest = record {
  icp_e8s : nat64;
  fee_override_e8s : nat64;
};
type FinalizeSwapResponse = record {
  sns_governance_normal_mode_enabled : opt SetModeCallResult;
  sweep_icp : opt SweepResult;
  sweep_sns : opt SweepResult;
  create_neuron : opt SweepResult;
};
type GetCanisterStatusResponse = record { status : CanisterStatusResultV2 };
type GetStateResponse = record { swap : opt Swap; derived : opt DerivedState };
type Init = record {
  min_participant_icp_e8s : nat64;
  fallback_controller_principal_ids : vec text;
  max_icp_e8s : nat64;
  min_participants : nat32;
  nns_governance_canister_id : text;
  icp_ledger_canister_id : text;
  sns_ledger_canister_id : text;
  max_participant_icp_e8s : nat64;
  sns_governance_canister_id : text;
  min_icp_e8s : nat64;
};
type Possibility = variant { Err : CanisterCallError };
type RefreshBuyerTokensRequest = record { buyer : text };
type SetModeCallResult = record { possibility : opt Possibility };
type SetOpenTimeWindowRequest = record { open_time_window : opt TimeWindow };
type State = record {
  open_time_window : opt TimeWindow;
  sns_token_e8s : nat64;
  lifecycle : int32;
  buyers : vec record { text; BuyerState };
};
type Swap = record { init : opt Init; state : opt State };
type SweepResult = record { failure : nat32; skipped : nat32; success : nat32 };
type TimeWindow = record {
  start_timestamp_seconds : nat64;
  end_timestamp_seconds : nat64;
};
service : (Init) -> {
  error_refund_icp : (ErrorRefundIcpRequest) -> (record {});
  finalize_swap : (record {}) -> (FinalizeSwapResponse);
  get_canister_status : (record {}) -> (GetCanisterStatusResponse);
  get_state : (record {}) -> (GetStateResponse) query;
  refresh_buyer_tokens : (RefreshBuyerTokensRequest) -> (record {});
  refresh_sns_tokens : (record {}) -> (record {});
  set_open_time_window : (SetOpenTimeWindowRequest) -> (record {});
}