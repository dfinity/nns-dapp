type AddWasmRequest = record { hash : vec nat8; wasm : opt SnsWasm };
type AddWasmResponse = record { result : opt Result };
type AirdropDistribution = record { airdrop_neurons : vec NeuronDistribution };
type DeployNewSnsRequest = record { sns_init_payload : opt SnsInitPayload };
type DeployNewSnsResponse = record {
  subnet_id : opt principal;
  error : opt SnsWasmError;
  canisters : opt SnsCanisterIds;
};
type DeployedSns = record {
  root_canister_id : opt principal;
  governance_canister_id : opt principal;
  index_canister_id : opt principal;
  swap_canister_id : opt principal;
  ledger_canister_id : opt principal;
};
type DeveloperDistribution = record {
  developer_neurons : vec NeuronDistribution;
};
type FractionalDeveloperVotingPower = record {
  treasury_distribution : opt TreasuryDistribution;
  developer_distribution : opt DeveloperDistribution;
  airdrop_distribution : opt AirdropDistribution;
  swap_distribution : opt SwapDistribution;
};
type GetAllowedPrincipalsResponse = record {
  allowed_principals : vec principal;
};
type GetNextSnsVersionRequest = record {
  governance_canister_id : opt principal;
  current_version : opt SnsVersion;
};
type GetNextSnsVersionResponse = record { next_version : opt SnsVersion };
type GetSnsSubnetIdsResponse = record { sns_subnet_ids : vec principal };
type GetWasmRequest = record { hash : vec nat8 };
type GetWasmResponse = record { wasm : opt SnsWasm };
type InitialTokenDistribution = variant {
  FractionalDeveloperVotingPower : FractionalDeveloperVotingPower;
};
type InsertUpgradePathEntriesRequest = record {
  upgrade_path : vec SnsUpgrade;
  sns_governance_canister_id : opt principal;
};
type InsertUpgradePathEntriesResponse = record { error : opt SnsWasmError };
type ListDeployedSnsesResponse = record { instances : vec DeployedSns };
type ListUpgradeStep = record {
  pretty_version : opt PrettySnsVersion;
  version : opt SnsVersion;
};
type ListUpgradeStepsRequest = record {
  limit : nat32;
  starting_at : opt SnsVersion;
  sns_governance_canister_id : opt principal;
};
type ListUpgradeStepsResponse = record { steps : vec ListUpgradeStep };
type NeuronDistribution = record {
  controller : opt principal;
  dissolve_delay_seconds : nat64;
  memo : nat64;
  stake_e8s : nat64;
  vesting_period_seconds : opt nat64;
};
type PrettySnsVersion = record {
  archive_wasm_hash : text;
  root_wasm_hash : text;
  swap_wasm_hash : text;
  ledger_wasm_hash : text;
  governance_wasm_hash : text;
  index_wasm_hash : text;
};
type Result = variant { Error : SnsWasmError; Hash : vec nat8 };
type SnsCanisterIds = record {
  root : opt principal;
  swap : opt principal;
  ledger : opt principal;
  index : opt principal;
  governance : opt principal;
};
type SnsInitPayload = record {
  url : opt text;
  max_dissolve_delay_seconds : opt nat64;
  max_dissolve_delay_bonus_percentage : opt nat64;
  fallback_controller_principal_ids : vec text;
  token_symbol : opt text;
  final_reward_rate_basis_points : opt nat64;
  neuron_minimum_stake_e8s : opt nat64;
  logo : opt text;
  name : opt text;
  initial_voting_period_seconds : opt nat64;
  neuron_minimum_dissolve_delay_to_vote_seconds : opt nat64;
  description : opt text;
  max_neuron_age_seconds_for_age_bonus : opt nat64;
  initial_reward_rate_basis_points : opt nat64;
  wait_for_quiet_deadline_increase_seconds : opt nat64;
  transaction_fee_e8s : opt nat64;
  max_age_bonus_percentage : opt nat64;
  initial_token_distribution : opt InitialTokenDistribution;
  reward_rate_transition_duration_seconds : opt nat64;
  token_name : opt text;
  proposal_reject_cost_e8s : opt nat64;
};
type SnsUpgrade = record {
  next_version : opt SnsVersion;
  current_version : opt SnsVersion;
};
type SnsVersion = record {
  archive_wasm_hash : vec nat8;
  root_wasm_hash : vec nat8;
  swap_wasm_hash : vec nat8;
  ledger_wasm_hash : vec nat8;
  governance_wasm_hash : vec nat8;
  index_wasm_hash : vec nat8;
};
type SnsWasm = record { wasm : vec nat8; canister_type : int32 };
type SnsWasmCanisterInitPayload = record {
  allowed_principals : vec principal;
  access_controls_enabled : bool;
  sns_subnet_ids : vec principal;
};
type SnsWasmError = record { message : text };
type SwapDistribution = record {
  total_e8s : nat64;
  initial_swap_amount_e8s : nat64;
};
type TreasuryDistribution = record { total_e8s : nat64 };
type UpdateAllowedPrincipalsRequest = record {
  added_principals : vec principal;
  removed_principals : vec principal;
};
type UpdateAllowedPrincipalsResponse = record {
  update_allowed_principals_result : opt UpdateAllowedPrincipalsResult;
};
type UpdateAllowedPrincipalsResult = variant {
  Error : SnsWasmError;
  AllowedPrincipals : GetAllowedPrincipalsResponse;
};
type UpdateSnsSubnetListRequest = record {
  sns_subnet_ids_to_add : vec principal;
  sns_subnet_ids_to_remove : vec principal;
};
type UpdateSnsSubnetListResponse = record { error : opt SnsWasmError };
service : (SnsWasmCanisterInitPayload) -> {
  add_wasm : (AddWasmRequest) -> (AddWasmResponse);
  deploy_new_sns : (DeployNewSnsRequest) -> (DeployNewSnsResponse);
  get_allowed_principals : (record {}) -> (GetAllowedPrincipalsResponse) query;
  get_latest_sns_version_pretty : (null) -> (vec record { text; text }) query;
  get_next_sns_version : (GetNextSnsVersionRequest) -> (
      GetNextSnsVersionResponse,
    ) query;
  get_sns_subnet_ids : (record {}) -> (GetSnsSubnetIdsResponse) query;
  get_wasm : (GetWasmRequest) -> (GetWasmResponse) query;
  insert_upgrade_path_entries : (InsertUpgradePathEntriesRequest) -> (
      InsertUpgradePathEntriesResponse,
    );
  list_deployed_snses : (record {}) -> (ListDeployedSnsesResponse) query;
  list_upgrade_steps : (ListUpgradeStepsRequest) -> (
      ListUpgradeStepsResponse,
    ) query;
  update_allowed_principals : (UpdateAllowedPrincipalsRequest) -> (
      UpdateAllowedPrincipalsResponse,
    );
  update_sns_subnet_list : (UpdateSnsSubnetListRequest) -> (
      UpdateSnsSubnetListResponse,
    );
}