syntax = "proto3";

message PrincipalId {
  bytes serialized_id = 1;
}

package ic_ledger.pb.v1;

// ** LEDGER CANISTER ENDPOINTS

// Initialise the ledger canister
message LedgerInit {
  AccountIdentifier minting_account = 1;
  repeated Account initial_values = 2;
  PrincipalId archive_canister = 3;
  uint32 max_message_size_bytes = 4;
}


// The format of values serialized to/from the stable memory during and upgrade
message LedgerUpgrade {
}


// Make a payment
message SendRequest {
  Memo memo = 1;
  Payment payment = 2;
  ICPTs max_fee = 3;
  Subaccount from_subaccount = 4;
  AccountIdentifier to = 5;
  BlockHeight created_at = 6;
}

message SendResponse {
  BlockHeight resulting_height = 1;
}

// Notify a canister that it has recieved a payment
message NotifyRequest {
  BlockHeight block_height = 1;
  ICPTs max_fee = 2;
  Subaccount from_subaccount = 3;
  PrincipalId to_canister = 4;
  Subaccount to_subaccount = 5;
}

message NotifyResponse {
}


// Get the balance of an account
message AccountBalanceRequest  {
  AccountIdentifier account = 1;
}

message AccountBalanceResponse {
  ICPTs balance = 1;
}

// Get the length of the chain with a certification
message TipOfChainRequest {
}

message TipOfChainResponse {
  Certification certification = 1;
  BlockHeight chain_length = 2;
}

// How many ICPTs are there not in the minting account
message TotalSupplyRequest {
}

message TotalSupplyResponse {
  ICPTs total_supply = 1;
}

// Archive any blocks older than this
message LedgerArchiveRequest {
  TimeStamp timestamp = 1;
}

// * Shared Endpoints *

// Get a single block
message BlockRequest {
  uint64 block_height = 1 [jstype = JS_STRING];
}

message EncodedBlock {
  bytes block = 1;
}

message BlockResponse {
  oneof block_content {
    EncodedBlock block = 1;
    PrincipalId canister_id = 2;
  }
}

// Get a set of blocks
message GetBlocksRequest {
  uint64 start = 1 [jstype = JS_STRING];
  uint64 length = 2 [jstype = JS_STRING];
}

message EncodedBlocks {
    repeated EncodedBlock blocks = 1;
}

message GetBlocksResponse {
  oneof get_blocks_content {
    EncodedBlocks blocks = 1;
    string error = 2;
  }
}

// Iterate through blocks
message IterBlocksRequest {
  uint64 start = 1 [jstype = JS_STRING];
  uint64 length = 2 [jstype = JS_STRING];
}

message IterBlocksResponse {
  repeated EncodedBlock blocks = 1;
}

message ArchiveIndexEntry {
  uint64 height_from = 1 [jstype = JS_STRING];
  uint64 height_to = 2 [jstype = JS_STRING];
  PrincipalId canister_id = 3;
}

message ArchiveIndexResponse {
  repeated ArchiveIndexEntry entries = 1;
}


// ** ARCHIVE CANISTER ENDPOINTS **

// * Archive canister *
// Init the archive canister
message ArchiveInit {
  uint32 node_max_memory_size_bytes = 1;
  uint32 max_message_size_bytes = 2;
}


// Add blocks to the archive canister
message ArchiveAddRequest {
  repeated Block blocks = 1;
}

message ArchiveAddResponse {
}


// Fetch a list of all of the archive nodes
message GetNodesRequest {
}

message GetNodesResponse {
  repeated PrincipalId nodes = 1;
}


// ** BASIC TYPES **
message ICPTs {
  uint64 doms = 1 [jstype = JS_STRING];
}

message Payment {
    ICPTs receiver_gets = 1;
}

message BlockHeight {
  uint64 height = 1 [jstype = JS_STRING];
}


// This is the
message Block {
  Hash parent_hash = 1;
  TimeStamp timestamp = 2;
  Transaction transaction = 3;
}

message Hash {
  bytes hash = 1;
}

message Account {
  AccountIdentifier identifier = 1;
  ICPTs balance = 2;
}

message Transaction {
  oneof transfer {
    Burn burn = 1;
    Mint mint = 2;
    Send send = 3;
  }
  Memo memo = 4;
  BlockHeight created_at = 5;
}

message Send {
  AccountIdentifier from = 1;
  AccountIdentifier to = 2;
  ICPTs amount = 3;
  ICPTs max_fee = 4;
}

message Mint {
  AccountIdentifier to = 2;
  ICPTs amount = 3;
}

message Burn {
  AccountIdentifier from = 1;
  ICPTs amount = 3;
}


message AccountIdentifier {
  bytes hash = 1;
}

message Subaccount {
  bytes sub_account = 1;
}

message Memo {
  uint64 memo = 1 [jstype = JS_STRING];
}

message TimeStamp {
  uint64 timestamp_nanos = 1 [jstype = JS_STRING];
}

message Certification {
  bytes certification = 1;
}
