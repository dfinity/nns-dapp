# TODO: note about cache size (~2800MB)

name: Docker build

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  docker-build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      # buildx is needed by the docker caching step, see next steps
      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v1

      # Cache the docker layers
      # Note: the rust dependency build is about 2.7GB, which is about a third
      # of our cache capacity
      # (https://docs.github.com/en/actions/advanced-guides/caching-dependencies-to-speed-up-workflows).
      # This is fine as long as this layer is rarely rebuilt
      # TODO: make sure it isn't re-uploaded
      - name: Cache docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildx


      - name: Show stuff
        run: |
          echo "everything"
          ls -la /tmp/.buildx-cache
          echo "index"
          cat /tmp/.buildx-cache/index.json
          echo "ingest"
          ls -la /tmp/.buildx-cache/ingest
          echo "blobs"
          ls -la /tmp/.buildx-cache/blobs
          echo "blobs/sha256"
          ls -la /tmp/.buildx-cache/blobs/sha256
          echo "sha256"
          ls -la /tmp/.buildx-cache/blobs/sha256

          cat /tmp/.buildx-cache/index.json | jq -r ' .manifests | .[0] | .digest' | cut -c 9-
          foo=$(cat /tmp/.buildx-cache/index.json | jq -r ' .manifests | .[0] | .digest' | cut -c 9-)
          echo "Digest of manifest is $foo"

          echo "Manifest:"
          cat "/tmp/.buildx-cache/blobs/sha256/$foo"


      - name: Build Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push:  false # otherwise docker tries to push to dockerhub
          tags: nns-dapp
          file: Dockerfile.test
          cache-from: type=local,src=/tmp/.buildx-cache
          # NOTE: we set "mode=max" to make sure _all_ layers are exported, not
          # only those in the final image. Exporting only the finaly layers
          # would be pointless since we only/mostly care about the layers that are
          # used in the build.
          # https://docs.docker.com/engine/reference/commandline/buildx_build/#cache-to
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Show stuff
        run: |
          echo "everything"
          ls -la /tmp/.buildx-cache-new
          echo "index"
          cat /tmp/.buildx-cache-new/index.json
          echo "ingest"
          ls -la /tmp/.buildx-cache-new/ingest
          echo "blobs"
          ls -la /tmp/.buildx-cache-new/blobs
          echo "blobs/sha256"
          ls -la /tmp/.buildx-cache-new/blobs/sha256
          echo "sha256"
          ls -la /tmp/.buildx-cache-new/blobs/sha256

      # https://github.com/docker/build-push-action/issues/252
      # TODO: check if still necessary
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache


      #- run: docker build -t nns-dapp .
      #- run: mkdir out/
      #- run: docker run --rm --entrypoint cat nns-dapp /nns-dapp.wasm > out/nns-dapp.wasm
      #- run: docker run --rm --entrypoint cat nns-dapp /assets.tar.xz > out/assets.tar.xz
      #- run: sha256sum out/nns-dapp.wasm
      #- name: 'Upload wasm module'
        #uses: actions/upload-artifact@v2
        #with:
          #name: Backend wasm module
          #path: out/nns-dapp.wasm
      #- name: 'Upload frontend assets'
        #uses: actions/upload-artifact@v2
        #with:
          #name: Frontend assets
          #path: out/assets.tar.xz
