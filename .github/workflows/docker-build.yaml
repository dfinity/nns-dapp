name: Docker build

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  builder:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      # We use buildx and its GitHub Actions caching support `type=gha`. For
      # more information, see
      # https://github.com/docker/build-push-action/issues/539
      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v1

      - name: Build base Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          cache-from: type=gha,scope=cached-stage
          cache-to: type=gha,scope=cached-stage,mode=max
          outputs: type=cacheonly
          target: builder

  assets:
    needs: builder
    runs-on: ubuntu-20.04
    strategy:
      matrix:
       include:
         - DEPLOY_ENV: "testnet"
           OWN_CANISTER_ID: "qhbym-qaaaa-aaaaa-aaafq-cai"
         - DEPLOY_ENV: "mainnet"
           OWN_CANISTER_ID: ""
    steps:
      - uses: actions/checkout@v2
      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v1
      # Build and upload testnet assets
      - name: Build ${{ matrix.DEPLOY_ENV }} nns-dapp Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          build-args: |
            DEPLOY_ENV=${{ matrix.DEPLOY_ENV }}
            OWN_CANISTER_ID=${{ matrix.OWN_CANISTER_ID }}
          cache-from: type=gha,scope=cached-stage
          # Exports the artefacts from the final stage
          outputs: ./${{ matrix.DEPLOY_ENV }}-out
      - name: 'Upload ${{ matrix.DEPLOY_ENV }} wasm module'
        uses: actions/upload-artifact@v2
        with:
          name: NNS ${{ matrix.DEPLOY_ENV }} backend wasm module
          path: ${{ matrix.DEPLOY_ENV }}-out/nns-dapp.wasm
      - name: 'Upload ${{ matrix.DEPLOY_ENV }} frontend assets'
        uses: actions/upload-artifact@v2
        with:
          name: NNS ${{ matrix.DEPLOY_ENV }} frontend assets
          path: ${{ matrix.DEPLOY_ENV }}-out/assets.tar.xz

  docker-build:
    needs: assets
    runs-on: ubuntu-20.04
    steps:
       - name: Extract assets for verification
         run: echo TODO
