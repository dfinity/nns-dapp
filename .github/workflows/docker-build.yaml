name: Docker build

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  docker-build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      # buildx is needed by the docker caching step, see next steps
      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v1

      # Cache the docker layers
      # NOTE: the rust dependency build is about 2.7GB, which is about a third
      # of our cache capacity
      # (https://docs.github.com/en/actions/advanced-guides/caching-dependencies-to-speed-up-workflows).
      # This is fine as long as this layer is rarely rebuilt. Moreover we make
      # sure to have exact cache hits (i.e. no restore-keys matching) to ensure
      # the cache is never re-uploaded (unless there is a cache miss).
      #
      # The `hashFiles` should include every single file involved in the
      # "builder" build, otherwise the action will fetch the cache but start
      # from scratch nonetheless, never uploading the build output.
      #
      # NOTE: If this caching isn't enough, we could try experimental GitHub
      # Actions support:
      # https://github.com/moby/buildkit#github-actions-cache-experimental
      - name: Cache docker layers
        uses: actions/cache@v2
        id: docker-cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles( '.dockerignore', 'Dockerfile', 'Cargo.lock', 'Cargo.toml', 'rs/Cargo.toml', 'rs/nns_functions_candid_gen/**', 'dfx.json' ) }}-no-max

      - name: Build base Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push:  false # otherwise docker tries to push to dockerhub
          tags: nns-dapp-builder
          file: Dockerfile
          cache-from: type=local,src=/tmp/.buildx-cache
          # NOTE: we set "mode=max" to make sure _all_ layers are exported, not
          # only those in the final image. Exporting only the finaly layers
          # would be pointless since we only/mostly care about the layers that are
          # used in the build.
          # https://docs.docker.com/engine/reference/commandline/buildx_build/#cache-to
          # TODO: directly feed image from first build
          # NOTE: Here we ensure we only export the cache if there was no cache
          # hit.  Otherwise, we export many GBs (a few minutes) to never
          # actually use the exported data.
          # NOTE: the empty string must be at the end, otherwise `''` is
          # considered falsy and is never used
          cache-to: ${{ (! steps.docker-cache.outputs.cache-hit) && 'type=local,dest=/tmp/.buildx-cache-new' || '' }}
          target: builder

      # https://github.com/docker/build-push-action/issues/252
      # NOTE: /tmp/.buildx-cache is NOT reuploaded if there wasa a perfect
      # cache-hit (that's how GHA works and it means we don't re-upload 3GB
      # that we already have)
      - name: Move cache
        run: |
          if [ -d /tmp/.buildx-cache-new ]
          then
            rm -rf /tmp/.buildx-cache
            mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          fi

      # Actual image build. We may be able to shave another few minutes
      # off: https://github.com/docker/build-push-action/issues/539
      - name: Build nns-dapp Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: false # otherwise docker tries to push to dockerhub
          tags: nns-dapp
          load: true # effectively makes the image usable in 'docker run'
          file: Dockerfile
          cache-from: type=local,src=/tmp/.buildx-cache

      - run: mkdir out/
      - run: docker run --rm --entrypoint cat nns-dapp /nns-dapp.wasm > out/nns-dapp.wasm
      - run: docker run --rm --entrypoint cat nns-dapp /assets.tar.xz > out/assets.tar.xz
      - run: sha256sum out/nns-dapp.wasm
      - name: 'Upload wasm module'
        uses: actions/upload-artifact@v2
        with:
          name: Backend wasm module
          path: out/nns-dapp.wasm
      - name: 'Upload frontend assets'
        uses: actions/upload-artifact@v2
        with:
          name: Frontend assets
          path: out/assets.tar.xz
