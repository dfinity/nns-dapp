name: Docker build
on:
  push:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  builder:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      # We use buildx and its GitHub Actions caching support `type=gha`. For
      # more information, see
      # https://github.com/docker/build-push-action/issues/539
      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v2
      - name: Build base Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile
          cache-from: type=gha,scope=cached-stage
          cache-to: type=gha,scope=cached-stage,mode=max
          outputs: type=cacheonly
          target: builder
  assets:
    needs: builder
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        include:
          - BUILD_NAME: "mainnet"
            DFX_NETWORK: "mainnet"
            OWN_CANISTER_ID: ""
    steps:
      - uses: actions/checkout@v3
      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v2
      # Build and upload testnet assets
      - name: Build ${{ matrix.DFX_NETWORK }} nns-dapp Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile
          build-args: |
            DFX_NETWORK=${{ matrix.DFX_NETWORK }}
            OWN_CANISTER_ID=${{ matrix.OWN_CANISTER_ID }}
          cache-from: type=gha,scope=cached-stage
          # Exports the artefacts from the final stage
          outputs: ./${{ matrix.BUILD_NAME }}-out
      - name: 'Upload ${{ matrix.BUILD_NAME }} wasm module'
        uses: actions/upload-artifact@v3
        with:
          name: NNS ${{ matrix.BUILD_NAME }} backend wasm module
          path: ${{ matrix.BUILD_NAME }}-out/nns-dapp.wasm
      - name: Release
        run: |
          cd "${{ matrix.BUILD_NAME }}-out"
          artefacts=(nns-dapp.wasm sns_aggregator.wasm sns_aggregator_dev.wasm assets.tar.xz)
          ls -l "${artefacts[@]}"
          for tag in $(git tag --points-at HEAD) ; do
            : Creates or updates a release for the tag
            if gh release view "$tag"
            then gh release upload --repo dfinity/nns-dapp --clobber "$tag" "${artefacts[@]}" || true
            else gh release create --title "Release for tags/$tag" --draft --notes "Build artefacts from tag: $tag" "$tag" "${artefacts[@]}"
            fi
            : If the tag is for a proposal, make it public
            [[ "$tag" != proposal-* ]] || { echo "Making release public" ; gh release edit "$tag" --draft=false ; }
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Upload ${{ matrix.BUILD_NAME }} frontend assets'
        uses: actions/upload-artifact@v3
        with:
          name: NNS ${{ matrix.BUILD_NAME }} frontend assets
          path: ${{ matrix.BUILD_NAME }}-out/assets.tar.xz
      - name: "Link the build sha to this commit"
        run: |
          : Set up git
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
          : Make a note of the WASM shasum.
          NOTE="refs/notes/${{ matrix.DFX_NETWORK }}/wasm-sha"
          SHA="$(sha256sum < "${{ matrix.BUILD_NAME }}-out/nns-dapp.wasm")"
          git fetch origin "+${NOTE}:${NOTE}"
          if git notes --ref="${{ matrix.BUILD_NAME }}/wasm-sha" add -m "$SHA"
          then git push origin "${NOTE}:${NOTE}" || true
          else echo SHA already set
          fi
      - name: "Verify that the WASM module is small enough to deploy"
        run: |
          wasm_size="$(wc -c < "${{ matrix.BUILD_NAME }}-out/nns-dapp.wasm")"
          max_size=3145728
          echo "WASM size:          $wasm_size"
          echo "Max supported size: $max_size"
          (( wasm_size <= max_size )) || { echo "The WASM is too large" ; exit 1 ; }
  docker-build:
    needs: assets
    runs-on: ubuntu-20.04
    steps:
      - name: Extract assets for verification
        run: echo TODO
  docker-build-passes:
    needs: ["assets", "docker-build"]
    if: ${{ always() }}
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/needs_success
        with:
          needs: '${{ toJson(needs) }}'
