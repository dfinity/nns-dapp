name: E2e test
# We use "push" events so that we have the actual commit. In "pull_request"
# events we get a merge commit with main instead. The merge commit can be
# useful to check that the code would pass tests once merged, but here it just
# creates confusion and doesn't add anything since the branch must be up to
# date before merge. It's also nice to have CI running on branches without PRs.
on:
  push:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
defaults:
  run:
    shell: bash -euxlo pipefail {0}
jobs:
  build:
    runs-on: ubuntu-20.04
    timeout-minutes: 60
    steps:
      - name: Checkout nns-dapp
        uses: actions/checkout@v3
      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v2
      - name: Build wasms
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile
          build-args: |
            DFX_NETWORK=local
          cache-from: type=gha,scope=cached-stage
          # Exports the artefacts from the final stage
          outputs: .
      - name: Get SNS scripts
        uses: actions/checkout@v3
        with:
          repository: 'dfinity/snsdemo'
          path: 'snsdemo'
          # Version from Apr 4 2023 with xz compressed state
          ref: '8160f742e10fbd1ac89549a5880ae047ff8f290d'
      - name: Add go and SNS scripts to the path
        run: |
          echo "$PWD/snsdemo/bin" >> $GITHUB_PATH
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
      - name: Install SNS script dependencies
        run: |
          dfx-software-dfx-install --version "$(jq -r .dfx dfx.json)"
          dfx-software-idl2json-install --version "v$(jq -r .defaults.build.config.IDL2JSON_VERSION dfx.json)"
      - name: Get test environment
        run: |
          curl -fL --retry 5 https://github.com/dfinity/snsdemo/releases/download/release-2023-04-27/snsdemo_snapshot_ubuntu-22.04.tar.xz > state.tar.xz
          dfx-snapshot-restore --snapshot state.tar.xz --verbose
          dfx identity use snsdemo8
          dfx-sns-demo-healthcheck
      - name: Install nns-dapp and sns_aggregator
        run: |
          echo "Create the nns-dapp install argument:"
          export DFX_NETWORK=local
          ./config.sh
          echo "Install:"
          dfx canister install nns-dapp --wasm nns-dapp.wasm --upgrade-unchanged --mode reinstall --yes --argument "$(cat nns-dapp-arg-${DFX_NETWORK}.did)"
          dfx canister install sns_aggregator --wasm sns_aggregator_dev.wasm --upgrade-unchanged --mode reinstall --yes --argument '(opt record { update_interval_ms = 100; fast_interval_ms = 100; })'
          # TODO: The argument above is not passed to the canister by dfx.  Fix (by asking the sdk team), then remove the following line:
          dfx canister call sns_aggregator reconfigure '(opt record { update_interval_ms = 100; fast_interval_ms = 100; })'
      - name: Install command line HTML parser
        run: |
          go install github.com/ericchiang/pup@latest
          pup --version
      - name: Verify that arguments are set in index.html
        run: |
          for ((i=5; i>0; i--)); do
            (
              timeout 60 curl --fail --silent --retry 10 --connect-timeout 5 "http://$(dfx canister id nns-dapp).localhost:8080/" > index.html
              file index.html
              < index.html gunzip | pup 'head meta[name="nns-dapp-vars"] json{}' | tee nns_dapp_args_in_page.json
            ) || { echo "Failed.  Retrying..." ; sleep 5 ; continue ; }
            break
          done
          echo "Check a few values:"
          for key in data-own-canister-id data-fetch-root-key data-identity-service-url ; do
            # Verify that the key is non-trivial:
            # jq -e returns an error code if the value is missing
            # grep ... fails if the value is implausibly short.
            key="$key" jq -re '.[0][env.key]' nns_dapp_args_in_page.json | grep -E ...
          done
      - name: Basic downgrade-upgrade test
        run: |
          git fetch --depth 1 origin tag prod
          if git diff tags/prod rs/backend | grep -q .
          then ./scripts/nns-dapp/downgrade-upgrade-test -w nns-dapp.wasm
          else echo "Skipping test as there are no relevant code changes"
          fi
      - name: Rename nns-dapp.wasm for upload
        run: cp nns-dapp.wasm nns-dapp_local.wasm
      - name: 'Upload nns-dapp_local wasm module'
        uses: actions/upload-artifact@v3
        with:
          name: nns-dapp_local
          path: nns-dapp_local.wasm
          retention-days: 3
      - name: Release
        run: |
          for tag in $(git tag --points-at HEAD) ; do
            : Creates or updates a release for the tag
            if gh release view "$tag"
            then gh release upload --repo dfinity/nns-dapp --clobber "$tag" nns-dapp_local.wasm || true
            else gh release create --title "Release for tags/$tag" --draft --notes "Build artefacts from tag: $tag" "$tag" nns-dapp_local.wasm
            fi
            : If the tag is for a proposal or nightly, make it public
            [[ "$tag" != proposal-* ]] && [[ "$tag" != nightly-* ]] || { echo "Making release public" ; gh release edit "$tag" --draft=false ; }
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Generate .env configuration for Playwright end-to-end tests
        run: |
          DFX_NETWORK=local ./config.sh
      - name: Prepare for Playwright end-to-end tests
        working-directory: frontend
        run: |
          npm ci
          npx playwright install --with-deps firefox
      - name: Wait for aggregator to get all SNSs
        run: |
          set +x
          for (( try=300; try>0; try-- )); do
             num_sns="$(for ((page=0; page<3; page++)) ; do { curl -fsS "http://$(dfx canister id sns_aggregator).localhost:8080/v1/sns/list/page/$page/slow.json" | jq length ; } 2>/dev/null || true ; done | awk '{i+=$1}END{print i}')"
             (( num_sns < 12)) || break
             printf "\r #SNS: % 4d   Tries remaining: %4d" "$num_sns" "$try"
             sleep 2
          done
      - name: Run Playwright end-to-end tests
        working-directory: frontend
        run: npm run test-e2e
      - name: Upload Playwright results
        uses: actions/upload-artifact@v3
        if: ${{ failure() }}
        with:
          name: playwright-failure-results
          path: |
            frontend/playwright-report/*
            frontend/playwright-results/*
          retention-days: 3
      - name: Generate .env configuration for e2e-tests
        run: |
          DFX_NETWORK=local ENV_OUTPUT_FILE=./e2e-tests/.env ./config.sh
      - name: Prepare for e2e tests
        working-directory: e2e-tests
        run: |
          npm ci
          # wipe the screenshots, they will be re-committed
          rm -rf screenshots
      - name: Run chrome e2e tests
        working-directory: e2e-tests
        run: |
          set -o pipefail
          export WDIO_BROWSER=chrome
          SCREENSHOT=1 npm run test |& tee -a chrome-wdio.log
      - name: Run firefox e2e tests
        working-directory: e2e-tests
        # Allow Firefox to fail until the source of flakiness is found and fixed.
        continue-on-error: true
        run: |
          export WDIO_BROWSER=firefox
          SCREENSHOT=1 npm run test |& tee -a firefox-wdio.log
      - name: Get the postinstall instruction count
        run: |
          dfx canister install --upgrade-unchanged nns-dapp --wasm nns-dapp.wasm --mode upgrade --argument "$(cat nns-dapp-arg-local.did)"
          postinstall_instructions="$(scripts/backend/get_upgrade_instructions)"
          echo "Installation consumed ${postinstall_instructions} instructions."
          echo "Cycles consumed are instructions * some factor that depends on subnet.  There is no guarantee that that formula will not change."
      - name: Stop replica
        run: dfx stop
      - name: Archive wdio logs
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: wdio-logs
          path: e2e-tests/*-wdio.log
          # Disable screenshot saving until screenshots are stable.
          #      - name: Commit screenshots
          #        if: ${{ github.ref != 'refs/heads/main' }}
          #        uses: EndBug/add-and-commit@v9.1.1
          #        with:
          #          add: e2e-tests/screenshots
          #          author_name: Screenshot Committer
          #          author_email: "<nobody@example.com>"
          #          message: "Update screenshots"
          #          # do not pull: if this branch is behind, then we might as well let
          #          # the pushing fail
          #          pull: "NO-PULL"
          #
      - name: Archive screenshots
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: e2e-screenshots
          path: e2e-tests/screenshots/**/*.png
          retention-days: 7
      - name: Remove screenshots until they are stable
        working-directory: e2e-tests
        run: |
          rm -rf screenshots
  build-pass:
    needs: ["build"]
    if: ${{ always() }}
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/needs_success
        with:
          needs: '${{ toJson(needs) }}'
