# A Native build
# XXX: This makes some of 'checks.yml' redundant. This will be fixed as soon as
# we have end-to-end tests working.
# https://dfinity.atlassian.net/browse/L2-191
name: Native build

# We use "push" events so that we have the actual commit. In "pull_request"
# events we get a merge commit with main instead. The merge commit can be
# useful to check that the code would pass tests once merged, but here it just
# creates confusion and doesn't add anything since the branch must be up to
# date before merge. It's also nice to have CI running on branches without PRs.
on:
  push:


env:
      DFX_VERSION: 0.9.2
      RUSTC_VERSION: 1.58.1
      FLUTTER_VERSION: 2.2.3
      IC_CDK_OPTIMIZER_VERSION: 0.3.1
      CARGO_HOME: "/opt/cargo"

jobs:
  flutter_download:
    runs-on: ubuntu-20.04
    timeout-minutes: 60
    steps:
      - name: Get cached flutter
        uses: actions/cache@v2
        with:
          path: /opt/flutter.tar.xz
          key: flutter-${{ env.FLUTTER_VERSION }}
      - name: Download Flutter
        run: |
          cd $(mktemp -d)
          test -e flutter.tar.xz || curl "https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_${FLUTTER_VERSION}-stable.tar.xz" -o flutter.tar.xz
          mv flutter.tar.xz /opt/flutter.tar.xz

  install_rust:
    runs-on: ubuntu-20.04
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v2
      - name: Get cached rust
        uses: actions/cache@v2
        with:
          path: "{{ env.CARGO_HOME }}"
          key: cargo-${{ env.RUSTC_VERSION }}
      - name: Install Rust
        run: |
          grep "$RUSTC_VERSION" rust-toolchain.toml
          rustup update "$RUSTC_VERSION" --no-self-update
          rustup default "$RUSTC_VERSION"
          rustup target add wasm32-unknown-unknown
          cargo install --version "$IC_CDK_OPTIMIZER_VERSION" ic-cdk-optimizer

  nns_canisters:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      # We use buildx and its GitHub Actions caching support `type=gha`. For
      # more information, see
      # https://github.com/docker/build-push-action/issues/539
      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v1

      - name: Build nns canisters
        uses: docker/build-push-action@v2
        with:
          context: e2e-tests/scripts
          file: e2e-tests/scripts/nns-canister.Dockerfile
          build-args: |
            IC_COMMIT=6dc5e2dcb50569e20891af02b846a7d9a58e3489
          cache-from: type=gha,scope=cached-stage
          cache-to: type=gha,scope=cached-stage,mode=max
          outputs: type=cacheonly


  build:
    needs: [flutter_download, nns_canisters, install_rust]
    runs-on: ubuntu-20.04
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v2

      # Cache based on the Cargo.lock
      # The cache key is always an exact match or no match (i.e. no
      # "restore-keys"-style matching). Because (in case of an exact match)
      # GitHub actions won't (re-)upload the cache after the build, it means that
      # our cache won't just grow forever.
      - name: Get cached rust files
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}

      - name: Get cached flutter
        uses: actions/cache@v2
        with:
          path: /opt/flutter.tar.xz
          key: flutter-${{ env.FLUTTER_VERSION }}

      - name: Install Flutter
        run: |
          mkdir -p ~/flutter
          tar xJf /opt/flutter.tar.xz -C /opt
          echo "/opt/flutter/bin" >> $GITHUB_PATH
          flutter --version

      - name: Get cached rust
        uses: actions/cache@v2
        with:
          path: /opt/flutter.tar.xz
          key: cargo-${{ env.RUSTC_VERSION }}
      - name: Install Rust
        run: |
          echo "${{ env.CARGO_HOME }}/bin" >> $GITHUB_PATH
          ls "${{ env.CARGO_HOME }}/bin"
          echo "$PATH"
          command -v cargo
          cargo --version
          command -v ic-cdk-optimizer
          ic-cdk-optimizer --version

      - name: Install DFX
        run: |
          echo Install DFX Version: "$DFX_VERSION"
          yes | sh -ci "$(curl -fsSL https://sdk.dfinity.org/install.sh)"

      # Helps with debugging
      - name: Versions
        run: |
          set -x
          dfx --version
          node --version
          npm --version
          rustc --version
          cargo --version
          ic-cdk-optimizer --version

      - name: Start replica
        run: |
          dfx start --background --clean

      - name: Cache NNS canister docker build
        uses: docker/build-push-action@v2
        with:
          context: e2e-tests/scripts
          file: e2e-tests/scripts/nns-canister.Dockerfile
          build-args: |
            IC_COMMIT=6dc5e2dcb50569e20891af02b846a7d9a58e3489
            # IC_COMMIT MUST match the value in ./e2e-tests/scripts/nns-canister-build
          cache-from: type=gha,scope=cached-stage
          # Exports the artefacts from the final stage
          outputs: ./nns-canisters-out
      - name: Deploy NNS canisters
        run: |
          ./e2e-tests/scripts/nns-canister-download
          ./e2e-tests/scripts/nns-canister-build
          ./e2e-tests/scripts/nns-canister-install

      - name: Deploy
        run: |
          ./e2e-tests/scripts/deploy-local-canisters

      - name: Build proxy
        working-directory: proxy
        run: |
          npm ci
          npm run build

      - name: prepare and run the test suite
        working-directory: e2e-tests
        run: |
          npm ci

          # wipe the screenshots, they will be re-committed
          rm -rf screenshots
          set -o pipefail
          REDIRECT_TO_LEGACY=svelte npm run test | tee -a wdio.log

      - name: Stop replica
        run: dfx stop

      - name: Archive wdio logs
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: wdio-logs
          path: e2e-tests/wdio.log

# Disable screenshot saving until screenshots are stable.
#      - name: Commit screenshots
#        if: ${{ github.ref != 'refs/heads/main' }}
#        uses: EndBug/add-and-commit@v7.4.0
#        with:
#          add: e2e-tests/screenshots
#          author_name: Screenshot Committer
#          author_email: "<nobody@example.com>"
#          message: "Update screenshots"
#          # do not pull: if this branch is behind, then we might as well let
#          # the pushing fail
#          pull: "NO-PULL"
#
      - name: Archive screenshots
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: e2e-screenshots
          path: screenshots/**/*.png

      - name: Remove screenshots until they are stable
        working-directory: e2e-tests
        run: |
          rm -rf screenshots
