# A Native build
# XXX: This makes some of 'checks.yml' redundant. This will be fixed as soon as
# we have end-to-end tests working.
# https://dfinity.atlassian.net/browse/L2-191
name: Native build
# We use "push" events so that we have the actual commit. In "pull_request"
# events we get a merge commit with main instead. The merge commit can be
# useful to check that the code would pass tests once merged, but here it just
# creates confusion and doesn't add anything since the branch must be up to
# date before merge. It's also nice to have CI running on branches without PRs.
on:
  push:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
env:
  NNS_CACHING_KEY: dv-0004
jobs:
  build:
    runs-on: ubuntu-20.04
    timeout-minutes: 60
    steps:
      - name: Checkout nns-dapp
        uses: actions/checkout@v3
      - name: set-env
        run: ./build-config.sh >> $GITHUB_ENV
      # Cache based on the Cargo.lock
      # The cache key is always an exact match or no match (i.e. no
      # "restore-keys"-style matching). Because (in case of an exact match)
      # GitHub actions won't (re-)upload the cache after the build, it means that
      # our cache won't just grow forever.
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
      # Cache the ic-cdk-optimizer
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/ic-cdk-optimizer
          key: ${{ runner.os }}-ic-cdk-optimizer-${{ env.IC_CDK_OPTIMIZER_VERSION }}-v2
      - name: Install Software
        run: |
          ./scripts/setup --profile ~/.bashrc
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      # Helps with debugging
      - name: Versions
        run: |
          set -x
          dfx --version
          node --version
          npm --version
          rustc --version
          cargo --version
          ic-cdk-optimizer --version
      - name: Get SNS scripts
        uses: actions/checkout@v3
        with:
          repository: 'dfinity/snsdemo'
          path: 'snsdemo'
          # Version from Mon Jan 16 10:10:47
          ref: 'e1d7dd4c10fb8a731a534ae2ef4b08474fea5f6b'
      - name: Add SNS scripts to the path
        run: |
          echo "$PWD/snsdemo/bin" >> $GITHUB_PATH
      - name: Install SNS script dependencies
        run: |
          dfx-sns-demo-install
      - name: Deploy NNS and SNS canisters
        run: |
          # Note: This deploys standard NNS canisters but with:
          # - The current code for the nns-dapp
          # - The II version specified in dfx.json
          # - Functional SNS canisters
          ./scripts/dfx-nns-deploy-custom --features sns
      - name: 'Upload nns-dapp_local wasm module'
        uses: actions/upload-artifact@v3
        with:
          name: nns-dapp_local
          path: nns-dapp_local.wasm
          retention-days: 3
      - name: Release
        run: |
          for tag in $(git tag --points-at HEAD) ; do
            : Creates or updates a release for the tag
            if gh release view "$tag"
            then gh release upload --repo dfinity/nns-dapp --clobber "$tag" nns-dapp_local.wasm || true
            else gh release create --title "Release for tags/$tag" --draft --notes "Build artefacts from tag: $tag" "$tag" nns-dapp_local.wasm
            fi
            : If the tag is for a proposal, make it public
            [[ "$tag" != proposal-* ]] || { echo "Making release public" ; gh release edit "$tag" --draft=false ; }
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Generate .env configuration for e2e-tests
        run: |
          DFX_NETWORK=local ENV_OUTPUT_FILE=./e2e-tests/.env ./config.sh
      - name: prepare and run the test suite
        working-directory: e2e-tests
        run: |
          npm ci
          # wipe the screenshots, they will be re-committed
          rm -rf screenshots
          set -o pipefail
          npm run test | tee -a wdio.log
      - name: Stop replica
        run: dfx stop
      - name: Archive wdio logs
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: wdio-logs
          path: e2e-tests/wdio.log
          # Disable screenshot saving until screenshots are stable.
          #      - name: Commit screenshots
          #        if: ${{ github.ref != 'refs/heads/main' }}
          #        uses: EndBug/add-and-commit@v9.1.1
          #        with:
          #          add: e2e-tests/screenshots
          #          author_name: Screenshot Committer
          #          author_email: "<nobody@example.com>"
          #          message: "Update screenshots"
          #          # do not pull: if this branch is behind, then we might as well let
          #          # the pushing fail
          #          pull: "NO-PULL"
          #
      - name: Archive screenshots
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: e2e-screenshots
          path: screenshots/**/*.png
      - name: Remove screenshots until they are stable
        working-directory: e2e-tests
        run: |
          rm -rf screenshots
  build-pass:
    needs: ["build"]
    if: ${{ always() }}
    runs-on: ubuntu-20.04
    steps:
      - name: Checks workflow passes
        run: |
          if echo '${{ toJson(needs) }}' | jq 'to_entries[] | select(.value.result != "success")' | grep .
          then echo "You shall not pass:  Some required tests did not succeed"
               exit 1
          else echo "Congratulations, young Frodo."
          fi
