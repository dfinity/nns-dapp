name: E2e test
# We use "push" events so that we have the actual commit. In "pull_request"
# events we get a merge commit with main instead. The merge commit can be
# useful to check that the code would pass tests once merged, but here it just
# creates confusion and doesn't add anything since the branch must be up to
# date before merge. It's also nice to have CI running on branches without PRs.
on:
  push:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
defaults:
  run:
    shell: bash -euxlo pipefail {0}
jobs:
  build:
    runs-on: ubuntu-latest-m
    timeout-minutes: 45
    steps:
      - name: Checkout nns-dapp
        uses: actions/checkout@v3
      - name: Build nns-dapp repo
        uses: ./.github/actions/build_nns_dapp
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Rename nns-dapp.wasm.gz for upload
        run: cp out/nns-dapp.wasm.gz out/nns-dapp_local.wasm.gz
      - name: 'Upload nns-dapp_local wasm module'
        uses: actions/upload-artifact@v3
        with:
          name: nns-dapp_local
          path: out/nns-dapp_local.wasm.gz
          retention-days: 3
      - name: 'Upload sns_aggregator wasm module'
        uses: actions/upload-artifact@v3
        with:
          name: sns_aggregator
          path: out/sns_aggregator.wasm.gz
          retention-days: 3
      - name: 'Upload sns_aggregator_dev wasm module'
        uses: actions/upload-artifact@v3
        with:
          name: sns_aggregator_dev
          path: out/sns_aggregator_dev.wasm.gz
          retention-days: 3
  test-playwright-e2e:
    needs: build
    runs-on: ubuntu-20.04
    timeout-minutes: 40
    steps:
      - name: Checkout nns-dapp
        uses: actions/checkout@v3
      - name: Get nns-dapp_local
        uses: actions/download-artifact@v3
        with:
          name: nns-dapp_local
      - name: Get sns_aggregator_dev
        uses: actions/download-artifact@v3
        with:
          name: sns_aggregator_dev
      - name: Start snapshot environment
        uses: ./.github/actions/start_dfx_snapshot
        with:
          # Version from 2023-06-06 with dfx v 0.14.1
          snsdemo_ref: '0e61f618018db099a01b1686535fff8eff980d1c'
          snapshot_url: https://github.com/dfinity/snsdemo/releases/download/release-2023-06-06/snsdemo_snapshot_ubuntu-22.04.tar.xz
          nns_dapp_wasm: 'nns-dapp_local.wasm.gz'
          sns_aggregator_wasm: 'sns_aggregator_dev.wasm.gz'
      - name: Generate .env configuration for Playwright end-to-end tests
        run: |
          DFX_NETWORK=local ./config.sh
      - name: Prepare for Playwright end-to-end tests
        working-directory: frontend
        run: |
          npm ci
          npx playwright install --with-deps firefox
      - name: Wait for aggregator to get all SNSs
        run: |
          set +x
          for (( try=300; try>0; try-- )); do
             num_sns="$(for ((page=0; page<3; page++)) ; do { curl -fsS "http://$(dfx canister id sns_aggregator).localhost:8080/v1/sns/list/page/$page/slow.json" | jq length ; } 2>/dev/null || true ; done | awk '{i+=$1}END{print i}')"
             (( num_sns < 12)) || break
             printf "\r #SNS: % 4d   Tries remaining: %4d" "$num_sns" "$try"
             sleep 2
          done
      - name: Run Playwright end-to-end tests
        working-directory: frontend
        run: npm run test-e2e
      - name: Upload Playwright results
        uses: actions/upload-artifact@v3
        if: ${{ failure() }}
        with:
          name: playwright-failure-results
          path: |
            frontend/playwright-report/*
            frontend/playwright-results/*
          retention-days: 3
      - name: Stop replica
        run: dfx stop
  test-rest:
    needs: build
    runs-on: ubuntu-20.04
    timeout-minutes: 40
    steps:
      - name: Checkout nns-dapp
        uses: actions/checkout@v3
      - name: Get nns-dapp_local
        uses: actions/download-artifact@v3
        with:
          name: nns-dapp_local
      - name: Get sns_aggregator
        uses: actions/download-artifact@v3
        with:
          name: sns_aggregator
      - name: Get sns_aggregator_dev
        uses: actions/download-artifact@v3
        with:
          name: sns_aggregator_dev
      - name: Start snapshot environment
        uses: ./.github/actions/start_dfx_snapshot
        with:
          # Version from 2023-06-06 with dfx v0.14.1
          snsdemo_ref: '0e61f618018db099a01b1686535fff8eff980d1c'
          snapshot_url: https://github.com/dfinity/snsdemo/releases/download/release-2023-06-06/snsdemo_snapshot_ubuntu-22.04.tar.xz
          nns_dapp_wasm: 'nns-dapp_local.wasm.gz'
          sns_aggregator_wasm: 'sns_aggregator_dev.wasm.gz'
      - name: Add go and SNS scripts to the path
        run: |
          echo "$PWD/snsdemo/bin" >> $GITHUB_PATH
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
      - name: Install command line HTML parser
        run: |
          go install github.com/ericchiang/pup@latest
          pup --version
      - name: Verify that arguments are set in index.html
        run: |
          for ((i=5; i>0; i--)); do
            (
              timeout 60 curl --fail --silent --retry 10 --connect-timeout 5 "http://$(dfx canister id nns-dapp).localhost:8080/" > index.html
              file index.html
              < index.html gunzip | pup 'head meta[name="nns-dapp-vars"] json{}' | tee nns_dapp_args_in_page.json
            ) || { echo "Failed.  Retrying..." ; sleep 5 ; continue ; }
            break
          done
          echo "Check a few values:"
          for key in data-own-canister-id data-fetch-root-key data-identity-service-url ; do
            # Verify that the key is non-trivial:
            # jq -e returns an error code if the value is missing
            # grep ... fails if the value is implausibly short.
            key="$key" jq -re '.[0][env.key]' nns_dapp_args_in_page.json | grep -E ...
          done
      - name: Determine ic-wasm version
        id: ic-wasm-version
        run: |
          echo "IC_WASM_VERSION=$(jq -r '.defaults.build.config.IC_WASM_VERSION' dfx.json)" >> "$GITHUB_OUTPUT"
          echo "IC_WASM_PATH=/home/runner/.cargo/bin/ic-wasm" >> "$GITHUB_OUTPUT"
      - name: Cache ic-wasm
        id: cache-ic-wasm
        uses: actions/cache@v3
        with:
          path: ${{ steps.ic-wasm-version.outputs.IC_WASM_PATH }}
          key: ${{ runner.os }}-${{ steps.ic-wasm-version.outputs.IC_WASM_VERSION }}-ic-wasm
      - name: Install ic-wasm
        if: steps.cache-ic-wasm.outputs.cache-hit != 'true'
        run: |
          curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/181b5293e73cfe16f7a79c5b3a4339bd522d31f3/install-from-binstall-release.sh | bash
          cargo binstall --no-confirm "ic-wasm@${{ steps.ic-wasm-version.outputs.IC_WASM_VERSION }}"
          command -v ic-wasm || {
            echo "ERROR: Failed to install ic-wasm"
            exit 1
          }>&2
          [[ "$( command -v ic-wasm )" == ${{ steps.ic-wasm-version.outputs.IC_WASM_PATH }} ]] || {
            echo "ERROR: ic-wasm was installed at an unexpected location."
            echo "EXPECTED: ${{ steps.ic-wasm-version.outputs.IC_WASM_PATH }}"
            echo "ACTUAL:   $( command -v ic-wasm )"
            echo "Please align fact and expectation."
            exit 1
          } >&2
      - name: Check that metadata is present
        run: |
          # dfx-wasm-metadata-add.test expects nns-dapp.wasm.gz
          cp nns-dapp_local.wasm.gz nns-dapp.wasm.gz
          scripts/dfx-wasm-metadata-add.test --verbose
      - name: Basic downgrade-upgrade test
        run: |
          git fetch --depth 1 origin tag prod
          if git diff tags/prod rs/backend | grep -q .
          then ./scripts/nns-dapp/downgrade-upgrade-test -w nns-dapp_local.wasm.gz
          else echo "Skipping test as there are no relevant code changes"
          fi
      - name: Release
        run: |
          for tag in $(git tag --points-at HEAD) ; do
            : Creates or updates a release for the tag
            if gh release view "$tag"
            then gh release upload --repo dfinity/nns-dapp --clobber "$tag" nns-dapp_local.wasm.gz || true
            else gh release create --title "Release for tags/$tag" --draft --notes "Build artefacts from tag: $tag" "$tag" nns-dapp_local.wasm.gz
            fi
            : If the tag is for a proposal or nightly, make it public
            [[ "$tag" != proposal-* ]] && [[ "$tag" != nightly-* ]] || { echo "Making release public" ; gh release edit "$tag" --draft=false ; }
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Generate .env configuration for e2e-tests
        run: |
          DFX_NETWORK=local ENV_OUTPUT_FILE=./e2e-tests/.env ./config.sh
      - name: Prepare for e2e tests
        working-directory: e2e-tests
        run: |
          npm ci
          # wipe the screenshots, they will be re-committed
          rm -rf screenshots
      - name: Run chrome e2e tests
        working-directory: e2e-tests
        run: |
          set -o pipefail
          export WDIO_BROWSER=chrome
          SCREENSHOT=1 npm run test |& tee -a chrome-wdio.log
      - name: Run firefox e2e tests
        working-directory: e2e-tests
        # Allow Firefox to fail until the source of flakiness is found and fixed.
        continue-on-error: true
        run: |
          export WDIO_BROWSER=firefox
          SCREENSHOT=1 npm run test |& tee -a firefox-wdio.log
      - name: Get the postinstall instruction count
        run: |
          dfx canister install --upgrade-unchanged nns-dapp --wasm nns-dapp_local.wasm.gz --mode upgrade --argument "$(cat nns-dapp-arg-local.did)"
          postinstall_instructions="$(scripts/backend/get_upgrade_instructions)"
          echo "Installation consumed ${postinstall_instructions} instructions."
          echo "Cycles consumed are instructions * some factor that depends on subnet.  There is no guarantee that that formula will not change."
      - name: Stop replica
        run: dfx stop
      - name: Archive wdio logs
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: wdio-logs
          path: e2e-tests/*-wdio.log
          # Disable screenshot saving until screenshots are stable.
          #      - name: Commit screenshots
          #        if: ${{ github.ref != 'refs/heads/main' }}
          #        uses: EndBug/add-and-commit@v9.1.1
          #        with:
          #          add: e2e-tests/screenshots
          #          author_name: Screenshot Committer
          #          author_email: "<nobody@example.com>"
          #          message: "Update screenshots"
          #          # do not pull: if this branch is behind, then we might as well let
          #          # the pushing fail
          #          pull: "NO-PULL"
          #
      - name: Archive screenshots
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: e2e-screenshots
          path: e2e-tests/screenshots/**/*.png
          retention-days: 7
      - name: Remove screenshots until they are stable
        working-directory: e2e-tests
        run: |
          rm -rf screenshots
  network_independent_wasm:
    name: "Same wasms for mainnet and local"
    # Note: The dockerfile structure SHOULD guarantee that the network is not used in any wasm build commands.
    #       As long as that holds, this test is not needed.
    needs: build
    runs-on: ubuntu-latest-m
    timeout-minutes: 45
    steps:
      - name: Checkout nns-dapp
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Check dockerfile for changes
        id: dockerfile_changed
        run: |
          common_parent_commit="$(git merge-base HEAD origin/main)"
          if git diff "$common_parent_commit" Dockerfile | grep -q .
          then echo "dockerfile_changed=true" >> "$GITHUB_OUTPUT"
          fi
      - name: Set up docker buildx
        if: steps.dockerfile_changed.outputs.dockerfile_changed == 'true'
        uses: docker/setup-buildx-action@v2
      - name: Build wasms
        if: steps.dockerfile_changed.outputs.dockerfile_changed == 'true'
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile
          build-args: |
            DFX_NETWORK=local
            COMMIT=${{ github.sha }}
          cache-from: type=gha,scope=cached-stage
          # Exports the artefacts from the final stage
          outputs: ./out-mainnet
      - name: Get nns-dapp_local
        if: steps.dockerfile_changed.outputs.dockerfile_changed == 'true'
        uses: actions/download-artifact@v3
        with:
          name: nns-dapp_local
          path: out-local
      - name: Remove _local suffix
        if: steps.dockerfile_changed.outputs.dockerfile_changed == 'true'
        run: mv out-local/nns-dapp_local.wasm.gz out-local/nns-dapp.wasm.gz
      - name: Get sns_aggregator
        if: steps.dockerfile_changed.outputs.dockerfile_changed == 'true'
        uses: actions/download-artifact@v3
        with:
          name: sns_aggregator
          path: out-local
      - name: Get sns_aggregator_dev
        if: steps.dockerfile_changed.outputs.dockerfile_changed == 'true'
        uses: actions/download-artifact@v3
        with:
          name: sns_aggregator_dev
          path: out-local
      - name: Compare wasms
        if: steps.dockerfile_changed.outputs.dockerfile_changed == 'true'
        run: |
          set -x
          ls -l
          artefacts="sns_aggregator_dev.wasm.gz sns_aggregator.wasm.gz nns-dapp.wasm.gz"
          networks=(mainnet local)
          for network in "${networks[@]}" ; do
            ls -l "out-$network"
            (cd "out-$network" && sha256sum ${artefacts[@]} ; ) > "${network}_hashes.txt"
          done
          diff local_hashes.txt mainnet_hashes.txt  || {
            echo "ERROR: wasm hashes differ between mainnet and local."
          }
  build-pass:
    needs: ["build", "test-playwright-e2e", "test-rest", "network_independent_wasm"]
    if: ${{ always() }}
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/needs_success
        with:
          needs: '${{ toJson(needs) }}'
