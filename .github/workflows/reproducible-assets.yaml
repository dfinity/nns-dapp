name: Reproducible Assets
on:
  push:
  workflow_dispatch:
jobs:
  native_asset_build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, ubuntu-20.04, macos-11, macos-12]
        time: [now, future]
    steps:
      - name: Unbork mac
        run: |
          if command -v brew ; then
            brew install bash
            brew install jq
            brew install coreutils
            echo "/usr/local/bin" >> $GITHUB_PATH
            echo "$(brew --prefix)/opt/gnu-sed/libexec/gnubin" >> $GITHUB_PATH
          fi
      - name: Install dependencies
        run: |
          case "$(uname)" in
          Linux)
                  sudo apt install faketime
                  ;;
          Darwin)
                  brew install libfaketime
                  ;;
          *)
                  echo Unsupported OS: $(uname)
                  exit 1
                  ;;
          esac
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install dfx
        run: DFX_VERSION="$(jq -r .dfx dfx.json)" sh -ci "$(curl -fsSL https://sdk.dfinity.org/install.sh)"
      - name: Show versions
        run: |
          for exec in bash dfx jq npm node ; do
            echo $exec --version
            "$exec" --version
          done
      - name: Get dependencies
        run: |
          # Note: This is to make network access unnecessary during the time-shifted build.
          cd frontend
          npm ci
      - name: Build
        run: |
          export DFX_NETWORK=mainnet
          . config.sh
          case "${{ matrix.time }}" in
          future)
            faketime -f "+5.5y 7m 9s" bash ./build-assets.sh ;;
          *)
            ./build-assets.sh ;;
          esac
      - name: 'Upload assets'
        uses: actions/upload-artifact@v3
        with:
          name: nns-dapp-assets_${{ matrix.os }}_${{ matrix.time }}
          path: assets.tar.xz
          retention-days: 3
      - name: 'Output the hash'
        run: echo "assets_sha256_${{ matrix.os }}_${{ matrix.time }}=$(sha256sum assets.tar.xz)" >> $GITHUB_OUTPUT
  compare_hashes:
    runs-on: ubuntu-latest
    needs: native_asset_build
    steps:
      - name: Get hashes
        run: echo ${{toJSON(needs.native_asset_build.outputs)}}
