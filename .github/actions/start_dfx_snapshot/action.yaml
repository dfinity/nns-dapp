name: 'Start dfx snapshot'
description: |
  Start a local replica running against a given snapshot.
  Optionally installs nns-dapp and sns_aggregator.
inputs:
  snsdemo_ref:
    description: "The git ref at which to use the snsdemo scripts.  Defaults to the release tag in dfx.json"
    required: false
    default: ""
  snapshot_url:
    description: "The URL of the snapshot to download and install.  Defaults to the URL of the release tag in dfx.json."
    required: false
    default: ""
  nns_dapp_wasm:
    description: "The name of the nns-dapp wasm to install"
    required: false
  nns_dapp_install_mode:
    description: "Passed as --mode with the dfx canister install command"
    required: false
    default: "reinstall"
  sns_aggregator_wasm:
    description: "The name of the sns_aggregator wasm to install"
    required: false
  sns_aggregator_install_mode:
    description: "Passed as --mode with the dfx canister install command"
    required: false
    default: "reinstall"
runs:
  using: "composite"
  steps:
    - name: Determine snsdemo ref
      id: snsdemo_ref
      shell: bash
      run: |
        SNSDEMO_REF="${{ inputs.snsdemo_ref }}"
        test -n "$SNSDEMO_REF" || SNSDEMO_REF="$(jq -r .defaults.build.config.SNSDEMO_RELEASE dfx.json)"
        echo "ref=$SNSDEMO_REF" >> "$GITHUB_OUTPUT"
    - name: Determine snsdemo snapshot URL
      id: snsdemo_snapshot
      shell: bash
      run: |
        URL="${{ inputs.snapshot_url }}"
        test -n "$URL" || URL="https://github.com/dfinity/snsdemo/releases/download/${{ steps.snsdemo_ref.outputs.ref }}/snsdemo_snapshot_ubuntu-22.04.tar.xz"
        echo "url=$URL" >> "$GITHUB_OUTPUT"
    - name: Get SNS scripts
      uses: actions/checkout@v3
      with:
        repository: 'dfinity/snsdemo'
        path: 'snsdemo'
        ref: ${{ steps.snsdemo_ref.outputs.ref }}
    - name: Add snsdemo scripts to the path
      shell: bash
      run: |
        echo "$PWD/snsdemo/bin" >> $GITHUB_PATH
    - name: Install cargo binstall
      uses: ./.github/actions/install_binstall
    - name: Install SNS script dependencies
      shell: bash
      run: |
        dfx-software-dfx-install --version "$(jq -r .dfx dfx.json)"
        cargo binstall --no-confirm "idl2json_cli@$(jq -r .defaults.build.config.IDL2JSON_VERSION dfx.json)"
    - name: Get test environment
      shell: bash
      run: |
        curl -fL --retry 5 ${{ steps.snsdemo_snapshot.outputs.url }} > state.tar.xz
        dfx-snapshot-restore --snapshot state.tar.xz --verbose
        dfx identity use snsdemo8
        dfx-sns-demo-healthcheck
    - name: Install nns-dapp
      if: ${{ inputs.nns_dapp_wasm }}
      shell: bash
      run: |
        echo "Create the nns-dapp install argument:"
        export DFX_NETWORK=local
        ./config.sh
        echo "Install:"
        dfx canister install nns-dapp --wasm ${{ inputs.nns_dapp_wasm }} --upgrade-unchanged --mode ${{ inputs.nns_dapp_install_mode }} --yes --argument "$(cat nns-dapp-arg-${DFX_NETWORK}.did)"
    - name: Install sns_aggregator
      if: ${{ inputs.sns_aggregator_wasm }}
      shell: bash
      run: |
        dfx canister install sns_aggregator --wasm ${{ inputs.sns_aggregator_wasm }} --upgrade-unchanged --mode ${{ inputs.sns_aggregator_install_mode }} --yes
