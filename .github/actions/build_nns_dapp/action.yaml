name: 'Release the nns-dapp'
description: |
  Builds the artefacts for a standard nns-dapp release, including:
          * `nns-dapp.wasm` (for all networks)
          * `sns_aggregator.wasm` (for all networks)
          * arguments for mainnet and local
          * other potentially useful files.
inputs:
  token:
    description: "Github access token used to make the release"
    required: true
  no-cache:
    description: 'no-cache'
    default: false
    type: boolean
runs:
  using: "composite"
  steps:
    - name: Set up docker buildx
      uses: docker/setup-buildx-action@v2
    - name: Build wasms
      uses: docker/build-push-action@v3
      with:
        context: .
        file: Dockerfile
        build-args: |
          DFX_NETWORK=mainnet
          COMMIT=${{ github.sha }}
        cache-from: type=gha,scope=cached-stage
        no-cache: ${{ inputs.no-cache || false }}
        # Exports the artefacts from the final stage
        outputs: out
    - name: 'Record the git commit and any tags'
      shell: bash
      run: |
        set -euxo pipefail
        git log | head -n1 > out/commit.txt
    - name: Install dfx
      shell: bash
      run: |
        set -euxo pipefail
        if command -v dfx
        then echo "Skipping, as dfx is already installed"
        else DFX_VERSION="$(jq -r .dfx dfx.json)" sh -ci "$(curl -fsSL https://sdk.dfinity.org/install.sh)"
        fi
    - name: Install didc
      shell: bash
      run: |
        set -euxo pipefail
        if command -v didc
        then echo "Skipping, as didc is already installed"
        else
          USER_BIN="$HOME/.local/bin"
          mkdir -p "$USER_BIN"
          echo "$USER_BIN" >> $GITHUB_PATH
          version="$(jq -r .defaults.build.config.DIDC_VERSION dfx.json)"
          curl -Lf "https://github.com/dfinity/candid/releases/download/${version}/didc-linux64" | install -m 755 /dev/stdin "$USER_BIN/didc"
          command -v didc || {
            echo "Failed to install didc"
            exit 1
          }
        fi
    - name: Create local arguments
      shell: bash
      run: |
        set -euxo pipefail
        DFX_NETWORK=local ./config.sh && cp nns-dapp-arg-local.did out && didc encode "$(cat out/nns-dapp-arg-local.did)" | xxd -r -p >out/nns-dapp-arg-local.bin
