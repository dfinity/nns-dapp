name: 'Release the nns-dapp'
description: |
  Builds the artefacts for a standard nns-dapp release, including:
          * `nns-dapp.wasm` (for all networks)
          * `sns_aggregator.wasm` (for all networks)
          * arguments for mainnet and local
          * other potentially useful files.
inputs:
  token:
    description: "Github access token used to make the release"
    required: true
  no-cache:
    description: 'no-cache'
    default: false
    type: boolean
runs:
  using: "composite"
  steps:
    - name: Set up docker buildx
      uses: docker/setup-buildx-action@v2
    - name: Build wasms
      uses: docker/build-push-action@v3
      with:
        context: .
        file: Dockerfile
        build-args: |
          DFX_NETWORK=mainnet
          COMMIT=${{ github.sha }}
        cache-from: type=gha,scope=cached-stage
        no-cache: ${{ inputs.no-cache || false }}
        # Exports the artefacts from the final stage
        outputs: out
    - name: 'Record the git commit and any tags'
      shell: bash
      run: |
        set -euxo pipefail
        git log | head -n1 > out/commit.txt
    - name: Check whether the snsdemo repo is already present
      shell: bash
      id: have_snsdemo
      run: |
        if test -d snsdemo
        echo have_snsdemo=true >> "$GITHUB_OUTPUT"
        else have_snsdemo=false >> "$GITHUB_OUTPUT"
        fi
    - name: Get SNS scripts
      if: ${{ steps.have_snsdemo.outputs.have_snsdemo }} == 'false'
      uses: actions/checkout@v3
      with:
        repository: 'dfinity/snsdemo'
        path: 'snsdemo'
        # Version from 2023-05-24 with longer retries to install dfx
        ref: '94a006c4a4b77d7153071dee74d80939a22c835e'
    - name: Add SNS scripts to the path
      run: echo "$PWD/snsdemo/bin" >> $GITHUB_PATH
    - name: Install tools
      shell: bash
      run: |
        set -euxo pipefail
        if command -v dfx
        then echo "Skipping, dfx installation as dfx is already installed"
        else dfx-software-dfx-install --version "$(jq -r .dfx dfx.json)"
        fi
        if command -v didc
        then echo "Skipping didc installation, as didc is already installed"
        else dfx-software-didc-install --version "$(jq -r .defaults.build.config.DIDC_VERSION dfx.json)"
        fi
    - name: Create local arguments
      shell: bash
      run: |
        set -euxo pipefail
        DFX_NETWORK=local ./config.sh && cp nns-dapp-arg-local.did out && didc encode "$(cat out/nns-dapp-arg-local.did)" | xxd -r -p >out/nns-dapp-arg-local.bin
