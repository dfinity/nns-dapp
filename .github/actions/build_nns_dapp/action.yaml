name: 'Release the nns-dapp'
description: |
  Builds the artefacts for a standard nns-dapp release, including:
          * `nns-dapp.wasm.gz` (for all networks)
          * `sns_aggregator.wasm.gz` (for all networks)
          * arguments for mainnet and local
          * other potentially useful files.
inputs:
  token:
    description: "Github access token used to make the release"
    required: true
  no-cache:
    description: 'no-cache'
    default: false
    type: boolean
  network:
    description: 'The network to build for'
    default: mainnet
runs:
  using: "composite"
  steps:
    - name: Set up docker buildx
      uses: docker/setup-buildx-action@v3
    - name: Create global config
      shell: bash
      run: echo "{}" > global-config.json
    - name: Build wasms
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Dockerfile
        build-args: |
          DFX_NETWORK=${{ inputs.network }}
          COMMIT=${{ github.sha }}
        cache-from: type=gha,scope=cached-stage
        no-cache: ${{ inputs.no-cache || false }}
        # Exports the artefacts from the final stage
        outputs: out
    - name: 'Record the git commit and any tags'
      shell: bash
      run: |
        set -euxo pipefail
        git log | head -n1 > out/commit.txt
    - name: Get SNS scripts
      uses: ./.github/actions/checkout_snsdemo
      with:
        token: ${{ inputs.token }}
    - name: Add SNS scripts to the path
      shell: bash
      run: echo "$PWD/snsdemo/bin" >> $GITHUB_PATH
    - name: Install tools
      shell: bash
      run: |
        set -euxo pipefail
        if command -v dfx
        then echo "Skipping, dfx installation as dfx is already installed"
        else dfx-software-dfx-install --version "$(jq -r .dfx dfx.json)"
        fi
        if command -v didc
        then echo "Skipping didc installation, as didc is already installed"
        else dfx-software-didc-install --release "$(jq -r .defaults.build.config.DIDC_VERSION dfx.json)"
        fi
    - name: Create local arguments
      shell: bash
      run: |
        set -euxo pipefail
        DFX_NETWORK=local ./config.sh && cp nns-dapp-arg-local.did out && didc encode "$(cat out/nns-dapp-arg-local.did)" | xxd -r -p >out/nns-dapp-arg-local.bin
    - name: Hash artefacts
      shell: bash
      # Note:
      # * `sha256sum` prints the hash of each file;
      # * The `wc -c` in the awk code gets the size in bytes of each file;
      # * The AWK code also adds a header and footer;
      # * `column -t` formats the data as a table;
      # * `tee` saves a copy of the printout in a file; that file will be included in releases.
      run: find out/ -type f | xargs sha256sum | awk '{"wc -c " $2 | getline size; print $1, size}BEGIN{print "===START_ARTEFACTS===\nsha256 size filename"}END{print "==END_ARTEFACTS=="}' | column -t | tee out/filelist.txt
