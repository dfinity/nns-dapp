// Generated by running `cargo run --bin nns_functions_candid_gen`

type AddNodeOperatorPayload = record {
  node_operator_principal_id : opt principal;
  node_allowance : nat64;
  node_provider_principal_id : opt principal;
};
type AddNodesToSubnetPayload = record {
  subnet_id : principal;
  node_ids : vec principal;
};
type AddOrRemoveDataCentersProposalPayload = record {
  data_centers_to_add : vec DataCenterRecord;
  data_centers_to_remove : vec text;
};
type BlessReplicaVersionPayload = record {
  node_manager_sha256_hex : text;
  release_package_url : text;
  sha256_hex : text;
  replica_version_id : text;
  release_package_sha256_hex : text;
  node_manager_binary_url : text;
  binary_url : text;
};
type CanisterAction = variant { Start; Stop };
type CreateSubnetPayload = record {
  unit_delay_millis : nat64;
  max_instructions_per_round : nat64;
  features : SubnetFeatures;
  max_instructions_per_message : nat64;
  gossip_registry_poll_period_ms : nat32;
  max_ingress_bytes_per_message : nat64;
  dkg_dealings_per_block : nat64;
  max_block_payload_size : nat64;
  max_instructions_per_install_code : nat64;
  start_as_nns : bool;
  is_halted : bool;
  gossip_pfn_evaluation_period_ms : nat32;
  max_ingress_messages_per_block : nat64;
  gossip_max_artifact_streams_per_peer : nat32;
  replica_version_id : text;
  gossip_max_duplicity : nat32;
  gossip_max_chunk_wait_ms : nat32;
  dkg_interval_length : nat64;
  subnet_id_override : opt principal;
  ingress_bytes_per_block_soft_cap : nat64;
  initial_notary_delay_millis : nat64;
  gossip_max_chunk_size : nat32;
  subnet_type : SubnetType;
  gossip_retransmission_request_ms : nat32;
  gossip_receive_check_cache_size : nat32;
  node_ids : vec principal;
};
type DataCenterRecord = record {
  id : text;
  gps : opt Gps;
  region : text;
  owner : text;
};
type Gps = record { latitude : float32; longitude : float32 };
type NodeRewardRate = record { xdr_permyriad_per_node_per_month : nat64 };
type NodeRewardRates = record { rates : vec record { text; NodeRewardRate } };
type RecoverSubnetPayload = record {
  height : nat64;
  replacement_nodes : opt vec principal;
  subnet_id : principal;
  registry_store_uri : opt record { text; text; nat64 };
  state_hash : vec nat8;
  time_ns : nat64;
};
type RemoveNodeOperatorsPayload = record {
  node_operators_to_remove : vec vec nat8;
};
type RemoveNodesFromSubnetPayload = record { node_ids : vec principal };
type RerouteCanisterRangePayload = record {
  range_end_inclusive : principal;
  range_start_inclusive : principal;
  destination_subnet : principal;
};
type SetAuthorizedSubnetworkListArgs = record {
  who : opt principal;
  subnets : vec principal;
};
type SetFirewallConfigPayload = record {
  ipv4_prefixes : vec text;
  firewall_config : text;
  ipv6_prefixes : vec text;
};
type StopOrStartNnsCanisterProposalPayload = record {
  action : CanisterAction;
  canister_id : principal;
};
type SubnetFeatures = record { ecdsa_signatures : bool };
type SubnetType = variant { application; verified_application; system };
type UpdateIcpXdrConversionRatePayload = record {
  data_source : text;
  xdr_permyriad_per_icp : nat64;
  timestamp_seconds : nat64;
};
type UpdateNodeOperatorConfigPayload = record {
  node_operator_id : opt principal;
  node_allowance : opt nat64;
  rewardable_nodes : vec record { text; nat32 };
  dc_id : opt text;
};
type UpdateNodeRewardsTableProposalPayload = record {
  new_entries : vec record { text; NodeRewardRates };
};
type UpdateSubnetPayload = record {
  unit_delay_millis : opt nat64;
  max_duplicity : opt nat32;
  max_instructions_per_round : opt nat64;
  features : opt SubnetFeatures;
  set_gossip_config_to_default : bool;
  max_instructions_per_message : opt nat64;
  pfn_evaluation_period_ms : opt nat32;
  subnet_id : principal;
  max_ingress_bytes_per_message : opt nat64;
  dkg_dealings_per_block : opt nat64;
  max_block_payload_size : opt nat64;
  max_instructions_per_install_code : opt nat64;
  start_as_nns : opt bool;
  is_halted : opt bool;
  max_number_of_canisters : opt nat64;
  advert_best_effort_percentage : opt nat32;
  retransmission_request_ms : opt nat32;
  dkg_interval_length : opt nat64;
  registry_poll_period_ms : opt nat32;
  max_chunk_wait_ms : opt nat32;
  receive_check_cache_size : opt nat32;
  ssh_backup_access : opt vec text;
  ingress_bytes_per_block_soft_cap : opt nat64;
  max_chunk_size : opt nat32;
  initial_notary_delay_millis : opt nat64;
  max_artifact_streams_per_peer : opt nat32;
  subnet_type : opt SubnetType;
  ssh_readonly_access : opt vec text;
};
type UpdateSubnetReplicaVersionPayload = record {
  subnet_id : principal;
  replica_version_id : text;
};
type UpdateUnassignedNodesConfigPayload = record {
  replica_version : opt text;
  ssh_readonly_access : opt vec text;
};
service : {
  add_node_operator : (AddNodeOperatorPayload) -> ();
  add_nodes_to_subnet : (AddNodesToSubnetPayload) -> ();
  add_or_remove_data_centers : (AddOrRemoveDataCentersProposalPayload) -> ();
  bless_replica_version : (BlessReplicaVersionPayload) -> ();
  clear_provisional_whitelist : () -> ();
  create_subnet : (CreateSubnetPayload) -> ();
  recover_subnet : (RecoverSubnetPayload) -> ();
  remove_node_operators : (RemoveNodeOperatorsPayload) -> ();
  remove_nodes : (RemoveNodesFromSubnetPayload) -> ();
  remove_nodes_from_subnet : (RemoveNodesFromSubnetPayload) -> ();
  reroute_canister_range : (RerouteCanisterRangePayload) -> ();
  set_authorized_subnetwork_list : (SetAuthorizedSubnetworkListArgs) -> ();
  set_firewall_config : (SetFirewallConfigPayload) -> ();
  stop_or_start_nns_canister : (StopOrStartNnsCanisterProposalPayload) -> ();
  update_icp_xdr_conversion_rate : (UpdateIcpXdrConversionRatePayload) -> ();
  update_node_operator_config : (UpdateNodeOperatorConfigPayload) -> ();
  update_node_rewards_table : (UpdateNodeRewardsTableProposalPayload) -> ();
  update_subnet : (UpdateSubnetPayload) -> ();
  update_subnet_replica_version : (UpdateSubnetReplicaVersionPayload) -> ();
  update_unassigned_nodes_config : (UpdateUnassignedNodesConfigPayload) -> ();
}