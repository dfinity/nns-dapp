// source: governance.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var base_types_pb = require('./base_types_pb.js');
goog.object.extend(proto, base_types_pb);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.GovernanceError', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.GovernanceError.ErrorType', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.ManageNeuron', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.ManageNeuron.CommandCase', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.ManageNeuron.Configure', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.OperationCase', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.ManageNeuron.NeuronIdOrSubaccountCase', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.ManageNeuronResponse', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.ManageNeuronResponse.CommandCase', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ic_nns_governance.pb.v1.ManageNeuron = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ic_nns_governance.pb.v1.ManageNeuron.oneofGroups_);
};
goog.inherits(proto.ic_nns_governance.pb.v1.ManageNeuron, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ic_nns_governance.pb.v1.ManageNeuron.displayName = 'proto.ic_nns_governance.pb.v1.ManageNeuron';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay.displayName = 'proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving.displayName = 'proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving.displayName = 'proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey.displayName = 'proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey.displayName = 'proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.oneofGroups_);
};
goog.inherits(proto.ic_nns_governance.pb.v1.ManageNeuron.Configure, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.displayName = 'proto.ic_nns_governance.pb.v1.ManageNeuron.Configure';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ic_nns_governance.pb.v1.ManageNeuronResponse.oneofGroups_);
};
goog.inherits(proto.ic_nns_governance.pb.v1.ManageNeuronResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ic_nns_governance.pb.v1.ManageNeuronResponse.displayName = 'proto.ic_nns_governance.pb.v1.ManageNeuronResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse.displayName = 'proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ic_nns_governance.pb.v1.GovernanceError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ic_nns_governance.pb.v1.GovernanceError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ic_nns_governance.pb.v1.GovernanceError.displayName = 'proto.ic_nns_governance.pb.v1.GovernanceError';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.oneofGroups_ = [[11,12],[2]];

/**
 * @enum {number}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.NeuronIdOrSubaccountCase = {
  NEURON_ID_OR_SUBACCOUNT_NOT_SET: 0,
  SUBACCOUNT: 11,
  NEURON_ID: 12
};

/**
 * @return {proto.ic_nns_governance.pb.v1.ManageNeuron.NeuronIdOrSubaccountCase}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.getNeuronIdOrSubaccountCase = function() {
  return /** @type {proto.ic_nns_governance.pb.v1.ManageNeuron.NeuronIdOrSubaccountCase} */(jspb.Message.computeOneofCase(this, proto.ic_nns_governance.pb.v1.ManageNeuron.oneofGroups_[0]));
};

/**
 * @enum {number}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.CommandCase = {
  COMMAND_NOT_SET: 0,
  CONFIGURE: 2
};

/**
 * @return {proto.ic_nns_governance.pb.v1.ManageNeuron.CommandCase}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.getCommandCase = function() {
  return /** @type {proto.ic_nns_governance.pb.v1.ManageNeuron.CommandCase} */(jspb.Message.computeOneofCase(this, proto.ic_nns_governance.pb.v1.ManageNeuron.oneofGroups_[1]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.toObject = function(opt_includeInstance) {
  return proto.ic_nns_governance.pb.v1.ManageNeuron.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && base_types_pb.NeuronId.toObject(includeInstance, f),
    subaccount: msg.getSubaccount_asB64(),
    neuronId: (f = msg.getNeuronId()) && base_types_pb.NeuronId.toObject(includeInstance, f),
    configure: (f = msg.getConfigure()) && proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ic_nns_governance.pb.v1.ManageNeuron;
  return proto.ic_nns_governance.pb.v1.ManageNeuron.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new base_types_pb.NeuronId;
      reader.readMessage(value,base_types_pb.NeuronId.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSubaccount(value);
      break;
    case 12:
      var value = new base_types_pb.NeuronId;
      reader.readMessage(value,base_types_pb.NeuronId.deserializeBinaryFromReader);
      msg.setNeuronId(value);
      break;
    case 2:
      var value = new proto.ic_nns_governance.pb.v1.ManageNeuron.Configure;
      reader.readMessage(value,proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.deserializeBinaryFromReader);
      msg.setConfigure(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ic_nns_governance.pb.v1.ManageNeuron.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      base_types_pb.NeuronId.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeBytes(
      11,
      f
    );
  }
  f = message.getNeuronId();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      base_types_pb.NeuronId.serializeBinaryToWriter
    );
  }
  f = message.getConfigure();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay.prototype.toObject = function(opt_includeInstance) {
  return proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay.toObject = function(includeInstance, msg) {
  var f, obj = {
    additionalDissolveDelaySeconds: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay;
  return proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAdditionalDissolveDelaySeconds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAdditionalDissolveDelaySeconds();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 additional_dissolve_delay_seconds = 1;
 * @return {number}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay.prototype.getAdditionalDissolveDelaySeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay.prototype.setAdditionalDissolveDelaySeconds = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving.prototype.toObject = function(opt_includeInstance) {
  return proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving;
  return proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving.prototype.toObject = function(opt_includeInstance) {
  return proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving;
  return proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey.prototype.toObject = function(opt_includeInstance) {
  return proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    newHotKey: (f = msg.getNewHotKey()) && base_types_pb.PrincipalId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey;
  return proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new base_types_pb.PrincipalId;
      reader.readMessage(value,base_types_pb.PrincipalId.deserializeBinaryFromReader);
      msg.setNewHotKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNewHotKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      base_types_pb.PrincipalId.serializeBinaryToWriter
    );
  }
};


/**
 * optional ic_base_types.pb.v1.PrincipalId new_hot_key = 1;
 * @return {?proto.ic_base_types.pb.v1.PrincipalId}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey.prototype.getNewHotKey = function() {
  return /** @type{?proto.ic_base_types.pb.v1.PrincipalId} */ (
    jspb.Message.getWrapperField(this, base_types_pb.PrincipalId, 1));
};


/**
 * @param {?proto.ic_base_types.pb.v1.PrincipalId|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey} returns this
*/
proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey.prototype.setNewHotKey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey.prototype.clearNewHotKey = function() {
  return this.setNewHotKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey.prototype.hasNewHotKey = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey.prototype.toObject = function(opt_includeInstance) {
  return proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    hotKeyToRemove: (f = msg.getHotKeyToRemove()) && base_types_pb.PrincipalId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey;
  return proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new base_types_pb.PrincipalId;
      reader.readMessage(value,base_types_pb.PrincipalId.deserializeBinaryFromReader);
      msg.setHotKeyToRemove(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHotKeyToRemove();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      base_types_pb.PrincipalId.serializeBinaryToWriter
    );
  }
};


/**
 * optional ic_base_types.pb.v1.PrincipalId hot_key_to_remove = 1;
 * @return {?proto.ic_base_types.pb.v1.PrincipalId}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey.prototype.getHotKeyToRemove = function() {
  return /** @type{?proto.ic_base_types.pb.v1.PrincipalId} */ (
    jspb.Message.getWrapperField(this, base_types_pb.PrincipalId, 1));
};


/**
 * @param {?proto.ic_base_types.pb.v1.PrincipalId|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey} returns this
*/
proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey.prototype.setHotKeyToRemove = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey.prototype.clearHotKeyToRemove = function() {
  return this.setHotKeyToRemove(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey.prototype.hasHotKeyToRemove = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.oneofGroups_ = [[1,2,3,4,5]];

/**
 * @enum {number}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.OperationCase = {
  OPERATION_NOT_SET: 0,
  INCREASE_DISSOLVE_DELAY: 1,
  START_DISSOLVING: 2,
  STOP_DISSOLVING: 3,
  ADD_HOT_KEY: 4,
  REMOVE_HOT_KEY: 5
};

/**
 * @return {proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.OperationCase}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.getOperationCase = function() {
  return /** @type {proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.OperationCase} */(jspb.Message.computeOneofCase(this, proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.toObject = function(opt_includeInstance) {
  return proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.Configure} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.toObject = function(includeInstance, msg) {
  var f, obj = {
    increaseDissolveDelay: (f = msg.getIncreaseDissolveDelay()) && proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay.toObject(includeInstance, f),
    startDissolving: (f = msg.getStartDissolving()) && proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving.toObject(includeInstance, f),
    stopDissolving: (f = msg.getStopDissolving()) && proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving.toObject(includeInstance, f),
    addHotKey: (f = msg.getAddHotKey()) && proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey.toObject(includeInstance, f),
    removeHotKey: (f = msg.getRemoveHotKey()) && proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Configure}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ic_nns_governance.pb.v1.ManageNeuron.Configure;
  return proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.Configure} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Configure}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay;
      reader.readMessage(value,proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay.deserializeBinaryFromReader);
      msg.setIncreaseDissolveDelay(value);
      break;
    case 2:
      var value = new proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving;
      reader.readMessage(value,proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving.deserializeBinaryFromReader);
      msg.setStartDissolving(value);
      break;
    case 3:
      var value = new proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving;
      reader.readMessage(value,proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving.deserializeBinaryFromReader);
      msg.setStopDissolving(value);
      break;
    case 4:
      var value = new proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey;
      reader.readMessage(value,proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey.deserializeBinaryFromReader);
      msg.setAddHotKey(value);
      break;
    case 5:
      var value = new proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey;
      reader.readMessage(value,proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey.deserializeBinaryFromReader);
      msg.setRemoveHotKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.Configure} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIncreaseDissolveDelay();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay.serializeBinaryToWriter
    );
  }
  f = message.getStartDissolving();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving.serializeBinaryToWriter
    );
  }
  f = message.getStopDissolving();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving.serializeBinaryToWriter
    );
  }
  f = message.getAddHotKey();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey.serializeBinaryToWriter
    );
  }
  f = message.getRemoveHotKey();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional IncreaseDissolveDelay increase_dissolve_delay = 1;
 * @return {?proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.getIncreaseDissolveDelay = function() {
  return /** @type{?proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay} */ (
    jspb.Message.getWrapperField(this, proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay, 1));
};


/**
 * @param {?proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Configure} returns this
*/
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.setIncreaseDissolveDelay = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Configure} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.clearIncreaseDissolveDelay = function() {
  return this.setIncreaseDissolveDelay(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.hasIncreaseDissolveDelay = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional StartDissolving start_dissolving = 2;
 * @return {?proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.getStartDissolving = function() {
  return /** @type{?proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving} */ (
    jspb.Message.getWrapperField(this, proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving, 2));
};


/**
 * @param {?proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Configure} returns this
*/
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.setStartDissolving = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Configure} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.clearStartDissolving = function() {
  return this.setStartDissolving(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.hasStartDissolving = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional StopDissolving stop_dissolving = 3;
 * @return {?proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.getStopDissolving = function() {
  return /** @type{?proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving} */ (
    jspb.Message.getWrapperField(this, proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving, 3));
};


/**
 * @param {?proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Configure} returns this
*/
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.setStopDissolving = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Configure} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.clearStopDissolving = function() {
  return this.setStopDissolving(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.hasStopDissolving = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional AddHotKey add_hot_key = 4;
 * @return {?proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.getAddHotKey = function() {
  return /** @type{?proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey} */ (
    jspb.Message.getWrapperField(this, proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey, 4));
};


/**
 * @param {?proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Configure} returns this
*/
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.setAddHotKey = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Configure} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.clearAddHotKey = function() {
  return this.setAddHotKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.hasAddHotKey = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional RemoveHotKey remove_hot_key = 5;
 * @return {?proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.getRemoveHotKey = function() {
  return /** @type{?proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey} */ (
    jspb.Message.getWrapperField(this, proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey, 5));
};


/**
 * @param {?proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Configure} returns this
*/
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.setRemoveHotKey = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Configure} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.clearRemoveHotKey = function() {
  return this.setRemoveHotKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.hasRemoveHotKey = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ic_base_types.pb.v1.NeuronId id = 1;
 * @return {?proto.ic_base_types.pb.v1.NeuronId}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.getId = function() {
  return /** @type{?proto.ic_base_types.pb.v1.NeuronId} */ (
    jspb.Message.getWrapperField(this, base_types_pb.NeuronId, 1));
};


/**
 * @param {?proto.ic_base_types.pb.v1.NeuronId|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron} returns this
*/
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes subaccount = 11;
 * @return {!(string|Uint8Array)}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.getSubaccount = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes subaccount = 11;
 * This is a type-conversion wrapper around `getSubaccount()`
 * @return {string}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.getSubaccount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSubaccount()));
};


/**
 * optional bytes subaccount = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSubaccount()`
 * @return {!Uint8Array}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.getSubaccount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSubaccount()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.setSubaccount = function(value) {
  return jspb.Message.setOneofField(this, 11, proto.ic_nns_governance.pb.v1.ManageNeuron.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.clearSubaccount = function() {
  return jspb.Message.setOneofField(this, 11, proto.ic_nns_governance.pb.v1.ManageNeuron.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.hasSubaccount = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional ic_base_types.pb.v1.NeuronId neuron_id = 12;
 * @return {?proto.ic_base_types.pb.v1.NeuronId}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.getNeuronId = function() {
  return /** @type{?proto.ic_base_types.pb.v1.NeuronId} */ (
    jspb.Message.getWrapperField(this, base_types_pb.NeuronId, 12));
};


/**
 * @param {?proto.ic_base_types.pb.v1.NeuronId|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron} returns this
*/
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.setNeuronId = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.ic_nns_governance.pb.v1.ManageNeuron.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.clearNeuronId = function() {
  return this.setNeuronId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.hasNeuronId = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional Configure configure = 2;
 * @return {?proto.ic_nns_governance.pb.v1.ManageNeuron.Configure}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.getConfigure = function() {
  return /** @type{?proto.ic_nns_governance.pb.v1.ManageNeuron.Configure} */ (
    jspb.Message.getWrapperField(this, proto.ic_nns_governance.pb.v1.ManageNeuron.Configure, 2));
};


/**
 * @param {?proto.ic_nns_governance.pb.v1.ManageNeuron.Configure|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron} returns this
*/
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.setConfigure = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.ic_nns_governance.pb.v1.ManageNeuron.oneofGroups_[1], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.clearConfigure = function() {
  return this.setConfigure(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.hasConfigure = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.CommandCase = {
  COMMAND_NOT_SET: 0,
  ERROR: 1,
  CONFIGURE: 2
};

/**
 * @return {proto.ic_nns_governance.pb.v1.ManageNeuronResponse.CommandCase}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.prototype.getCommandCase = function() {
  return /** @type {proto.ic_nns_governance.pb.v1.ManageNeuronResponse.CommandCase} */(jspb.Message.computeOneofCase(this, proto.ic_nns_governance.pb.v1.ManageNeuronResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ic_nns_governance.pb.v1.ManageNeuronResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.ic_nns_governance.pb.v1.GovernanceError.toObject(includeInstance, f),
    configure: (f = msg.getConfigure()) && proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ic_nns_governance.pb.v1.ManageNeuronResponse;
  return proto.ic_nns_governance.pb.v1.ManageNeuronResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ic_nns_governance.pb.v1.GovernanceError;
      reader.readMessage(value,proto.ic_nns_governance.pb.v1.GovernanceError.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse;
      reader.readMessage(value,proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse.deserializeBinaryFromReader);
      msg.setConfigure(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ic_nns_governance.pb.v1.ManageNeuronResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ic_nns_governance.pb.v1.GovernanceError.serializeBinaryToWriter
    );
  }
  f = message.getConfigure();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse;
  return proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * optional GovernanceError error = 1;
 * @return {?proto.ic_nns_governance.pb.v1.GovernanceError}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.prototype.getError = function() {
  return /** @type{?proto.ic_nns_governance.pb.v1.GovernanceError} */ (
    jspb.Message.getWrapperField(this, proto.ic_nns_governance.pb.v1.GovernanceError, 1));
};


/**
 * @param {?proto.ic_nns_governance.pb.v1.GovernanceError|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse} returns this
*/
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.ic_nns_governance.pb.v1.ManageNeuronResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ConfigureResponse configure = 2;
 * @return {?proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.prototype.getConfigure = function() {
  return /** @type{?proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse} */ (
    jspb.Message.getWrapperField(this, proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse, 2));
};


/**
 * @param {?proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse} returns this
*/
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.prototype.setConfigure = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.ic_nns_governance.pb.v1.ManageNeuronResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.prototype.clearConfigure = function() {
  return this.setConfigure(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.prototype.hasConfigure = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ic_nns_governance.pb.v1.GovernanceError.prototype.toObject = function(opt_includeInstance) {
  return proto.ic_nns_governance.pb.v1.GovernanceError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ic_nns_governance.pb.v1.GovernanceError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.GovernanceError.toObject = function(includeInstance, msg) {
  var f, obj = {
    errorType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    errorMessage: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ic_nns_governance.pb.v1.GovernanceError}
 */
proto.ic_nns_governance.pb.v1.GovernanceError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ic_nns_governance.pb.v1.GovernanceError;
  return proto.ic_nns_governance.pb.v1.GovernanceError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ic_nns_governance.pb.v1.GovernanceError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ic_nns_governance.pb.v1.GovernanceError}
 */
proto.ic_nns_governance.pb.v1.GovernanceError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ic_nns_governance.pb.v1.GovernanceError.ErrorType} */ (reader.readEnum());
      msg.setErrorType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ic_nns_governance.pb.v1.GovernanceError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ic_nns_governance.pb.v1.GovernanceError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ic_nns_governance.pb.v1.GovernanceError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.GovernanceError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrorType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.ic_nns_governance.pb.v1.GovernanceError.ErrorType = {
  ERROR_TYPE_UNSPECIFIED: 0,
  ERROR_TYPE_OK: 1,
  ERROR_TYPE_UNAVAILABLE: 2,
  ERROR_TYPE_NOT_AUTHORIZED: 3,
  ERROR_TYPE_NOT_FOUND: 4,
  ERROR_TYPE_INVALID_COMMAND: 5,
  ERROR_TYPE_REQUIRES_NOT_DISSOLVING: 6,
  ERROR_TYPE_REQUIRES_DISSOLVING: 7,
  ERROR_TYPE_REQUIRES_DISSOLVED: 8,
  ERROR_TYPE_HOT_KEY: 9,
  ERROR_TYPE_RESOURCE_EXHAUSTED: 10,
  ERROR_TYPE_PRECONDITION_FAILED: 11,
  ERROR_TYPE_EXTERNAL: 12,
  ERROR_TYPE_LEDGER_UPDATE_ONGOING: 13,
  ERROR_TYPE_INSUFFICIENT_FUNDS: 14,
  ERROR_TYPE_INVALID_PRINCIPAL: 15,
  ERROR_TYPE_INVALID_PROPOSAL: 16
};

/**
 * optional ErrorType error_type = 1;
 * @return {!proto.ic_nns_governance.pb.v1.GovernanceError.ErrorType}
 */
proto.ic_nns_governance.pb.v1.GovernanceError.prototype.getErrorType = function() {
  return /** @type {!proto.ic_nns_governance.pb.v1.GovernanceError.ErrorType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ic_nns_governance.pb.v1.GovernanceError.ErrorType} value
 * @return {!proto.ic_nns_governance.pb.v1.GovernanceError} returns this
 */
proto.ic_nns_governance.pb.v1.GovernanceError.prototype.setErrorType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string error_message = 2;
 * @return {string}
 */
proto.ic_nns_governance.pb.v1.GovernanceError.prototype.getErrorMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ic_nns_governance.pb.v1.GovernanceError} returns this
 */
proto.ic_nns_governance.pb.v1.GovernanceError.prototype.setErrorMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.ic_nns_governance.pb.v1);
