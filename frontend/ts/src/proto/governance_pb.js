// source: governance.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var base_types_pb = require('./base_types_pb.js');
goog.object.extend(proto, base_types_pb);
var ledger_pb = require('./ledger_pb.js');
goog.object.extend(proto, ledger_pb);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.BallotInfo', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.GovernanceError', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.GovernanceError.ErrorType', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.ListNeurons', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.ListNeuronsResponse', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.ListNeuronsResponse.NeuronMapEntry', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.ManageNeuron', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.ManageNeuron.CommandCase', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.ManageNeuron.Configure', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.OperationCase', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.Amount', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.ManageNeuron.Follow', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.ManageNeuron.JoinCommunityFund', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.ManageNeuron.Merge', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.ManageNeuron.MergeMaturity', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.ManageNeuron.NeuronIdOrSubaccountCase', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.ManageNeuron.RegisterVote', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.ManageNeuron.Spawn', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.ManageNeuronResponse', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.ManageNeuronResponse.CommandCase', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.ManageNeuronResponse.DisburseResponse', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.ManageNeuronResponse.FollowResponse', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeMaturityResponse', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeResponse', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.ManageNeuronResponse.RegisterVoteResponse', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.ManageNeuronResponse.SpawnResponse', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.Neuron', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.Neuron.DissolveStateCase', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.Neuron.Followees', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.NeuronInfo', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.NeuronStakeTransfer', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.Topic', null, global);
goog.exportSymbol('proto.ic_nns_governance.pb.v1.Vote', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ic_nns_governance.pb.v1.ManageNeuron = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ic_nns_governance.pb.v1.ManageNeuron.oneofGroups_);
};
goog.inherits(proto.ic_nns_governance.pb.v1.ManageNeuron, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ic_nns_governance.pb.v1.ManageNeuron.displayName = 'proto.ic_nns_governance.pb.v1.ManageNeuron';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay.displayName = 'proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving.displayName = 'proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving.displayName = 'proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey.displayName = 'proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey.displayName = 'proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.oneofGroups_);
};
goog.inherits(proto.ic_nns_governance.pb.v1.ManageNeuron.Configure, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.displayName = 'proto.ic_nns_governance.pb.v1.ManageNeuron.Configure';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Spawn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ic_nns_governance.pb.v1.ManageNeuron.Spawn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ic_nns_governance.pb.v1.ManageNeuron.Spawn.displayName = 'proto.ic_nns_governance.pb.v1.ManageNeuron.Spawn';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.displayName = 'proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.Amount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.Amount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.Amount.displayName = 'proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.Amount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Follow = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ic_nns_governance.pb.v1.ManageNeuron.Follow.repeatedFields_, null);
};
goog.inherits(proto.ic_nns_governance.pb.v1.ManageNeuron.Follow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ic_nns_governance.pb.v1.ManageNeuron.Follow.displayName = 'proto.ic_nns_governance.pb.v1.ManageNeuron.Follow';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.RegisterVote = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ic_nns_governance.pb.v1.ManageNeuron.RegisterVote, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ic_nns_governance.pb.v1.ManageNeuron.RegisterVote.displayName = 'proto.ic_nns_governance.pb.v1.ManageNeuron.RegisterVote';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Merge = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ic_nns_governance.pb.v1.ManageNeuron.Merge, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ic_nns_governance.pb.v1.ManageNeuron.Merge.displayName = 'proto.ic_nns_governance.pb.v1.ManageNeuron.Merge';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.MergeMaturity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ic_nns_governance.pb.v1.ManageNeuron.MergeMaturity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ic_nns_governance.pb.v1.ManageNeuron.MergeMaturity.displayName = 'proto.ic_nns_governance.pb.v1.ManageNeuron.MergeMaturity';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.JoinCommunityFund = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ic_nns_governance.pb.v1.ManageNeuron.JoinCommunityFund, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ic_nns_governance.pb.v1.ManageNeuron.JoinCommunityFund.displayName = 'proto.ic_nns_governance.pb.v1.ManageNeuron.JoinCommunityFund';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ic_nns_governance.pb.v1.ManageNeuronResponse.oneofGroups_);
};
goog.inherits(proto.ic_nns_governance.pb.v1.ManageNeuronResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ic_nns_governance.pb.v1.ManageNeuronResponse.displayName = 'proto.ic_nns_governance.pb.v1.ManageNeuronResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse.displayName = 'proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.DisburseResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ic_nns_governance.pb.v1.ManageNeuronResponse.DisburseResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ic_nns_governance.pb.v1.ManageNeuronResponse.DisburseResponse.displayName = 'proto.ic_nns_governance.pb.v1.ManageNeuronResponse.DisburseResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.SpawnResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ic_nns_governance.pb.v1.ManageNeuronResponse.SpawnResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ic_nns_governance.pb.v1.ManageNeuronResponse.SpawnResponse.displayName = 'proto.ic_nns_governance.pb.v1.ManageNeuronResponse.SpawnResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeMaturityResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeMaturityResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeMaturityResponse.displayName = 'proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeMaturityResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.FollowResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ic_nns_governance.pb.v1.ManageNeuronResponse.FollowResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ic_nns_governance.pb.v1.ManageNeuronResponse.FollowResponse.displayName = 'proto.ic_nns_governance.pb.v1.ManageNeuronResponse.FollowResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.RegisterVoteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ic_nns_governance.pb.v1.ManageNeuronResponse.RegisterVoteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ic_nns_governance.pb.v1.ManageNeuronResponse.RegisterVoteResponse.displayName = 'proto.ic_nns_governance.pb.v1.ManageNeuronResponse.RegisterVoteResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeResponse.displayName = 'proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ic_nns_governance.pb.v1.GovernanceError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ic_nns_governance.pb.v1.GovernanceError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ic_nns_governance.pb.v1.GovernanceError.displayName = 'proto.ic_nns_governance.pb.v1.GovernanceError';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ic_nns_governance.pb.v1.ListNeurons = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ic_nns_governance.pb.v1.ListNeurons.repeatedFields_, null);
};
goog.inherits(proto.ic_nns_governance.pb.v1.ListNeurons, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ic_nns_governance.pb.v1.ListNeurons.displayName = 'proto.ic_nns_governance.pb.v1.ListNeurons';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ic_nns_governance.pb.v1.ListNeuronsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ic_nns_governance.pb.v1.ListNeuronsResponse.repeatedFields_, null);
};
goog.inherits(proto.ic_nns_governance.pb.v1.ListNeuronsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ic_nns_governance.pb.v1.ListNeuronsResponse.displayName = 'proto.ic_nns_governance.pb.v1.ListNeuronsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ic_nns_governance.pb.v1.ListNeuronsResponse.NeuronMapEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ic_nns_governance.pb.v1.ListNeuronsResponse.NeuronMapEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ic_nns_governance.pb.v1.ListNeuronsResponse.NeuronMapEntry.displayName = 'proto.ic_nns_governance.pb.v1.ListNeuronsResponse.NeuronMapEntry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ic_nns_governance.pb.v1.BallotInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ic_nns_governance.pb.v1.BallotInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ic_nns_governance.pb.v1.BallotInfo.displayName = 'proto.ic_nns_governance.pb.v1.BallotInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ic_nns_governance.pb.v1.NeuronInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ic_nns_governance.pb.v1.NeuronInfo.repeatedFields_, null);
};
goog.inherits(proto.ic_nns_governance.pb.v1.NeuronInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ic_nns_governance.pb.v1.NeuronInfo.displayName = 'proto.ic_nns_governance.pb.v1.NeuronInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ic_nns_governance.pb.v1.Neuron = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ic_nns_governance.pb.v1.Neuron.repeatedFields_, proto.ic_nns_governance.pb.v1.Neuron.oneofGroups_);
};
goog.inherits(proto.ic_nns_governance.pb.v1.Neuron, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ic_nns_governance.pb.v1.Neuron.displayName = 'proto.ic_nns_governance.pb.v1.Neuron';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ic_nns_governance.pb.v1.Neuron.Followees = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ic_nns_governance.pb.v1.Neuron.Followees.repeatedFields_, null);
};
goog.inherits(proto.ic_nns_governance.pb.v1.Neuron.Followees, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ic_nns_governance.pb.v1.Neuron.Followees.displayName = 'proto.ic_nns_governance.pb.v1.Neuron.Followees';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ic_nns_governance.pb.v1.NeuronStakeTransfer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ic_nns_governance.pb.v1.NeuronStakeTransfer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ic_nns_governance.pb.v1.NeuronStakeTransfer.displayName = 'proto.ic_nns_governance.pb.v1.NeuronStakeTransfer';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.oneofGroups_ = [[11,12],[2,3,4,5,7,13,14]];

/**
 * @enum {number}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.NeuronIdOrSubaccountCase = {
  NEURON_ID_OR_SUBACCOUNT_NOT_SET: 0,
  SUBACCOUNT: 11,
  NEURON_ID: 12
};

/**
 * @return {proto.ic_nns_governance.pb.v1.ManageNeuron.NeuronIdOrSubaccountCase}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.getNeuronIdOrSubaccountCase = function() {
  return /** @type {proto.ic_nns_governance.pb.v1.ManageNeuron.NeuronIdOrSubaccountCase} */(jspb.Message.computeOneofCase(this, proto.ic_nns_governance.pb.v1.ManageNeuron.oneofGroups_[0]));
};

/**
 * @enum {number}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.CommandCase = {
  COMMAND_NOT_SET: 0,
  CONFIGURE: 2,
  DISBURSE: 3,
  SPAWN: 4,
  FOLLOW: 5,
  REGISTER_VOTE: 7,
  MERGE_MATURITY: 13,
  MERGE: 14
};

/**
 * @return {proto.ic_nns_governance.pb.v1.ManageNeuron.CommandCase}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.getCommandCase = function() {
  return /** @type {proto.ic_nns_governance.pb.v1.ManageNeuron.CommandCase} */(jspb.Message.computeOneofCase(this, proto.ic_nns_governance.pb.v1.ManageNeuron.oneofGroups_[1]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.toObject = function(opt_includeInstance) {
  return proto.ic_nns_governance.pb.v1.ManageNeuron.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && base_types_pb.NeuronId.toObject(includeInstance, f),
    subaccount: msg.getSubaccount_asB64(),
    neuronId: (f = msg.getNeuronId()) && base_types_pb.NeuronId.toObject(includeInstance, f),
    configure: (f = msg.getConfigure()) && proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.toObject(includeInstance, f),
    disburse: (f = msg.getDisburse()) && proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.toObject(includeInstance, f),
    spawn: (f = msg.getSpawn()) && proto.ic_nns_governance.pb.v1.ManageNeuron.Spawn.toObject(includeInstance, f),
    follow: (f = msg.getFollow()) && proto.ic_nns_governance.pb.v1.ManageNeuron.Follow.toObject(includeInstance, f),
    registerVote: (f = msg.getRegisterVote()) && proto.ic_nns_governance.pb.v1.ManageNeuron.RegisterVote.toObject(includeInstance, f),
    mergeMaturity: (f = msg.getMergeMaturity()) && proto.ic_nns_governance.pb.v1.ManageNeuron.MergeMaturity.toObject(includeInstance, f),
    merge: (f = msg.getMerge()) && proto.ic_nns_governance.pb.v1.ManageNeuron.Merge.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ic_nns_governance.pb.v1.ManageNeuron;
  return proto.ic_nns_governance.pb.v1.ManageNeuron.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new base_types_pb.NeuronId;
      reader.readMessage(value,base_types_pb.NeuronId.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSubaccount(value);
      break;
    case 12:
      var value = new base_types_pb.NeuronId;
      reader.readMessage(value,base_types_pb.NeuronId.deserializeBinaryFromReader);
      msg.setNeuronId(value);
      break;
    case 2:
      var value = new proto.ic_nns_governance.pb.v1.ManageNeuron.Configure;
      reader.readMessage(value,proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.deserializeBinaryFromReader);
      msg.setConfigure(value);
      break;
    case 3:
      var value = new proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse;
      reader.readMessage(value,proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.deserializeBinaryFromReader);
      msg.setDisburse(value);
      break;
    case 4:
      var value = new proto.ic_nns_governance.pb.v1.ManageNeuron.Spawn;
      reader.readMessage(value,proto.ic_nns_governance.pb.v1.ManageNeuron.Spawn.deserializeBinaryFromReader);
      msg.setSpawn(value);
      break;
    case 5:
      var value = new proto.ic_nns_governance.pb.v1.ManageNeuron.Follow;
      reader.readMessage(value,proto.ic_nns_governance.pb.v1.ManageNeuron.Follow.deserializeBinaryFromReader);
      msg.setFollow(value);
      break;
    case 7:
      var value = new proto.ic_nns_governance.pb.v1.ManageNeuron.RegisterVote;
      reader.readMessage(value,proto.ic_nns_governance.pb.v1.ManageNeuron.RegisterVote.deserializeBinaryFromReader);
      msg.setRegisterVote(value);
      break;
    case 13:
      var value = new proto.ic_nns_governance.pb.v1.ManageNeuron.MergeMaturity;
      reader.readMessage(value,proto.ic_nns_governance.pb.v1.ManageNeuron.MergeMaturity.deserializeBinaryFromReader);
      msg.setMergeMaturity(value);
      break;
    case 14:
      var value = new proto.ic_nns_governance.pb.v1.ManageNeuron.Merge;
      reader.readMessage(value,proto.ic_nns_governance.pb.v1.ManageNeuron.Merge.deserializeBinaryFromReader);
      msg.setMerge(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ic_nns_governance.pb.v1.ManageNeuron.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      base_types_pb.NeuronId.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeBytes(
      11,
      f
    );
  }
  f = message.getNeuronId();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      base_types_pb.NeuronId.serializeBinaryToWriter
    );
  }
  f = message.getConfigure();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.serializeBinaryToWriter
    );
  }
  f = message.getDisburse();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.serializeBinaryToWriter
    );
  }
  f = message.getSpawn();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ic_nns_governance.pb.v1.ManageNeuron.Spawn.serializeBinaryToWriter
    );
  }
  f = message.getFollow();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.ic_nns_governance.pb.v1.ManageNeuron.Follow.serializeBinaryToWriter
    );
  }
  f = message.getRegisterVote();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.ic_nns_governance.pb.v1.ManageNeuron.RegisterVote.serializeBinaryToWriter
    );
  }
  f = message.getMergeMaturity();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.ic_nns_governance.pb.v1.ManageNeuron.MergeMaturity.serializeBinaryToWriter
    );
  }
  f = message.getMerge();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.ic_nns_governance.pb.v1.ManageNeuron.Merge.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay.prototype.toObject = function(opt_includeInstance) {
  return proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay.toObject = function(includeInstance, msg) {
  var f, obj = {
    additionalDissolveDelaySeconds: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay;
  return proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAdditionalDissolveDelaySeconds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAdditionalDissolveDelaySeconds();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 additional_dissolve_delay_seconds = 1;
 * @return {number}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay.prototype.getAdditionalDissolveDelaySeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay.prototype.setAdditionalDissolveDelaySeconds = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving.prototype.toObject = function(opt_includeInstance) {
  return proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving;
  return proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving.prototype.toObject = function(opt_includeInstance) {
  return proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving;
  return proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey.prototype.toObject = function(opt_includeInstance) {
  return proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    newHotKey: (f = msg.getNewHotKey()) && base_types_pb.PrincipalId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey;
  return proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new base_types_pb.PrincipalId;
      reader.readMessage(value,base_types_pb.PrincipalId.deserializeBinaryFromReader);
      msg.setNewHotKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNewHotKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      base_types_pb.PrincipalId.serializeBinaryToWriter
    );
  }
};


/**
 * optional ic_base_types.pb.v1.PrincipalId new_hot_key = 1;
 * @return {?proto.ic_base_types.pb.v1.PrincipalId}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey.prototype.getNewHotKey = function() {
  return /** @type{?proto.ic_base_types.pb.v1.PrincipalId} */ (
    jspb.Message.getWrapperField(this, base_types_pb.PrincipalId, 1));
};


/**
 * @param {?proto.ic_base_types.pb.v1.PrincipalId|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey} returns this
*/
proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey.prototype.setNewHotKey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey.prototype.clearNewHotKey = function() {
  return this.setNewHotKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey.prototype.hasNewHotKey = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey.prototype.toObject = function(opt_includeInstance) {
  return proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    hotKeyToRemove: (f = msg.getHotKeyToRemove()) && base_types_pb.PrincipalId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey;
  return proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new base_types_pb.PrincipalId;
      reader.readMessage(value,base_types_pb.PrincipalId.deserializeBinaryFromReader);
      msg.setHotKeyToRemove(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHotKeyToRemove();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      base_types_pb.PrincipalId.serializeBinaryToWriter
    );
  }
};


/**
 * optional ic_base_types.pb.v1.PrincipalId hot_key_to_remove = 1;
 * @return {?proto.ic_base_types.pb.v1.PrincipalId}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey.prototype.getHotKeyToRemove = function() {
  return /** @type{?proto.ic_base_types.pb.v1.PrincipalId} */ (
    jspb.Message.getWrapperField(this, base_types_pb.PrincipalId, 1));
};


/**
 * @param {?proto.ic_base_types.pb.v1.PrincipalId|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey} returns this
*/
proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey.prototype.setHotKeyToRemove = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey.prototype.clearHotKeyToRemove = function() {
  return this.setHotKeyToRemove(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey.prototype.hasHotKeyToRemove = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.oneofGroups_ = [[1,2,3,4,5,7]];

/**
 * @enum {number}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.OperationCase = {
  OPERATION_NOT_SET: 0,
  INCREASE_DISSOLVE_DELAY: 1,
  START_DISSOLVING: 2,
  STOP_DISSOLVING: 3,
  ADD_HOT_KEY: 4,
  REMOVE_HOT_KEY: 5,
  JOIN_COMMUNITY_FUND: 7
};

/**
 * @return {proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.OperationCase}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.getOperationCase = function() {
  return /** @type {proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.OperationCase} */(jspb.Message.computeOneofCase(this, proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.toObject = function(opt_includeInstance) {
  return proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.Configure} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.toObject = function(includeInstance, msg) {
  var f, obj = {
    increaseDissolveDelay: (f = msg.getIncreaseDissolveDelay()) && proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay.toObject(includeInstance, f),
    startDissolving: (f = msg.getStartDissolving()) && proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving.toObject(includeInstance, f),
    stopDissolving: (f = msg.getStopDissolving()) && proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving.toObject(includeInstance, f),
    addHotKey: (f = msg.getAddHotKey()) && proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey.toObject(includeInstance, f),
    removeHotKey: (f = msg.getRemoveHotKey()) && proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey.toObject(includeInstance, f),
    joinCommunityFund: (f = msg.getJoinCommunityFund()) && proto.ic_nns_governance.pb.v1.ManageNeuron.JoinCommunityFund.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Configure}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ic_nns_governance.pb.v1.ManageNeuron.Configure;
  return proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.Configure} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Configure}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay;
      reader.readMessage(value,proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay.deserializeBinaryFromReader);
      msg.setIncreaseDissolveDelay(value);
      break;
    case 2:
      var value = new proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving;
      reader.readMessage(value,proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving.deserializeBinaryFromReader);
      msg.setStartDissolving(value);
      break;
    case 3:
      var value = new proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving;
      reader.readMessage(value,proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving.deserializeBinaryFromReader);
      msg.setStopDissolving(value);
      break;
    case 4:
      var value = new proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey;
      reader.readMessage(value,proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey.deserializeBinaryFromReader);
      msg.setAddHotKey(value);
      break;
    case 5:
      var value = new proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey;
      reader.readMessage(value,proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey.deserializeBinaryFromReader);
      msg.setRemoveHotKey(value);
      break;
    case 7:
      var value = new proto.ic_nns_governance.pb.v1.ManageNeuron.JoinCommunityFund;
      reader.readMessage(value,proto.ic_nns_governance.pb.v1.ManageNeuron.JoinCommunityFund.deserializeBinaryFromReader);
      msg.setJoinCommunityFund(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.Configure} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIncreaseDissolveDelay();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay.serializeBinaryToWriter
    );
  }
  f = message.getStartDissolving();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving.serializeBinaryToWriter
    );
  }
  f = message.getStopDissolving();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving.serializeBinaryToWriter
    );
  }
  f = message.getAddHotKey();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey.serializeBinaryToWriter
    );
  }
  f = message.getRemoveHotKey();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey.serializeBinaryToWriter
    );
  }
  f = message.getJoinCommunityFund();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.ic_nns_governance.pb.v1.ManageNeuron.JoinCommunityFund.serializeBinaryToWriter
    );
  }
};


/**
 * optional IncreaseDissolveDelay increase_dissolve_delay = 1;
 * @return {?proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.getIncreaseDissolveDelay = function() {
  return /** @type{?proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay} */ (
    jspb.Message.getWrapperField(this, proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay, 1));
};


/**
 * @param {?proto.ic_nns_governance.pb.v1.ManageNeuron.IncreaseDissolveDelay|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Configure} returns this
*/
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.setIncreaseDissolveDelay = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Configure} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.clearIncreaseDissolveDelay = function() {
  return this.setIncreaseDissolveDelay(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.hasIncreaseDissolveDelay = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional StartDissolving start_dissolving = 2;
 * @return {?proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.getStartDissolving = function() {
  return /** @type{?proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving} */ (
    jspb.Message.getWrapperField(this, proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving, 2));
};


/**
 * @param {?proto.ic_nns_governance.pb.v1.ManageNeuron.StartDissolving|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Configure} returns this
*/
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.setStartDissolving = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Configure} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.clearStartDissolving = function() {
  return this.setStartDissolving(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.hasStartDissolving = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional StopDissolving stop_dissolving = 3;
 * @return {?proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.getStopDissolving = function() {
  return /** @type{?proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving} */ (
    jspb.Message.getWrapperField(this, proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving, 3));
};


/**
 * @param {?proto.ic_nns_governance.pb.v1.ManageNeuron.StopDissolving|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Configure} returns this
*/
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.setStopDissolving = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Configure} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.clearStopDissolving = function() {
  return this.setStopDissolving(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.hasStopDissolving = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional AddHotKey add_hot_key = 4;
 * @return {?proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.getAddHotKey = function() {
  return /** @type{?proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey} */ (
    jspb.Message.getWrapperField(this, proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey, 4));
};


/**
 * @param {?proto.ic_nns_governance.pb.v1.ManageNeuron.AddHotKey|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Configure} returns this
*/
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.setAddHotKey = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Configure} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.clearAddHotKey = function() {
  return this.setAddHotKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.hasAddHotKey = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional RemoveHotKey remove_hot_key = 5;
 * @return {?proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.getRemoveHotKey = function() {
  return /** @type{?proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey} */ (
    jspb.Message.getWrapperField(this, proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey, 5));
};


/**
 * @param {?proto.ic_nns_governance.pb.v1.ManageNeuron.RemoveHotKey|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Configure} returns this
*/
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.setRemoveHotKey = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Configure} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.clearRemoveHotKey = function() {
  return this.setRemoveHotKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.hasRemoveHotKey = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional JoinCommunityFund join_community_fund = 7;
 * @return {?proto.ic_nns_governance.pb.v1.ManageNeuron.JoinCommunityFund}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.getJoinCommunityFund = function() {
  return /** @type{?proto.ic_nns_governance.pb.v1.ManageNeuron.JoinCommunityFund} */ (
    jspb.Message.getWrapperField(this, proto.ic_nns_governance.pb.v1.ManageNeuron.JoinCommunityFund, 7));
};


/**
 * @param {?proto.ic_nns_governance.pb.v1.ManageNeuron.JoinCommunityFund|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Configure} returns this
*/
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.setJoinCommunityFund = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Configure} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.clearJoinCommunityFund = function() {
  return this.setJoinCommunityFund(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Configure.prototype.hasJoinCommunityFund = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Spawn.prototype.toObject = function(opt_includeInstance) {
  return proto.ic_nns_governance.pb.v1.ManageNeuron.Spawn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.Spawn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Spawn.toObject = function(includeInstance, msg) {
  var f, obj = {
    newController: (f = msg.getNewController()) && base_types_pb.PrincipalId.toObject(includeInstance, f),
    nonce: jspb.Message.getFieldWithDefault(msg, 2, 0),
    percentageToSpawn: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Spawn}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Spawn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ic_nns_governance.pb.v1.ManageNeuron.Spawn;
  return proto.ic_nns_governance.pb.v1.ManageNeuron.Spawn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.Spawn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Spawn}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Spawn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new base_types_pb.PrincipalId;
      reader.readMessage(value,base_types_pb.PrincipalId.deserializeBinaryFromReader);
      msg.setNewController(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonce(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPercentageToSpawn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Spawn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ic_nns_governance.pb.v1.ManageNeuron.Spawn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.Spawn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Spawn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNewController();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      base_types_pb.PrincipalId.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional ic_base_types.pb.v1.PrincipalId new_controller = 1;
 * @return {?proto.ic_base_types.pb.v1.PrincipalId}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Spawn.prototype.getNewController = function() {
  return /** @type{?proto.ic_base_types.pb.v1.PrincipalId} */ (
    jspb.Message.getWrapperField(this, base_types_pb.PrincipalId, 1));
};


/**
 * @param {?proto.ic_base_types.pb.v1.PrincipalId|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Spawn} returns this
*/
proto.ic_nns_governance.pb.v1.ManageNeuron.Spawn.prototype.setNewController = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Spawn} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Spawn.prototype.clearNewController = function() {
  return this.setNewController(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Spawn.prototype.hasNewController = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 nonce = 2;
 * @return {number}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Spawn.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Spawn} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Spawn.prototype.setNonce = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Spawn} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Spawn.prototype.clearNonce = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Spawn.prototype.hasNonce = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 percentage_to_spawn = 3;
 * @return {number}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Spawn.prototype.getPercentageToSpawn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Spawn} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Spawn.prototype.setPercentageToSpawn = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Spawn} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Spawn.prototype.clearPercentageToSpawn = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Spawn.prototype.hasPercentageToSpawn = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.prototype.toObject = function(opt_includeInstance) {
  return proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: (f = msg.getAmount()) && proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.Amount.toObject(includeInstance, f),
    toAccount: (f = msg.getToAccount()) && ledger_pb.AccountIdentifier.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse;
  return proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.Amount;
      reader.readMessage(value,proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.Amount.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 2:
      var value = new ledger_pb.AccountIdentifier;
      reader.readMessage(value,ledger_pb.AccountIdentifier.deserializeBinaryFromReader);
      msg.setToAccount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.Amount.serializeBinaryToWriter
    );
  }
  f = message.getToAccount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      ledger_pb.AccountIdentifier.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.Amount.prototype.toObject = function(opt_includeInstance) {
  return proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.Amount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.Amount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.Amount.toObject = function(includeInstance, msg) {
  var f, obj = {
    e8s: jspb.Message.getFieldWithDefault(msg, 1, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.Amount}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.Amount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.Amount;
  return proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.Amount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.Amount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.Amount}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.Amount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setE8s(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.Amount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.Amount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.Amount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.Amount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getE8s();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
};


/**
 * optional uint64 e8s = 1;
 * @return {string}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.Amount.prototype.getE8s = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.Amount} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.Amount.prototype.setE8s = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional Amount amount = 1;
 * @return {?proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.Amount}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.prototype.getAmount = function() {
  return /** @type{?proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.Amount} */ (
    jspb.Message.getWrapperField(this, proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.Amount, 1));
};


/**
 * @param {?proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.Amount|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse} returns this
*/
proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.prototype.setAmount = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.prototype.clearAmount = function() {
  return this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ic_ledger.pb.v1.AccountIdentifier to_account = 2;
 * @return {?proto.ic_ledger.pb.v1.AccountIdentifier}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.prototype.getToAccount = function() {
  return /** @type{?proto.ic_ledger.pb.v1.AccountIdentifier} */ (
    jspb.Message.getWrapperField(this, ledger_pb.AccountIdentifier, 2));
};


/**
 * @param {?proto.ic_ledger.pb.v1.AccountIdentifier|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse} returns this
*/
proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.prototype.setToAccount = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.prototype.clearToAccount = function() {
  return this.setToAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse.prototype.hasToAccount = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Follow.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Follow.prototype.toObject = function(opt_includeInstance) {
  return proto.ic_nns_governance.pb.v1.ManageNeuron.Follow.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.Follow} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Follow.toObject = function(includeInstance, msg) {
  var f, obj = {
    topic: jspb.Message.getFieldWithDefault(msg, 1, 0),
    followeesList: jspb.Message.toObjectList(msg.getFolloweesList(),
    base_types_pb.NeuronId.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Follow}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Follow.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ic_nns_governance.pb.v1.ManageNeuron.Follow;
  return proto.ic_nns_governance.pb.v1.ManageNeuron.Follow.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.Follow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Follow}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Follow.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ic_nns_governance.pb.v1.Topic} */ (reader.readEnum());
      msg.setTopic(value);
      break;
    case 2:
      var value = new base_types_pb.NeuronId;
      reader.readMessage(value,base_types_pb.NeuronId.deserializeBinaryFromReader);
      msg.addFollowees(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Follow.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ic_nns_governance.pb.v1.ManageNeuron.Follow.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.Follow} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Follow.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopic();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getFolloweesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      base_types_pb.NeuronId.serializeBinaryToWriter
    );
  }
};


/**
 * optional Topic topic = 1;
 * @return {!proto.ic_nns_governance.pb.v1.Topic}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Follow.prototype.getTopic = function() {
  return /** @type {!proto.ic_nns_governance.pb.v1.Topic} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ic_nns_governance.pb.v1.Topic} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Follow} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Follow.prototype.setTopic = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated ic_base_types.pb.v1.NeuronId followees = 2;
 * @return {!Array<!proto.ic_base_types.pb.v1.NeuronId>}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Follow.prototype.getFolloweesList = function() {
  return /** @type{!Array<!proto.ic_base_types.pb.v1.NeuronId>} */ (
    jspb.Message.getRepeatedWrapperField(this, base_types_pb.NeuronId, 2));
};


/**
 * @param {!Array<!proto.ic_base_types.pb.v1.NeuronId>} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Follow} returns this
*/
proto.ic_nns_governance.pb.v1.ManageNeuron.Follow.prototype.setFolloweesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.ic_base_types.pb.v1.NeuronId=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ic_base_types.pb.v1.NeuronId}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Follow.prototype.addFollowees = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ic_base_types.pb.v1.NeuronId, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Follow} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Follow.prototype.clearFolloweesList = function() {
  return this.setFolloweesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.RegisterVote.prototype.toObject = function(opt_includeInstance) {
  return proto.ic_nns_governance.pb.v1.ManageNeuron.RegisterVote.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.RegisterVote} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.RegisterVote.toObject = function(includeInstance, msg) {
  var f, obj = {
    proposal: (f = msg.getProposal()) && base_types_pb.ProposalId.toObject(includeInstance, f),
    vote: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.RegisterVote}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.RegisterVote.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ic_nns_governance.pb.v1.ManageNeuron.RegisterVote;
  return proto.ic_nns_governance.pb.v1.ManageNeuron.RegisterVote.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.RegisterVote} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.RegisterVote}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.RegisterVote.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new base_types_pb.ProposalId;
      reader.readMessage(value,base_types_pb.ProposalId.deserializeBinaryFromReader);
      msg.setProposal(value);
      break;
    case 2:
      var value = /** @type {!proto.ic_nns_governance.pb.v1.Vote} */ (reader.readEnum());
      msg.setVote(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.RegisterVote.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ic_nns_governance.pb.v1.ManageNeuron.RegisterVote.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.RegisterVote} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.RegisterVote.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProposal();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      base_types_pb.ProposalId.serializeBinaryToWriter
    );
  }
  f = message.getVote();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional ic_base_types.pb.v1.ProposalId proposal = 1;
 * @return {?proto.ic_base_types.pb.v1.ProposalId}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.RegisterVote.prototype.getProposal = function() {
  return /** @type{?proto.ic_base_types.pb.v1.ProposalId} */ (
    jspb.Message.getWrapperField(this, base_types_pb.ProposalId, 1));
};


/**
 * @param {?proto.ic_base_types.pb.v1.ProposalId|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.RegisterVote} returns this
*/
proto.ic_nns_governance.pb.v1.ManageNeuron.RegisterVote.prototype.setProposal = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.RegisterVote} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.RegisterVote.prototype.clearProposal = function() {
  return this.setProposal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.RegisterVote.prototype.hasProposal = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Vote vote = 2;
 * @return {!proto.ic_nns_governance.pb.v1.Vote}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.RegisterVote.prototype.getVote = function() {
  return /** @type {!proto.ic_nns_governance.pb.v1.Vote} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.ic_nns_governance.pb.v1.Vote} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.RegisterVote} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.RegisterVote.prototype.setVote = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Merge.prototype.toObject = function(opt_includeInstance) {
  return proto.ic_nns_governance.pb.v1.ManageNeuron.Merge.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.Merge} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Merge.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourceNeuronId: (f = msg.getSourceNeuronId()) && base_types_pb.NeuronId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Merge}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Merge.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ic_nns_governance.pb.v1.ManageNeuron.Merge;
  return proto.ic_nns_governance.pb.v1.ManageNeuron.Merge.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.Merge} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Merge}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Merge.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new base_types_pb.NeuronId;
      reader.readMessage(value,base_types_pb.NeuronId.deserializeBinaryFromReader);
      msg.setSourceNeuronId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Merge.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ic_nns_governance.pb.v1.ManageNeuron.Merge.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.Merge} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Merge.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourceNeuronId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      base_types_pb.NeuronId.serializeBinaryToWriter
    );
  }
};


/**
 * optional ic_base_types.pb.v1.NeuronId source_neuron_id = 1;
 * @return {?proto.ic_base_types.pb.v1.NeuronId}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Merge.prototype.getSourceNeuronId = function() {
  return /** @type{?proto.ic_base_types.pb.v1.NeuronId} */ (
    jspb.Message.getWrapperField(this, base_types_pb.NeuronId, 1));
};


/**
 * @param {?proto.ic_base_types.pb.v1.NeuronId|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Merge} returns this
*/
proto.ic_nns_governance.pb.v1.ManageNeuron.Merge.prototype.setSourceNeuronId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.Merge} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Merge.prototype.clearSourceNeuronId = function() {
  return this.setSourceNeuronId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.Merge.prototype.hasSourceNeuronId = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.MergeMaturity.prototype.toObject = function(opt_includeInstance) {
  return proto.ic_nns_governance.pb.v1.ManageNeuron.MergeMaturity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.MergeMaturity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.MergeMaturity.toObject = function(includeInstance, msg) {
  var f, obj = {
    percentageToMerge: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.MergeMaturity}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.MergeMaturity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ic_nns_governance.pb.v1.ManageNeuron.MergeMaturity;
  return proto.ic_nns_governance.pb.v1.ManageNeuron.MergeMaturity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.MergeMaturity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.MergeMaturity}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.MergeMaturity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPercentageToMerge(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.MergeMaturity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ic_nns_governance.pb.v1.ManageNeuron.MergeMaturity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.MergeMaturity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.MergeMaturity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPercentageToMerge();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 percentage_to_merge = 1;
 * @return {number}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.MergeMaturity.prototype.getPercentageToMerge = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.MergeMaturity} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.MergeMaturity.prototype.setPercentageToMerge = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.JoinCommunityFund.prototype.toObject = function(opt_includeInstance) {
  return proto.ic_nns_governance.pb.v1.ManageNeuron.JoinCommunityFund.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.JoinCommunityFund} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.JoinCommunityFund.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.JoinCommunityFund}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.JoinCommunityFund.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ic_nns_governance.pb.v1.ManageNeuron.JoinCommunityFund;
  return proto.ic_nns_governance.pb.v1.ManageNeuron.JoinCommunityFund.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.JoinCommunityFund} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron.JoinCommunityFund}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.JoinCommunityFund.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.JoinCommunityFund.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ic_nns_governance.pb.v1.ManageNeuron.JoinCommunityFund.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuron.JoinCommunityFund} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.JoinCommunityFund.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * optional ic_base_types.pb.v1.NeuronId id = 1;
 * @return {?proto.ic_base_types.pb.v1.NeuronId}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.getId = function() {
  return /** @type{?proto.ic_base_types.pb.v1.NeuronId} */ (
    jspb.Message.getWrapperField(this, base_types_pb.NeuronId, 1));
};


/**
 * @param {?proto.ic_base_types.pb.v1.NeuronId|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron} returns this
*/
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes subaccount = 11;
 * @return {!(string|Uint8Array)}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.getSubaccount = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes subaccount = 11;
 * This is a type-conversion wrapper around `getSubaccount()`
 * @return {string}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.getSubaccount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSubaccount()));
};


/**
 * optional bytes subaccount = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSubaccount()`
 * @return {!Uint8Array}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.getSubaccount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSubaccount()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.setSubaccount = function(value) {
  return jspb.Message.setOneofField(this, 11, proto.ic_nns_governance.pb.v1.ManageNeuron.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.clearSubaccount = function() {
  return jspb.Message.setOneofField(this, 11, proto.ic_nns_governance.pb.v1.ManageNeuron.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.hasSubaccount = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional ic_base_types.pb.v1.NeuronId neuron_id = 12;
 * @return {?proto.ic_base_types.pb.v1.NeuronId}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.getNeuronId = function() {
  return /** @type{?proto.ic_base_types.pb.v1.NeuronId} */ (
    jspb.Message.getWrapperField(this, base_types_pb.NeuronId, 12));
};


/**
 * @param {?proto.ic_base_types.pb.v1.NeuronId|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron} returns this
*/
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.setNeuronId = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.ic_nns_governance.pb.v1.ManageNeuron.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.clearNeuronId = function() {
  return this.setNeuronId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.hasNeuronId = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional Configure configure = 2;
 * @return {?proto.ic_nns_governance.pb.v1.ManageNeuron.Configure}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.getConfigure = function() {
  return /** @type{?proto.ic_nns_governance.pb.v1.ManageNeuron.Configure} */ (
    jspb.Message.getWrapperField(this, proto.ic_nns_governance.pb.v1.ManageNeuron.Configure, 2));
};


/**
 * @param {?proto.ic_nns_governance.pb.v1.ManageNeuron.Configure|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron} returns this
*/
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.setConfigure = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.ic_nns_governance.pb.v1.ManageNeuron.oneofGroups_[1], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.clearConfigure = function() {
  return this.setConfigure(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.hasConfigure = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Disburse disburse = 3;
 * @return {?proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.getDisburse = function() {
  return /** @type{?proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse} */ (
    jspb.Message.getWrapperField(this, proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse, 3));
};


/**
 * @param {?proto.ic_nns_governance.pb.v1.ManageNeuron.Disburse|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron} returns this
*/
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.setDisburse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.ic_nns_governance.pb.v1.ManageNeuron.oneofGroups_[1], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.clearDisburse = function() {
  return this.setDisburse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.hasDisburse = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Spawn spawn = 4;
 * @return {?proto.ic_nns_governance.pb.v1.ManageNeuron.Spawn}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.getSpawn = function() {
  return /** @type{?proto.ic_nns_governance.pb.v1.ManageNeuron.Spawn} */ (
    jspb.Message.getWrapperField(this, proto.ic_nns_governance.pb.v1.ManageNeuron.Spawn, 4));
};


/**
 * @param {?proto.ic_nns_governance.pb.v1.ManageNeuron.Spawn|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron} returns this
*/
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.setSpawn = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.ic_nns_governance.pb.v1.ManageNeuron.oneofGroups_[1], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.clearSpawn = function() {
  return this.setSpawn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.hasSpawn = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Follow follow = 5;
 * @return {?proto.ic_nns_governance.pb.v1.ManageNeuron.Follow}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.getFollow = function() {
  return /** @type{?proto.ic_nns_governance.pb.v1.ManageNeuron.Follow} */ (
    jspb.Message.getWrapperField(this, proto.ic_nns_governance.pb.v1.ManageNeuron.Follow, 5));
};


/**
 * @param {?proto.ic_nns_governance.pb.v1.ManageNeuron.Follow|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron} returns this
*/
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.setFollow = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.ic_nns_governance.pb.v1.ManageNeuron.oneofGroups_[1], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.clearFollow = function() {
  return this.setFollow(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.hasFollow = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional RegisterVote register_vote = 7;
 * @return {?proto.ic_nns_governance.pb.v1.ManageNeuron.RegisterVote}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.getRegisterVote = function() {
  return /** @type{?proto.ic_nns_governance.pb.v1.ManageNeuron.RegisterVote} */ (
    jspb.Message.getWrapperField(this, proto.ic_nns_governance.pb.v1.ManageNeuron.RegisterVote, 7));
};


/**
 * @param {?proto.ic_nns_governance.pb.v1.ManageNeuron.RegisterVote|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron} returns this
*/
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.setRegisterVote = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.ic_nns_governance.pb.v1.ManageNeuron.oneofGroups_[1], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.clearRegisterVote = function() {
  return this.setRegisterVote(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.hasRegisterVote = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional MergeMaturity merge_maturity = 13;
 * @return {?proto.ic_nns_governance.pb.v1.ManageNeuron.MergeMaturity}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.getMergeMaturity = function() {
  return /** @type{?proto.ic_nns_governance.pb.v1.ManageNeuron.MergeMaturity} */ (
    jspb.Message.getWrapperField(this, proto.ic_nns_governance.pb.v1.ManageNeuron.MergeMaturity, 13));
};


/**
 * @param {?proto.ic_nns_governance.pb.v1.ManageNeuron.MergeMaturity|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron} returns this
*/
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.setMergeMaturity = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.ic_nns_governance.pb.v1.ManageNeuron.oneofGroups_[1], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.clearMergeMaturity = function() {
  return this.setMergeMaturity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.hasMergeMaturity = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional Merge merge = 14;
 * @return {?proto.ic_nns_governance.pb.v1.ManageNeuron.Merge}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.getMerge = function() {
  return /** @type{?proto.ic_nns_governance.pb.v1.ManageNeuron.Merge} */ (
    jspb.Message.getWrapperField(this, proto.ic_nns_governance.pb.v1.ManageNeuron.Merge, 14));
};


/**
 * @param {?proto.ic_nns_governance.pb.v1.ManageNeuron.Merge|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron} returns this
*/
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.setMerge = function(value) {
  return jspb.Message.setOneofWrapperField(this, 14, proto.ic_nns_governance.pb.v1.ManageNeuron.oneofGroups_[1], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuron} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.clearMerge = function() {
  return this.setMerge(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ManageNeuron.prototype.hasMerge = function() {
  return jspb.Message.getField(this, 14) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.oneofGroups_ = [[1,2,3,4,5,7,11,12]];

/**
 * @enum {number}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.CommandCase = {
  COMMAND_NOT_SET: 0,
  ERROR: 1,
  CONFIGURE: 2,
  DISBURSE: 3,
  SPAWN: 4,
  FOLLOW: 5,
  REGISTER_VOTE: 7,
  MERGE_MATURITY: 11,
  MERGE: 12
};

/**
 * @return {proto.ic_nns_governance.pb.v1.ManageNeuronResponse.CommandCase}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.prototype.getCommandCase = function() {
  return /** @type {proto.ic_nns_governance.pb.v1.ManageNeuronResponse.CommandCase} */(jspb.Message.computeOneofCase(this, proto.ic_nns_governance.pb.v1.ManageNeuronResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ic_nns_governance.pb.v1.ManageNeuronResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.ic_nns_governance.pb.v1.GovernanceError.toObject(includeInstance, f),
    configure: (f = msg.getConfigure()) && proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse.toObject(includeInstance, f),
    disburse: (f = msg.getDisburse()) && proto.ic_nns_governance.pb.v1.ManageNeuronResponse.DisburseResponse.toObject(includeInstance, f),
    spawn: (f = msg.getSpawn()) && proto.ic_nns_governance.pb.v1.ManageNeuronResponse.SpawnResponse.toObject(includeInstance, f),
    follow: (f = msg.getFollow()) && proto.ic_nns_governance.pb.v1.ManageNeuronResponse.FollowResponse.toObject(includeInstance, f),
    registerVote: (f = msg.getRegisterVote()) && proto.ic_nns_governance.pb.v1.ManageNeuronResponse.RegisterVoteResponse.toObject(includeInstance, f),
    mergeMaturity: (f = msg.getMergeMaturity()) && proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeMaturityResponse.toObject(includeInstance, f),
    merge: (f = msg.getMerge()) && proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ic_nns_governance.pb.v1.ManageNeuronResponse;
  return proto.ic_nns_governance.pb.v1.ManageNeuronResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ic_nns_governance.pb.v1.GovernanceError;
      reader.readMessage(value,proto.ic_nns_governance.pb.v1.GovernanceError.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse;
      reader.readMessage(value,proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse.deserializeBinaryFromReader);
      msg.setConfigure(value);
      break;
    case 3:
      var value = new proto.ic_nns_governance.pb.v1.ManageNeuronResponse.DisburseResponse;
      reader.readMessage(value,proto.ic_nns_governance.pb.v1.ManageNeuronResponse.DisburseResponse.deserializeBinaryFromReader);
      msg.setDisburse(value);
      break;
    case 4:
      var value = new proto.ic_nns_governance.pb.v1.ManageNeuronResponse.SpawnResponse;
      reader.readMessage(value,proto.ic_nns_governance.pb.v1.ManageNeuronResponse.SpawnResponse.deserializeBinaryFromReader);
      msg.setSpawn(value);
      break;
    case 5:
      var value = new proto.ic_nns_governance.pb.v1.ManageNeuronResponse.FollowResponse;
      reader.readMessage(value,proto.ic_nns_governance.pb.v1.ManageNeuronResponse.FollowResponse.deserializeBinaryFromReader);
      msg.setFollow(value);
      break;
    case 7:
      var value = new proto.ic_nns_governance.pb.v1.ManageNeuronResponse.RegisterVoteResponse;
      reader.readMessage(value,proto.ic_nns_governance.pb.v1.ManageNeuronResponse.RegisterVoteResponse.deserializeBinaryFromReader);
      msg.setRegisterVote(value);
      break;
    case 11:
      var value = new proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeMaturityResponse;
      reader.readMessage(value,proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeMaturityResponse.deserializeBinaryFromReader);
      msg.setMergeMaturity(value);
      break;
    case 12:
      var value = new proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeResponse;
      reader.readMessage(value,proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeResponse.deserializeBinaryFromReader);
      msg.setMerge(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ic_nns_governance.pb.v1.ManageNeuronResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ic_nns_governance.pb.v1.GovernanceError.serializeBinaryToWriter
    );
  }
  f = message.getConfigure();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse.serializeBinaryToWriter
    );
  }
  f = message.getDisburse();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ic_nns_governance.pb.v1.ManageNeuronResponse.DisburseResponse.serializeBinaryToWriter
    );
  }
  f = message.getSpawn();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ic_nns_governance.pb.v1.ManageNeuronResponse.SpawnResponse.serializeBinaryToWriter
    );
  }
  f = message.getFollow();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.ic_nns_governance.pb.v1.ManageNeuronResponse.FollowResponse.serializeBinaryToWriter
    );
  }
  f = message.getRegisterVote();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.ic_nns_governance.pb.v1.ManageNeuronResponse.RegisterVoteResponse.serializeBinaryToWriter
    );
  }
  f = message.getMergeMaturity();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeMaturityResponse.serializeBinaryToWriter
    );
  }
  f = message.getMerge();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeResponse.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse;
  return proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.DisburseResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ic_nns_governance.pb.v1.ManageNeuronResponse.DisburseResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse.DisburseResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.DisburseResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    transferBlockHeight: jspb.Message.getFieldWithDefault(msg, 1, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse.DisburseResponse}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.DisburseResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ic_nns_governance.pb.v1.ManageNeuronResponse.DisburseResponse;
  return proto.ic_nns_governance.pb.v1.ManageNeuronResponse.DisburseResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse.DisburseResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse.DisburseResponse}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.DisburseResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setTransferBlockHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.DisburseResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ic_nns_governance.pb.v1.ManageNeuronResponse.DisburseResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse.DisburseResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.DisburseResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransferBlockHeight();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
};


/**
 * optional uint64 transfer_block_height = 1;
 * @return {string}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.DisburseResponse.prototype.getTransferBlockHeight = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse.DisburseResponse} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.DisburseResponse.prototype.setTransferBlockHeight = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.SpawnResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ic_nns_governance.pb.v1.ManageNeuronResponse.SpawnResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse.SpawnResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.SpawnResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    createdNeuronId: (f = msg.getCreatedNeuronId()) && base_types_pb.NeuronId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse.SpawnResponse}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.SpawnResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ic_nns_governance.pb.v1.ManageNeuronResponse.SpawnResponse;
  return proto.ic_nns_governance.pb.v1.ManageNeuronResponse.SpawnResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse.SpawnResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse.SpawnResponse}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.SpawnResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new base_types_pb.NeuronId;
      reader.readMessage(value,base_types_pb.NeuronId.deserializeBinaryFromReader);
      msg.setCreatedNeuronId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.SpawnResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ic_nns_governance.pb.v1.ManageNeuronResponse.SpawnResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse.SpawnResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.SpawnResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreatedNeuronId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      base_types_pb.NeuronId.serializeBinaryToWriter
    );
  }
};


/**
 * optional ic_base_types.pb.v1.NeuronId created_neuron_id = 1;
 * @return {?proto.ic_base_types.pb.v1.NeuronId}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.SpawnResponse.prototype.getCreatedNeuronId = function() {
  return /** @type{?proto.ic_base_types.pb.v1.NeuronId} */ (
    jspb.Message.getWrapperField(this, base_types_pb.NeuronId, 1));
};


/**
 * @param {?proto.ic_base_types.pb.v1.NeuronId|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse.SpawnResponse} returns this
*/
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.SpawnResponse.prototype.setCreatedNeuronId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse.SpawnResponse} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.SpawnResponse.prototype.clearCreatedNeuronId = function() {
  return this.setCreatedNeuronId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.SpawnResponse.prototype.hasCreatedNeuronId = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeMaturityResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeMaturityResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeMaturityResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeMaturityResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    mergedMaturityE8s: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    newStakeE8s: jspb.Message.getFieldWithDefault(msg, 2, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeMaturityResponse}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeMaturityResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeMaturityResponse;
  return proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeMaturityResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeMaturityResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeMaturityResponse}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeMaturityResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setMergedMaturityE8s(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setNewStakeE8s(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeMaturityResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeMaturityResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeMaturityResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeMaturityResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMergedMaturityE8s();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = message.getNewStakeE8s();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      2,
      f
    );
  }
};


/**
 * optional uint64 merged_maturity_e8s = 1;
 * @return {string}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeMaturityResponse.prototype.getMergedMaturityE8s = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeMaturityResponse} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeMaturityResponse.prototype.setMergedMaturityE8s = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional uint64 new_stake_e8s = 2;
 * @return {string}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeMaturityResponse.prototype.getNewStakeE8s = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeMaturityResponse} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeMaturityResponse.prototype.setNewStakeE8s = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.FollowResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ic_nns_governance.pb.v1.ManageNeuronResponse.FollowResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse.FollowResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.FollowResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse.FollowResponse}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.FollowResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ic_nns_governance.pb.v1.ManageNeuronResponse.FollowResponse;
  return proto.ic_nns_governance.pb.v1.ManageNeuronResponse.FollowResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse.FollowResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse.FollowResponse}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.FollowResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.FollowResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ic_nns_governance.pb.v1.ManageNeuronResponse.FollowResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse.FollowResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.FollowResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.RegisterVoteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ic_nns_governance.pb.v1.ManageNeuronResponse.RegisterVoteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse.RegisterVoteResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.RegisterVoteResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse.RegisterVoteResponse}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.RegisterVoteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ic_nns_governance.pb.v1.ManageNeuronResponse.RegisterVoteResponse;
  return proto.ic_nns_governance.pb.v1.ManageNeuronResponse.RegisterVoteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse.RegisterVoteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse.RegisterVoteResponse}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.RegisterVoteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.RegisterVoteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ic_nns_governance.pb.v1.ManageNeuronResponse.RegisterVoteResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse.RegisterVoteResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.RegisterVoteResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeResponse}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeResponse;
  return proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeResponse}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * optional GovernanceError error = 1;
 * @return {?proto.ic_nns_governance.pb.v1.GovernanceError}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.prototype.getError = function() {
  return /** @type{?proto.ic_nns_governance.pb.v1.GovernanceError} */ (
    jspb.Message.getWrapperField(this, proto.ic_nns_governance.pb.v1.GovernanceError, 1));
};


/**
 * @param {?proto.ic_nns_governance.pb.v1.GovernanceError|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse} returns this
*/
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.ic_nns_governance.pb.v1.ManageNeuronResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ConfigureResponse configure = 2;
 * @return {?proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.prototype.getConfigure = function() {
  return /** @type{?proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse} */ (
    jspb.Message.getWrapperField(this, proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse, 2));
};


/**
 * @param {?proto.ic_nns_governance.pb.v1.ManageNeuronResponse.ConfigureResponse|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse} returns this
*/
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.prototype.setConfigure = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.ic_nns_governance.pb.v1.ManageNeuronResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.prototype.clearConfigure = function() {
  return this.setConfigure(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.prototype.hasConfigure = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional DisburseResponse disburse = 3;
 * @return {?proto.ic_nns_governance.pb.v1.ManageNeuronResponse.DisburseResponse}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.prototype.getDisburse = function() {
  return /** @type{?proto.ic_nns_governance.pb.v1.ManageNeuronResponse.DisburseResponse} */ (
    jspb.Message.getWrapperField(this, proto.ic_nns_governance.pb.v1.ManageNeuronResponse.DisburseResponse, 3));
};


/**
 * @param {?proto.ic_nns_governance.pb.v1.ManageNeuronResponse.DisburseResponse|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse} returns this
*/
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.prototype.setDisburse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.ic_nns_governance.pb.v1.ManageNeuronResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.prototype.clearDisburse = function() {
  return this.setDisburse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.prototype.hasDisburse = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SpawnResponse spawn = 4;
 * @return {?proto.ic_nns_governance.pb.v1.ManageNeuronResponse.SpawnResponse}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.prototype.getSpawn = function() {
  return /** @type{?proto.ic_nns_governance.pb.v1.ManageNeuronResponse.SpawnResponse} */ (
    jspb.Message.getWrapperField(this, proto.ic_nns_governance.pb.v1.ManageNeuronResponse.SpawnResponse, 4));
};


/**
 * @param {?proto.ic_nns_governance.pb.v1.ManageNeuronResponse.SpawnResponse|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse} returns this
*/
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.prototype.setSpawn = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.ic_nns_governance.pb.v1.ManageNeuronResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.prototype.clearSpawn = function() {
  return this.setSpawn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.prototype.hasSpawn = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional FollowResponse follow = 5;
 * @return {?proto.ic_nns_governance.pb.v1.ManageNeuronResponse.FollowResponse}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.prototype.getFollow = function() {
  return /** @type{?proto.ic_nns_governance.pb.v1.ManageNeuronResponse.FollowResponse} */ (
    jspb.Message.getWrapperField(this, proto.ic_nns_governance.pb.v1.ManageNeuronResponse.FollowResponse, 5));
};


/**
 * @param {?proto.ic_nns_governance.pb.v1.ManageNeuronResponse.FollowResponse|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse} returns this
*/
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.prototype.setFollow = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.ic_nns_governance.pb.v1.ManageNeuronResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.prototype.clearFollow = function() {
  return this.setFollow(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.prototype.hasFollow = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional RegisterVoteResponse register_vote = 7;
 * @return {?proto.ic_nns_governance.pb.v1.ManageNeuronResponse.RegisterVoteResponse}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.prototype.getRegisterVote = function() {
  return /** @type{?proto.ic_nns_governance.pb.v1.ManageNeuronResponse.RegisterVoteResponse} */ (
    jspb.Message.getWrapperField(this, proto.ic_nns_governance.pb.v1.ManageNeuronResponse.RegisterVoteResponse, 7));
};


/**
 * @param {?proto.ic_nns_governance.pb.v1.ManageNeuronResponse.RegisterVoteResponse|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse} returns this
*/
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.prototype.setRegisterVote = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.ic_nns_governance.pb.v1.ManageNeuronResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.prototype.clearRegisterVote = function() {
  return this.setRegisterVote(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.prototype.hasRegisterVote = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional MergeMaturityResponse merge_maturity = 11;
 * @return {?proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeMaturityResponse}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.prototype.getMergeMaturity = function() {
  return /** @type{?proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeMaturityResponse} */ (
    jspb.Message.getWrapperField(this, proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeMaturityResponse, 11));
};


/**
 * @param {?proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeMaturityResponse|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse} returns this
*/
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.prototype.setMergeMaturity = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.ic_nns_governance.pb.v1.ManageNeuronResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.prototype.clearMergeMaturity = function() {
  return this.setMergeMaturity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.prototype.hasMergeMaturity = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional MergeResponse merge = 12;
 * @return {?proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeResponse}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.prototype.getMerge = function() {
  return /** @type{?proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeResponse} */ (
    jspb.Message.getWrapperField(this, proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeResponse, 12));
};


/**
 * @param {?proto.ic_nns_governance.pb.v1.ManageNeuronResponse.MergeResponse|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse} returns this
*/
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.prototype.setMerge = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.ic_nns_governance.pb.v1.ManageNeuronResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.ManageNeuronResponse} returns this
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.prototype.clearMerge = function() {
  return this.setMerge(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ManageNeuronResponse.prototype.hasMerge = function() {
  return jspb.Message.getField(this, 12) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ic_nns_governance.pb.v1.GovernanceError.prototype.toObject = function(opt_includeInstance) {
  return proto.ic_nns_governance.pb.v1.GovernanceError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ic_nns_governance.pb.v1.GovernanceError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.GovernanceError.toObject = function(includeInstance, msg) {
  var f, obj = {
    errorType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    errorMessage: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ic_nns_governance.pb.v1.GovernanceError}
 */
proto.ic_nns_governance.pb.v1.GovernanceError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ic_nns_governance.pb.v1.GovernanceError;
  return proto.ic_nns_governance.pb.v1.GovernanceError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ic_nns_governance.pb.v1.GovernanceError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ic_nns_governance.pb.v1.GovernanceError}
 */
proto.ic_nns_governance.pb.v1.GovernanceError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ic_nns_governance.pb.v1.GovernanceError.ErrorType} */ (reader.readEnum());
      msg.setErrorType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ic_nns_governance.pb.v1.GovernanceError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ic_nns_governance.pb.v1.GovernanceError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ic_nns_governance.pb.v1.GovernanceError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.GovernanceError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrorType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.ic_nns_governance.pb.v1.GovernanceError.ErrorType = {
  ERROR_TYPE_UNSPECIFIED: 0,
  ERROR_TYPE_OK: 1,
  ERROR_TYPE_UNAVAILABLE: 2,
  ERROR_TYPE_NOT_AUTHORIZED: 3,
  ERROR_TYPE_NOT_FOUND: 4,
  ERROR_TYPE_INVALID_COMMAND: 5,
  ERROR_TYPE_REQUIRES_NOT_DISSOLVING: 6,
  ERROR_TYPE_REQUIRES_DISSOLVING: 7,
  ERROR_TYPE_REQUIRES_DISSOLVED: 8,
  ERROR_TYPE_HOT_KEY: 9,
  ERROR_TYPE_RESOURCE_EXHAUSTED: 10,
  ERROR_TYPE_PRECONDITION_FAILED: 11,
  ERROR_TYPE_EXTERNAL: 12,
  ERROR_TYPE_LEDGER_UPDATE_ONGOING: 13,
  ERROR_TYPE_INSUFFICIENT_FUNDS: 14,
  ERROR_TYPE_INVALID_PRINCIPAL: 15,
  ERROR_TYPE_INVALID_PROPOSAL: 16,
  ERROR_TYPE_ALREADY_JOINED_COMMUNITY_FUND: 17
};

/**
 * optional ErrorType error_type = 1;
 * @return {!proto.ic_nns_governance.pb.v1.GovernanceError.ErrorType}
 */
proto.ic_nns_governance.pb.v1.GovernanceError.prototype.getErrorType = function() {
  return /** @type {!proto.ic_nns_governance.pb.v1.GovernanceError.ErrorType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ic_nns_governance.pb.v1.GovernanceError.ErrorType} value
 * @return {!proto.ic_nns_governance.pb.v1.GovernanceError} returns this
 */
proto.ic_nns_governance.pb.v1.GovernanceError.prototype.setErrorType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string error_message = 2;
 * @return {string}
 */
proto.ic_nns_governance.pb.v1.GovernanceError.prototype.getErrorMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ic_nns_governance.pb.v1.GovernanceError} returns this
 */
proto.ic_nns_governance.pb.v1.GovernanceError.prototype.setErrorMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ic_nns_governance.pb.v1.ListNeurons.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ic_nns_governance.pb.v1.ListNeurons.prototype.toObject = function(opt_includeInstance) {
  return proto.ic_nns_governance.pb.v1.ListNeurons.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ic_nns_governance.pb.v1.ListNeurons} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ListNeurons.toObject = function(includeInstance, msg) {
  var f, obj = {
    neuronIdsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    includeNeuronsReadableByCaller: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ic_nns_governance.pb.v1.ListNeurons}
 */
proto.ic_nns_governance.pb.v1.ListNeurons.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ic_nns_governance.pb.v1.ListNeurons;
  return proto.ic_nns_governance.pb.v1.ListNeurons.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ic_nns_governance.pb.v1.ListNeurons} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ic_nns_governance.pb.v1.ListNeurons}
 */
proto.ic_nns_governance.pb.v1.ListNeurons.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<string>} */ (reader.isDelimited() ? reader.readPackedFixed64String() : [reader.readFixed64String()]);
      for (var i = 0; i < values.length; i++) {
        msg.addNeuronIds(values[i]);
      }
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludeNeuronsReadableByCaller(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ic_nns_governance.pb.v1.ListNeurons.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ic_nns_governance.pb.v1.ListNeurons.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ic_nns_governance.pb.v1.ListNeurons} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ListNeurons.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNeuronIdsList();
  if (f.length > 0) {
    writer.writePackedFixed64String(
      1,
      f
    );
  }
  f = message.getIncludeNeuronsReadableByCaller();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * repeated fixed64 neuron_ids = 1;
 * @return {!Array<string>}
 */
proto.ic_nns_governance.pb.v1.ListNeurons.prototype.getNeuronIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ic_nns_governance.pb.v1.ListNeurons} returns this
 */
proto.ic_nns_governance.pb.v1.ListNeurons.prototype.setNeuronIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ic_nns_governance.pb.v1.ListNeurons} returns this
 */
proto.ic_nns_governance.pb.v1.ListNeurons.prototype.addNeuronIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ic_nns_governance.pb.v1.ListNeurons} returns this
 */
proto.ic_nns_governance.pb.v1.ListNeurons.prototype.clearNeuronIdsList = function() {
  return this.setNeuronIdsList([]);
};


/**
 * optional bool include_neurons_readable_by_caller = 2;
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ListNeurons.prototype.getIncludeNeuronsReadableByCaller = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ic_nns_governance.pb.v1.ListNeurons} returns this
 */
proto.ic_nns_governance.pb.v1.ListNeurons.prototype.setIncludeNeuronsReadableByCaller = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ic_nns_governance.pb.v1.ListNeuronsResponse.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ic_nns_governance.pb.v1.ListNeuronsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ic_nns_governance.pb.v1.ListNeuronsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ic_nns_governance.pb.v1.ListNeuronsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ListNeuronsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    neuronIdsList: jspb.Message.toObjectList(msg.getNeuronIdsList(),
    proto.ic_nns_governance.pb.v1.ListNeuronsResponse.NeuronMapEntry.toObject, includeInstance),
    fullNeuronsList: jspb.Message.toObjectList(msg.getFullNeuronsList(),
    proto.ic_nns_governance.pb.v1.Neuron.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ic_nns_governance.pb.v1.ListNeuronsResponse}
 */
proto.ic_nns_governance.pb.v1.ListNeuronsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ic_nns_governance.pb.v1.ListNeuronsResponse;
  return proto.ic_nns_governance.pb.v1.ListNeuronsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ic_nns_governance.pb.v1.ListNeuronsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ic_nns_governance.pb.v1.ListNeuronsResponse}
 */
proto.ic_nns_governance.pb.v1.ListNeuronsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ic_nns_governance.pb.v1.ListNeuronsResponse.NeuronMapEntry;
      reader.readMessage(value,proto.ic_nns_governance.pb.v1.ListNeuronsResponse.NeuronMapEntry.deserializeBinaryFromReader);
      msg.addNeuronIds(value);
      break;
    case 2:
      var value = new proto.ic_nns_governance.pb.v1.Neuron;
      reader.readMessage(value,proto.ic_nns_governance.pb.v1.Neuron.deserializeBinaryFromReader);
      msg.addFullNeurons(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ic_nns_governance.pb.v1.ListNeuronsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ic_nns_governance.pb.v1.ListNeuronsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ic_nns_governance.pb.v1.ListNeuronsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ListNeuronsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNeuronIdsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ic_nns_governance.pb.v1.ListNeuronsResponse.NeuronMapEntry.serializeBinaryToWriter
    );
  }
  f = message.getFullNeuronsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.ic_nns_governance.pb.v1.Neuron.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ic_nns_governance.pb.v1.ListNeuronsResponse.NeuronMapEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.ic_nns_governance.pb.v1.ListNeuronsResponse.NeuronMapEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ic_nns_governance.pb.v1.ListNeuronsResponse.NeuronMapEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ListNeuronsResponse.NeuronMapEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    value: (f = msg.getValue()) && proto.ic_nns_governance.pb.v1.NeuronInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ic_nns_governance.pb.v1.ListNeuronsResponse.NeuronMapEntry}
 */
proto.ic_nns_governance.pb.v1.ListNeuronsResponse.NeuronMapEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ic_nns_governance.pb.v1.ListNeuronsResponse.NeuronMapEntry;
  return proto.ic_nns_governance.pb.v1.ListNeuronsResponse.NeuronMapEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ic_nns_governance.pb.v1.ListNeuronsResponse.NeuronMapEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ic_nns_governance.pb.v1.ListNeuronsResponse.NeuronMapEntry}
 */
proto.ic_nns_governance.pb.v1.ListNeuronsResponse.NeuronMapEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readFixed64String());
      msg.setKey(value);
      break;
    case 2:
      var value = new proto.ic_nns_governance.pb.v1.NeuronInfo;
      reader.readMessage(value,proto.ic_nns_governance.pb.v1.NeuronInfo.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ic_nns_governance.pb.v1.ListNeuronsResponse.NeuronMapEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ic_nns_governance.pb.v1.ListNeuronsResponse.NeuronMapEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ic_nns_governance.pb.v1.ListNeuronsResponse.NeuronMapEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.ListNeuronsResponse.NeuronMapEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (parseInt(f, 10) !== 0) {
    writer.writeFixed64String(
      1,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ic_nns_governance.pb.v1.NeuronInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional fixed64 key = 1;
 * @return {string}
 */
proto.ic_nns_governance.pb.v1.ListNeuronsResponse.NeuronMapEntry.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.ic_nns_governance.pb.v1.ListNeuronsResponse.NeuronMapEntry} returns this
 */
proto.ic_nns_governance.pb.v1.ListNeuronsResponse.NeuronMapEntry.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional NeuronInfo value = 2;
 * @return {?proto.ic_nns_governance.pb.v1.NeuronInfo}
 */
proto.ic_nns_governance.pb.v1.ListNeuronsResponse.NeuronMapEntry.prototype.getValue = function() {
  return /** @type{?proto.ic_nns_governance.pb.v1.NeuronInfo} */ (
    jspb.Message.getWrapperField(this, proto.ic_nns_governance.pb.v1.NeuronInfo, 2));
};


/**
 * @param {?proto.ic_nns_governance.pb.v1.NeuronInfo|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.ListNeuronsResponse.NeuronMapEntry} returns this
*/
proto.ic_nns_governance.pb.v1.ListNeuronsResponse.NeuronMapEntry.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.ListNeuronsResponse.NeuronMapEntry} returns this
 */
proto.ic_nns_governance.pb.v1.ListNeuronsResponse.NeuronMapEntry.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.ListNeuronsResponse.NeuronMapEntry.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated NeuronMapEntry neuron_ids = 1;
 * @return {!Array<!proto.ic_nns_governance.pb.v1.ListNeuronsResponse.NeuronMapEntry>}
 */
proto.ic_nns_governance.pb.v1.ListNeuronsResponse.prototype.getNeuronIdsList = function() {
  return /** @type{!Array<!proto.ic_nns_governance.pb.v1.ListNeuronsResponse.NeuronMapEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ic_nns_governance.pb.v1.ListNeuronsResponse.NeuronMapEntry, 1));
};


/**
 * @param {!Array<!proto.ic_nns_governance.pb.v1.ListNeuronsResponse.NeuronMapEntry>} value
 * @return {!proto.ic_nns_governance.pb.v1.ListNeuronsResponse} returns this
*/
proto.ic_nns_governance.pb.v1.ListNeuronsResponse.prototype.setNeuronIdsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ic_nns_governance.pb.v1.ListNeuronsResponse.NeuronMapEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ic_nns_governance.pb.v1.ListNeuronsResponse.NeuronMapEntry}
 */
proto.ic_nns_governance.pb.v1.ListNeuronsResponse.prototype.addNeuronIds = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ic_nns_governance.pb.v1.ListNeuronsResponse.NeuronMapEntry, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ic_nns_governance.pb.v1.ListNeuronsResponse} returns this
 */
proto.ic_nns_governance.pb.v1.ListNeuronsResponse.prototype.clearNeuronIdsList = function() {
  return this.setNeuronIdsList([]);
};


/**
 * repeated Neuron full_neurons = 2;
 * @return {!Array<!proto.ic_nns_governance.pb.v1.Neuron>}
 */
proto.ic_nns_governance.pb.v1.ListNeuronsResponse.prototype.getFullNeuronsList = function() {
  return /** @type{!Array<!proto.ic_nns_governance.pb.v1.Neuron>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ic_nns_governance.pb.v1.Neuron, 2));
};


/**
 * @param {!Array<!proto.ic_nns_governance.pb.v1.Neuron>} value
 * @return {!proto.ic_nns_governance.pb.v1.ListNeuronsResponse} returns this
*/
proto.ic_nns_governance.pb.v1.ListNeuronsResponse.prototype.setFullNeuronsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.ic_nns_governance.pb.v1.Neuron=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ic_nns_governance.pb.v1.Neuron}
 */
proto.ic_nns_governance.pb.v1.ListNeuronsResponse.prototype.addFullNeurons = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ic_nns_governance.pb.v1.Neuron, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ic_nns_governance.pb.v1.ListNeuronsResponse} returns this
 */
proto.ic_nns_governance.pb.v1.ListNeuronsResponse.prototype.clearFullNeuronsList = function() {
  return this.setFullNeuronsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ic_nns_governance.pb.v1.BallotInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ic_nns_governance.pb.v1.BallotInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ic_nns_governance.pb.v1.BallotInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.BallotInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    proposalId: (f = msg.getProposalId()) && base_types_pb.ProposalId.toObject(includeInstance, f),
    vote: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ic_nns_governance.pb.v1.BallotInfo}
 */
proto.ic_nns_governance.pb.v1.BallotInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ic_nns_governance.pb.v1.BallotInfo;
  return proto.ic_nns_governance.pb.v1.BallotInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ic_nns_governance.pb.v1.BallotInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ic_nns_governance.pb.v1.BallotInfo}
 */
proto.ic_nns_governance.pb.v1.BallotInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new base_types_pb.ProposalId;
      reader.readMessage(value,base_types_pb.ProposalId.deserializeBinaryFromReader);
      msg.setProposalId(value);
      break;
    case 2:
      var value = /** @type {!proto.ic_nns_governance.pb.v1.Vote} */ (reader.readEnum());
      msg.setVote(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ic_nns_governance.pb.v1.BallotInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ic_nns_governance.pb.v1.BallotInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ic_nns_governance.pb.v1.BallotInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.BallotInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProposalId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      base_types_pb.ProposalId.serializeBinaryToWriter
    );
  }
  f = message.getVote();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional ic_base_types.pb.v1.ProposalId proposal_id = 1;
 * @return {?proto.ic_base_types.pb.v1.ProposalId}
 */
proto.ic_nns_governance.pb.v1.BallotInfo.prototype.getProposalId = function() {
  return /** @type{?proto.ic_base_types.pb.v1.ProposalId} */ (
    jspb.Message.getWrapperField(this, base_types_pb.ProposalId, 1));
};


/**
 * @param {?proto.ic_base_types.pb.v1.ProposalId|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.BallotInfo} returns this
*/
proto.ic_nns_governance.pb.v1.BallotInfo.prototype.setProposalId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.BallotInfo} returns this
 */
proto.ic_nns_governance.pb.v1.BallotInfo.prototype.clearProposalId = function() {
  return this.setProposalId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.BallotInfo.prototype.hasProposalId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Vote vote = 2;
 * @return {!proto.ic_nns_governance.pb.v1.Vote}
 */
proto.ic_nns_governance.pb.v1.BallotInfo.prototype.getVote = function() {
  return /** @type {!proto.ic_nns_governance.pb.v1.Vote} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.ic_nns_governance.pb.v1.Vote} value
 * @return {!proto.ic_nns_governance.pb.v1.BallotInfo} returns this
 */
proto.ic_nns_governance.pb.v1.BallotInfo.prototype.setVote = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ic_nns_governance.pb.v1.NeuronInfo.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ic_nns_governance.pb.v1.NeuronInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ic_nns_governance.pb.v1.NeuronInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ic_nns_governance.pb.v1.NeuronInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.NeuronInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    retrievedAtTimestampSeconds: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    ageSeconds: jspb.Message.getFieldWithDefault(msg, 3, "0"),
    dissolveDelaySeconds: jspb.Message.getFieldWithDefault(msg, 4, "0"),
    recentBallotsList: jspb.Message.toObjectList(msg.getRecentBallotsList(),
    proto.ic_nns_governance.pb.v1.BallotInfo.toObject, includeInstance),
    votingPower: jspb.Message.getFieldWithDefault(msg, 6, "0"),
    createdTimestampSeconds: jspb.Message.getFieldWithDefault(msg, 7, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ic_nns_governance.pb.v1.NeuronInfo}
 */
proto.ic_nns_governance.pb.v1.NeuronInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ic_nns_governance.pb.v1.NeuronInfo;
  return proto.ic_nns_governance.pb.v1.NeuronInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ic_nns_governance.pb.v1.NeuronInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ic_nns_governance.pb.v1.NeuronInfo}
 */
proto.ic_nns_governance.pb.v1.NeuronInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setRetrievedAtTimestampSeconds(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setAgeSeconds(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setDissolveDelaySeconds(value);
      break;
    case 5:
      var value = new proto.ic_nns_governance.pb.v1.BallotInfo;
      reader.readMessage(value,proto.ic_nns_governance.pb.v1.BallotInfo.deserializeBinaryFromReader);
      msg.addRecentBallots(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setVotingPower(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setCreatedTimestampSeconds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ic_nns_governance.pb.v1.NeuronInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ic_nns_governance.pb.v1.NeuronInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ic_nns_governance.pb.v1.NeuronInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.NeuronInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRetrievedAtTimestampSeconds();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = message.getAgeSeconds();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      3,
      f
    );
  }
  f = message.getDissolveDelaySeconds();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      4,
      f
    );
  }
  f = message.getRecentBallotsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.ic_nns_governance.pb.v1.BallotInfo.serializeBinaryToWriter
    );
  }
  f = message.getVotingPower();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      6,
      f
    );
  }
  f = message.getCreatedTimestampSeconds();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      7,
      f
    );
  }
};


/**
 * optional uint64 retrieved_at_timestamp_seconds = 1;
 * @return {string}
 */
proto.ic_nns_governance.pb.v1.NeuronInfo.prototype.getRetrievedAtTimestampSeconds = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.ic_nns_governance.pb.v1.NeuronInfo} returns this
 */
proto.ic_nns_governance.pb.v1.NeuronInfo.prototype.setRetrievedAtTimestampSeconds = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional uint64 age_seconds = 3;
 * @return {string}
 */
proto.ic_nns_governance.pb.v1.NeuronInfo.prototype.getAgeSeconds = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/**
 * @param {string} value
 * @return {!proto.ic_nns_governance.pb.v1.NeuronInfo} returns this
 */
proto.ic_nns_governance.pb.v1.NeuronInfo.prototype.setAgeSeconds = function(value) {
  return jspb.Message.setProto3StringIntField(this, 3, value);
};


/**
 * optional uint64 dissolve_delay_seconds = 4;
 * @return {string}
 */
proto.ic_nns_governance.pb.v1.NeuronInfo.prototype.getDissolveDelaySeconds = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, "0"));
};


/**
 * @param {string} value
 * @return {!proto.ic_nns_governance.pb.v1.NeuronInfo} returns this
 */
proto.ic_nns_governance.pb.v1.NeuronInfo.prototype.setDissolveDelaySeconds = function(value) {
  return jspb.Message.setProto3StringIntField(this, 4, value);
};


/**
 * repeated BallotInfo recent_ballots = 5;
 * @return {!Array<!proto.ic_nns_governance.pb.v1.BallotInfo>}
 */
proto.ic_nns_governance.pb.v1.NeuronInfo.prototype.getRecentBallotsList = function() {
  return /** @type{!Array<!proto.ic_nns_governance.pb.v1.BallotInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ic_nns_governance.pb.v1.BallotInfo, 5));
};


/**
 * @param {!Array<!proto.ic_nns_governance.pb.v1.BallotInfo>} value
 * @return {!proto.ic_nns_governance.pb.v1.NeuronInfo} returns this
*/
proto.ic_nns_governance.pb.v1.NeuronInfo.prototype.setRecentBallotsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.ic_nns_governance.pb.v1.BallotInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ic_nns_governance.pb.v1.BallotInfo}
 */
proto.ic_nns_governance.pb.v1.NeuronInfo.prototype.addRecentBallots = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.ic_nns_governance.pb.v1.BallotInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ic_nns_governance.pb.v1.NeuronInfo} returns this
 */
proto.ic_nns_governance.pb.v1.NeuronInfo.prototype.clearRecentBallotsList = function() {
  return this.setRecentBallotsList([]);
};


/**
 * optional uint64 voting_power = 6;
 * @return {string}
 */
proto.ic_nns_governance.pb.v1.NeuronInfo.prototype.getVotingPower = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, "0"));
};


/**
 * @param {string} value
 * @return {!proto.ic_nns_governance.pb.v1.NeuronInfo} returns this
 */
proto.ic_nns_governance.pb.v1.NeuronInfo.prototype.setVotingPower = function(value) {
  return jspb.Message.setProto3StringIntField(this, 6, value);
};


/**
 * optional uint64 created_timestamp_seconds = 7;
 * @return {string}
 */
proto.ic_nns_governance.pb.v1.NeuronInfo.prototype.getCreatedTimestampSeconds = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, "0"));
};


/**
 * @param {string} value
 * @return {!proto.ic_nns_governance.pb.v1.NeuronInfo} returns this
 */
proto.ic_nns_governance.pb.v1.NeuronInfo.prototype.setCreatedTimestampSeconds = function(value) {
  return jspb.Message.setProto3StringIntField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ic_nns_governance.pb.v1.Neuron.repeatedFields_ = [4,12];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ic_nns_governance.pb.v1.Neuron.oneofGroups_ = [[9,10]];

/**
 * @enum {number}
 */
proto.ic_nns_governance.pb.v1.Neuron.DissolveStateCase = {
  DISSOLVE_STATE_NOT_SET: 0,
  WHEN_DISSOLVED_TIMESTAMP_SECONDS: 9,
  DISSOLVE_DELAY_SECONDS: 10
};

/**
 * @return {proto.ic_nns_governance.pb.v1.Neuron.DissolveStateCase}
 */
proto.ic_nns_governance.pb.v1.Neuron.prototype.getDissolveStateCase = function() {
  return /** @type {proto.ic_nns_governance.pb.v1.Neuron.DissolveStateCase} */(jspb.Message.computeOneofCase(this, proto.ic_nns_governance.pb.v1.Neuron.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ic_nns_governance.pb.v1.Neuron.prototype.toObject = function(opt_includeInstance) {
  return proto.ic_nns_governance.pb.v1.Neuron.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ic_nns_governance.pb.v1.Neuron} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.Neuron.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && base_types_pb.NeuronId.toObject(includeInstance, f),
    account: msg.getAccount_asB64(),
    controller: (f = msg.getController()) && base_types_pb.PrincipalId.toObject(includeInstance, f),
    hotKeysList: jspb.Message.toObjectList(msg.getHotKeysList(),
    base_types_pb.PrincipalId.toObject, includeInstance),
    cachedNeuronStakeE8s: jspb.Message.getFieldWithDefault(msg, 5, "0"),
    neuronFeesE8s: jspb.Message.getFieldWithDefault(msg, 6, "0"),
    createdTimestampSeconds: jspb.Message.getFieldWithDefault(msg, 7, "0"),
    agingSinceTimestampSeconds: jspb.Message.getFieldWithDefault(msg, 8, "0"),
    whenDissolvedTimestampSeconds: jspb.Message.getFieldWithDefault(msg, 9, "0"),
    dissolveDelaySeconds: jspb.Message.getFieldWithDefault(msg, 10, "0"),
    followeesMap: (f = msg.getFolloweesMap()) ? f.toObject(includeInstance, proto.ic_nns_governance.pb.v1.Neuron.Followees.toObject) : [],
    recentBallotsList: jspb.Message.toObjectList(msg.getRecentBallotsList(),
    proto.ic_nns_governance.pb.v1.BallotInfo.toObject, includeInstance),
    kycVerified: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    transfer: (f = msg.getTransfer()) && proto.ic_nns_governance.pb.v1.NeuronStakeTransfer.toObject(includeInstance, f),
    maturityE8sEquivalent: jspb.Message.getFieldWithDefault(msg, 15, "0"),
    notForProfit: jspb.Message.getBooleanFieldWithDefault(msg, 16, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ic_nns_governance.pb.v1.Neuron}
 */
proto.ic_nns_governance.pb.v1.Neuron.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ic_nns_governance.pb.v1.Neuron;
  return proto.ic_nns_governance.pb.v1.Neuron.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ic_nns_governance.pb.v1.Neuron} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ic_nns_governance.pb.v1.Neuron}
 */
proto.ic_nns_governance.pb.v1.Neuron.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new base_types_pb.NeuronId;
      reader.readMessage(value,base_types_pb.NeuronId.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAccount(value);
      break;
    case 3:
      var value = new base_types_pb.PrincipalId;
      reader.readMessage(value,base_types_pb.PrincipalId.deserializeBinaryFromReader);
      msg.setController(value);
      break;
    case 4:
      var value = new base_types_pb.PrincipalId;
      reader.readMessage(value,base_types_pb.PrincipalId.deserializeBinaryFromReader);
      msg.addHotKeys(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setCachedNeuronStakeE8s(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setNeuronFeesE8s(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setCreatedTimestampSeconds(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setAgingSinceTimestampSeconds(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setWhenDissolvedTimestampSeconds(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setDissolveDelaySeconds(value);
      break;
    case 11:
      var value = msg.getFolloweesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.ic_nns_governance.pb.v1.Neuron.Followees.deserializeBinaryFromReader, 0, new proto.ic_nns_governance.pb.v1.Neuron.Followees());
         });
      break;
    case 12:
      var value = new proto.ic_nns_governance.pb.v1.BallotInfo;
      reader.readMessage(value,proto.ic_nns_governance.pb.v1.BallotInfo.deserializeBinaryFromReader);
      msg.addRecentBallots(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setKycVerified(value);
      break;
    case 14:
      var value = new proto.ic_nns_governance.pb.v1.NeuronStakeTransfer;
      reader.readMessage(value,proto.ic_nns_governance.pb.v1.NeuronStakeTransfer.deserializeBinaryFromReader);
      msg.setTransfer(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setMaturityE8sEquivalent(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNotForProfit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ic_nns_governance.pb.v1.Neuron.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ic_nns_governance.pb.v1.Neuron.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ic_nns_governance.pb.v1.Neuron} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.Neuron.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      base_types_pb.NeuronId.serializeBinaryToWriter
    );
  }
  f = message.getAccount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getController();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      base_types_pb.PrincipalId.serializeBinaryToWriter
    );
  }
  f = message.getHotKeysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      base_types_pb.PrincipalId.serializeBinaryToWriter
    );
  }
  f = message.getCachedNeuronStakeE8s();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      5,
      f
    );
  }
  f = message.getNeuronFeesE8s();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      6,
      f
    );
  }
  f = message.getCreatedTimestampSeconds();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      7,
      f
    );
  }
  f = message.getAgingSinceTimestampSeconds();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeUint64String(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeUint64String(
      10,
      f
    );
  }
  f = message.getFolloweesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(11, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.ic_nns_governance.pb.v1.Neuron.Followees.serializeBinaryToWriter);
  }
  f = message.getRecentBallotsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.ic_nns_governance.pb.v1.BallotInfo.serializeBinaryToWriter
    );
  }
  f = message.getKycVerified();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getTransfer();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.ic_nns_governance.pb.v1.NeuronStakeTransfer.serializeBinaryToWriter
    );
  }
  f = message.getMaturityE8sEquivalent();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      15,
      f
    );
  }
  f = message.getNotForProfit();
  if (f) {
    writer.writeBool(
      16,
      f
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ic_nns_governance.pb.v1.Neuron.Followees.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ic_nns_governance.pb.v1.Neuron.Followees.prototype.toObject = function(opt_includeInstance) {
  return proto.ic_nns_governance.pb.v1.Neuron.Followees.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ic_nns_governance.pb.v1.Neuron.Followees} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.Neuron.Followees.toObject = function(includeInstance, msg) {
  var f, obj = {
    followeesList: jspb.Message.toObjectList(msg.getFolloweesList(),
    base_types_pb.NeuronId.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ic_nns_governance.pb.v1.Neuron.Followees}
 */
proto.ic_nns_governance.pb.v1.Neuron.Followees.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ic_nns_governance.pb.v1.Neuron.Followees;
  return proto.ic_nns_governance.pb.v1.Neuron.Followees.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ic_nns_governance.pb.v1.Neuron.Followees} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ic_nns_governance.pb.v1.Neuron.Followees}
 */
proto.ic_nns_governance.pb.v1.Neuron.Followees.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new base_types_pb.NeuronId;
      reader.readMessage(value,base_types_pb.NeuronId.deserializeBinaryFromReader);
      msg.addFollowees(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ic_nns_governance.pb.v1.Neuron.Followees.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ic_nns_governance.pb.v1.Neuron.Followees.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ic_nns_governance.pb.v1.Neuron.Followees} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.Neuron.Followees.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFolloweesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      base_types_pb.NeuronId.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ic_base_types.pb.v1.NeuronId followees = 1;
 * @return {!Array<!proto.ic_base_types.pb.v1.NeuronId>}
 */
proto.ic_nns_governance.pb.v1.Neuron.Followees.prototype.getFolloweesList = function() {
  return /** @type{!Array<!proto.ic_base_types.pb.v1.NeuronId>} */ (
    jspb.Message.getRepeatedWrapperField(this, base_types_pb.NeuronId, 1));
};


/**
 * @param {!Array<!proto.ic_base_types.pb.v1.NeuronId>} value
 * @return {!proto.ic_nns_governance.pb.v1.Neuron.Followees} returns this
*/
proto.ic_nns_governance.pb.v1.Neuron.Followees.prototype.setFolloweesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ic_base_types.pb.v1.NeuronId=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ic_base_types.pb.v1.NeuronId}
 */
proto.ic_nns_governance.pb.v1.Neuron.Followees.prototype.addFollowees = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ic_base_types.pb.v1.NeuronId, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ic_nns_governance.pb.v1.Neuron.Followees} returns this
 */
proto.ic_nns_governance.pb.v1.Neuron.Followees.prototype.clearFolloweesList = function() {
  return this.setFolloweesList([]);
};


/**
 * optional ic_base_types.pb.v1.NeuronId id = 1;
 * @return {?proto.ic_base_types.pb.v1.NeuronId}
 */
proto.ic_nns_governance.pb.v1.Neuron.prototype.getId = function() {
  return /** @type{?proto.ic_base_types.pb.v1.NeuronId} */ (
    jspb.Message.getWrapperField(this, base_types_pb.NeuronId, 1));
};


/**
 * @param {?proto.ic_base_types.pb.v1.NeuronId|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.Neuron} returns this
*/
proto.ic_nns_governance.pb.v1.Neuron.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.Neuron} returns this
 */
proto.ic_nns_governance.pb.v1.Neuron.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.Neuron.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes account = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ic_nns_governance.pb.v1.Neuron.prototype.getAccount = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes account = 2;
 * This is a type-conversion wrapper around `getAccount()`
 * @return {string}
 */
proto.ic_nns_governance.pb.v1.Neuron.prototype.getAccount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAccount()));
};


/**
 * optional bytes account = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAccount()`
 * @return {!Uint8Array}
 */
proto.ic_nns_governance.pb.v1.Neuron.prototype.getAccount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAccount()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ic_nns_governance.pb.v1.Neuron} returns this
 */
proto.ic_nns_governance.pb.v1.Neuron.prototype.setAccount = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional ic_base_types.pb.v1.PrincipalId controller = 3;
 * @return {?proto.ic_base_types.pb.v1.PrincipalId}
 */
proto.ic_nns_governance.pb.v1.Neuron.prototype.getController = function() {
  return /** @type{?proto.ic_base_types.pb.v1.PrincipalId} */ (
    jspb.Message.getWrapperField(this, base_types_pb.PrincipalId, 3));
};


/**
 * @param {?proto.ic_base_types.pb.v1.PrincipalId|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.Neuron} returns this
*/
proto.ic_nns_governance.pb.v1.Neuron.prototype.setController = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.Neuron} returns this
 */
proto.ic_nns_governance.pb.v1.Neuron.prototype.clearController = function() {
  return this.setController(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.Neuron.prototype.hasController = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated ic_base_types.pb.v1.PrincipalId hot_keys = 4;
 * @return {!Array<!proto.ic_base_types.pb.v1.PrincipalId>}
 */
proto.ic_nns_governance.pb.v1.Neuron.prototype.getHotKeysList = function() {
  return /** @type{!Array<!proto.ic_base_types.pb.v1.PrincipalId>} */ (
    jspb.Message.getRepeatedWrapperField(this, base_types_pb.PrincipalId, 4));
};


/**
 * @param {!Array<!proto.ic_base_types.pb.v1.PrincipalId>} value
 * @return {!proto.ic_nns_governance.pb.v1.Neuron} returns this
*/
proto.ic_nns_governance.pb.v1.Neuron.prototype.setHotKeysList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.ic_base_types.pb.v1.PrincipalId=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ic_base_types.pb.v1.PrincipalId}
 */
proto.ic_nns_governance.pb.v1.Neuron.prototype.addHotKeys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.ic_base_types.pb.v1.PrincipalId, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ic_nns_governance.pb.v1.Neuron} returns this
 */
proto.ic_nns_governance.pb.v1.Neuron.prototype.clearHotKeysList = function() {
  return this.setHotKeysList([]);
};


/**
 * optional uint64 cached_neuron_stake_e8s = 5;
 * @return {string}
 */
proto.ic_nns_governance.pb.v1.Neuron.prototype.getCachedNeuronStakeE8s = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, "0"));
};


/**
 * @param {string} value
 * @return {!proto.ic_nns_governance.pb.v1.Neuron} returns this
 */
proto.ic_nns_governance.pb.v1.Neuron.prototype.setCachedNeuronStakeE8s = function(value) {
  return jspb.Message.setProto3StringIntField(this, 5, value);
};


/**
 * optional uint64 neuron_fees_e8s = 6;
 * @return {string}
 */
proto.ic_nns_governance.pb.v1.Neuron.prototype.getNeuronFeesE8s = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, "0"));
};


/**
 * @param {string} value
 * @return {!proto.ic_nns_governance.pb.v1.Neuron} returns this
 */
proto.ic_nns_governance.pb.v1.Neuron.prototype.setNeuronFeesE8s = function(value) {
  return jspb.Message.setProto3StringIntField(this, 6, value);
};


/**
 * optional uint64 created_timestamp_seconds = 7;
 * @return {string}
 */
proto.ic_nns_governance.pb.v1.Neuron.prototype.getCreatedTimestampSeconds = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, "0"));
};


/**
 * @param {string} value
 * @return {!proto.ic_nns_governance.pb.v1.Neuron} returns this
 */
proto.ic_nns_governance.pb.v1.Neuron.prototype.setCreatedTimestampSeconds = function(value) {
  return jspb.Message.setProto3StringIntField(this, 7, value);
};


/**
 * optional uint64 aging_since_timestamp_seconds = 8;
 * @return {string}
 */
proto.ic_nns_governance.pb.v1.Neuron.prototype.getAgingSinceTimestampSeconds = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, "0"));
};


/**
 * @param {string} value
 * @return {!proto.ic_nns_governance.pb.v1.Neuron} returns this
 */
proto.ic_nns_governance.pb.v1.Neuron.prototype.setAgingSinceTimestampSeconds = function(value) {
  return jspb.Message.setProto3StringIntField(this, 8, value);
};


/**
 * optional uint64 when_dissolved_timestamp_seconds = 9;
 * @return {string}
 */
proto.ic_nns_governance.pb.v1.Neuron.prototype.getWhenDissolvedTimestampSeconds = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, "0"));
};


/**
 * @param {string} value
 * @return {!proto.ic_nns_governance.pb.v1.Neuron} returns this
 */
proto.ic_nns_governance.pb.v1.Neuron.prototype.setWhenDissolvedTimestampSeconds = function(value) {
  return jspb.Message.setOneofField(this, 9, proto.ic_nns_governance.pb.v1.Neuron.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.Neuron} returns this
 */
proto.ic_nns_governance.pb.v1.Neuron.prototype.clearWhenDissolvedTimestampSeconds = function() {
  return jspb.Message.setOneofField(this, 9, proto.ic_nns_governance.pb.v1.Neuron.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.Neuron.prototype.hasWhenDissolvedTimestampSeconds = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional uint64 dissolve_delay_seconds = 10;
 * @return {string}
 */
proto.ic_nns_governance.pb.v1.Neuron.prototype.getDissolveDelaySeconds = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, "0"));
};


/**
 * @param {string} value
 * @return {!proto.ic_nns_governance.pb.v1.Neuron} returns this
 */
proto.ic_nns_governance.pb.v1.Neuron.prototype.setDissolveDelaySeconds = function(value) {
  return jspb.Message.setOneofField(this, 10, proto.ic_nns_governance.pb.v1.Neuron.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.Neuron} returns this
 */
proto.ic_nns_governance.pb.v1.Neuron.prototype.clearDissolveDelaySeconds = function() {
  return jspb.Message.setOneofField(this, 10, proto.ic_nns_governance.pb.v1.Neuron.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.Neuron.prototype.hasDissolveDelaySeconds = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * map<int32, Followees> followees = 11;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.ic_nns_governance.pb.v1.Neuron.Followees>}
 */
proto.ic_nns_governance.pb.v1.Neuron.prototype.getFolloweesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.ic_nns_governance.pb.v1.Neuron.Followees>} */ (
      jspb.Message.getMapField(this, 11, opt_noLazyCreate,
      proto.ic_nns_governance.pb.v1.Neuron.Followees));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ic_nns_governance.pb.v1.Neuron} returns this
 */
proto.ic_nns_governance.pb.v1.Neuron.prototype.clearFolloweesMap = function() {
  this.getFolloweesMap().clear();
  return this;};


/**
 * repeated BallotInfo recent_ballots = 12;
 * @return {!Array<!proto.ic_nns_governance.pb.v1.BallotInfo>}
 */
proto.ic_nns_governance.pb.v1.Neuron.prototype.getRecentBallotsList = function() {
  return /** @type{!Array<!proto.ic_nns_governance.pb.v1.BallotInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ic_nns_governance.pb.v1.BallotInfo, 12));
};


/**
 * @param {!Array<!proto.ic_nns_governance.pb.v1.BallotInfo>} value
 * @return {!proto.ic_nns_governance.pb.v1.Neuron} returns this
*/
proto.ic_nns_governance.pb.v1.Neuron.prototype.setRecentBallotsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.ic_nns_governance.pb.v1.BallotInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ic_nns_governance.pb.v1.BallotInfo}
 */
proto.ic_nns_governance.pb.v1.Neuron.prototype.addRecentBallots = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.ic_nns_governance.pb.v1.BallotInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ic_nns_governance.pb.v1.Neuron} returns this
 */
proto.ic_nns_governance.pb.v1.Neuron.prototype.clearRecentBallotsList = function() {
  return this.setRecentBallotsList([]);
};


/**
 * optional bool kyc_verified = 13;
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.Neuron.prototype.getKycVerified = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ic_nns_governance.pb.v1.Neuron} returns this
 */
proto.ic_nns_governance.pb.v1.Neuron.prototype.setKycVerified = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional NeuronStakeTransfer transfer = 14;
 * @return {?proto.ic_nns_governance.pb.v1.NeuronStakeTransfer}
 */
proto.ic_nns_governance.pb.v1.Neuron.prototype.getTransfer = function() {
  return /** @type{?proto.ic_nns_governance.pb.v1.NeuronStakeTransfer} */ (
    jspb.Message.getWrapperField(this, proto.ic_nns_governance.pb.v1.NeuronStakeTransfer, 14));
};


/**
 * @param {?proto.ic_nns_governance.pb.v1.NeuronStakeTransfer|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.Neuron} returns this
*/
proto.ic_nns_governance.pb.v1.Neuron.prototype.setTransfer = function(value) {
  return jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.Neuron} returns this
 */
proto.ic_nns_governance.pb.v1.Neuron.prototype.clearTransfer = function() {
  return this.setTransfer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.Neuron.prototype.hasTransfer = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional uint64 maturity_e8s_equivalent = 15;
 * @return {string}
 */
proto.ic_nns_governance.pb.v1.Neuron.prototype.getMaturityE8sEquivalent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, "0"));
};


/**
 * @param {string} value
 * @return {!proto.ic_nns_governance.pb.v1.Neuron} returns this
 */
proto.ic_nns_governance.pb.v1.Neuron.prototype.setMaturityE8sEquivalent = function(value) {
  return jspb.Message.setProto3StringIntField(this, 15, value);
};


/**
 * optional bool not_for_profit = 16;
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.Neuron.prototype.getNotForProfit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 16, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ic_nns_governance.pb.v1.Neuron} returns this
 */
proto.ic_nns_governance.pb.v1.Neuron.prototype.setNotForProfit = function(value) {
  return jspb.Message.setProto3BooleanField(this, 16, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ic_nns_governance.pb.v1.NeuronStakeTransfer.prototype.toObject = function(opt_includeInstance) {
  return proto.ic_nns_governance.pb.v1.NeuronStakeTransfer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ic_nns_governance.pb.v1.NeuronStakeTransfer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.NeuronStakeTransfer.toObject = function(includeInstance, msg) {
  var f, obj = {
    transferTimestamp: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    from: (f = msg.getFrom()) && base_types_pb.PrincipalId.toObject(includeInstance, f),
    fromSubaccount: msg.getFromSubaccount_asB64(),
    toSubaccount: msg.getToSubaccount_asB64(),
    neuronStakeE8s: jspb.Message.getFieldWithDefault(msg, 5, "0"),
    blockHeight: jspb.Message.getFieldWithDefault(msg, 6, "0"),
    memo: jspb.Message.getFieldWithDefault(msg, 7, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ic_nns_governance.pb.v1.NeuronStakeTransfer}
 */
proto.ic_nns_governance.pb.v1.NeuronStakeTransfer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ic_nns_governance.pb.v1.NeuronStakeTransfer;
  return proto.ic_nns_governance.pb.v1.NeuronStakeTransfer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ic_nns_governance.pb.v1.NeuronStakeTransfer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ic_nns_governance.pb.v1.NeuronStakeTransfer}
 */
proto.ic_nns_governance.pb.v1.NeuronStakeTransfer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setTransferTimestamp(value);
      break;
    case 2:
      var value = new base_types_pb.PrincipalId;
      reader.readMessage(value,base_types_pb.PrincipalId.deserializeBinaryFromReader);
      msg.setFrom(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFromSubaccount(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setToSubaccount(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setNeuronStakeE8s(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setBlockHeight(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setMemo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ic_nns_governance.pb.v1.NeuronStakeTransfer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ic_nns_governance.pb.v1.NeuronStakeTransfer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ic_nns_governance.pb.v1.NeuronStakeTransfer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ic_nns_governance.pb.v1.NeuronStakeTransfer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransferTimestamp();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = message.getFrom();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      base_types_pb.PrincipalId.serializeBinaryToWriter
    );
  }
  f = message.getFromSubaccount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getToSubaccount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getNeuronStakeE8s();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      5,
      f
    );
  }
  f = message.getBlockHeight();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      6,
      f
    );
  }
  f = message.getMemo();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      7,
      f
    );
  }
};


/**
 * optional uint64 transfer_timestamp = 1;
 * @return {string}
 */
proto.ic_nns_governance.pb.v1.NeuronStakeTransfer.prototype.getTransferTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.ic_nns_governance.pb.v1.NeuronStakeTransfer} returns this
 */
proto.ic_nns_governance.pb.v1.NeuronStakeTransfer.prototype.setTransferTimestamp = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional ic_base_types.pb.v1.PrincipalId from = 2;
 * @return {?proto.ic_base_types.pb.v1.PrincipalId}
 */
proto.ic_nns_governance.pb.v1.NeuronStakeTransfer.prototype.getFrom = function() {
  return /** @type{?proto.ic_base_types.pb.v1.PrincipalId} */ (
    jspb.Message.getWrapperField(this, base_types_pb.PrincipalId, 2));
};


/**
 * @param {?proto.ic_base_types.pb.v1.PrincipalId|undefined} value
 * @return {!proto.ic_nns_governance.pb.v1.NeuronStakeTransfer} returns this
*/
proto.ic_nns_governance.pb.v1.NeuronStakeTransfer.prototype.setFrom = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ic_nns_governance.pb.v1.NeuronStakeTransfer} returns this
 */
proto.ic_nns_governance.pb.v1.NeuronStakeTransfer.prototype.clearFrom = function() {
  return this.setFrom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ic_nns_governance.pb.v1.NeuronStakeTransfer.prototype.hasFrom = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes from_subaccount = 3;
 * @return {!(string|Uint8Array)}
 */
proto.ic_nns_governance.pb.v1.NeuronStakeTransfer.prototype.getFromSubaccount = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes from_subaccount = 3;
 * This is a type-conversion wrapper around `getFromSubaccount()`
 * @return {string}
 */
proto.ic_nns_governance.pb.v1.NeuronStakeTransfer.prototype.getFromSubaccount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFromSubaccount()));
};


/**
 * optional bytes from_subaccount = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFromSubaccount()`
 * @return {!Uint8Array}
 */
proto.ic_nns_governance.pb.v1.NeuronStakeTransfer.prototype.getFromSubaccount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFromSubaccount()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ic_nns_governance.pb.v1.NeuronStakeTransfer} returns this
 */
proto.ic_nns_governance.pb.v1.NeuronStakeTransfer.prototype.setFromSubaccount = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes to_subaccount = 4;
 * @return {!(string|Uint8Array)}
 */
proto.ic_nns_governance.pb.v1.NeuronStakeTransfer.prototype.getToSubaccount = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes to_subaccount = 4;
 * This is a type-conversion wrapper around `getToSubaccount()`
 * @return {string}
 */
proto.ic_nns_governance.pb.v1.NeuronStakeTransfer.prototype.getToSubaccount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getToSubaccount()));
};


/**
 * optional bytes to_subaccount = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getToSubaccount()`
 * @return {!Uint8Array}
 */
proto.ic_nns_governance.pb.v1.NeuronStakeTransfer.prototype.getToSubaccount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getToSubaccount()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ic_nns_governance.pb.v1.NeuronStakeTransfer} returns this
 */
proto.ic_nns_governance.pb.v1.NeuronStakeTransfer.prototype.setToSubaccount = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional uint64 neuron_stake_e8s = 5;
 * @return {string}
 */
proto.ic_nns_governance.pb.v1.NeuronStakeTransfer.prototype.getNeuronStakeE8s = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, "0"));
};


/**
 * @param {string} value
 * @return {!proto.ic_nns_governance.pb.v1.NeuronStakeTransfer} returns this
 */
proto.ic_nns_governance.pb.v1.NeuronStakeTransfer.prototype.setNeuronStakeE8s = function(value) {
  return jspb.Message.setProto3StringIntField(this, 5, value);
};


/**
 * optional uint64 block_height = 6;
 * @return {string}
 */
proto.ic_nns_governance.pb.v1.NeuronStakeTransfer.prototype.getBlockHeight = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, "0"));
};


/**
 * @param {string} value
 * @return {!proto.ic_nns_governance.pb.v1.NeuronStakeTransfer} returns this
 */
proto.ic_nns_governance.pb.v1.NeuronStakeTransfer.prototype.setBlockHeight = function(value) {
  return jspb.Message.setProto3StringIntField(this, 6, value);
};


/**
 * optional uint64 memo = 7;
 * @return {string}
 */
proto.ic_nns_governance.pb.v1.NeuronStakeTransfer.prototype.getMemo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, "0"));
};


/**
 * @param {string} value
 * @return {!proto.ic_nns_governance.pb.v1.NeuronStakeTransfer} returns this
 */
proto.ic_nns_governance.pb.v1.NeuronStakeTransfer.prototype.setMemo = function(value) {
  return jspb.Message.setProto3StringIntField(this, 7, value);
};


/**
 * @enum {number}
 */
proto.ic_nns_governance.pb.v1.Vote = {
  VOTE_UNSPECIFIED: 0,
  VOTE_YES: 1,
  VOTE_NO: 2
};

/**
 * @enum {number}
 */
proto.ic_nns_governance.pb.v1.Topic = {
  TOPIC_UNSPECIFIED: 0,
  TOPIC_NEURON_MANAGEMENT: 1,
  TOPIC_EXCHANGE_RATE: 2,
  TOPIC_NETWORK_ECONOMICS: 3,
  TOPIC_GOVERNANCE: 4,
  TOPIC_NODE_ADMIN: 5,
  TOPIC_PARTICIPANT_MANAGEMENT: 6,
  TOPIC_SUBNET_MANAGEMENT: 7,
  TOPIC_NETWORK_CANISTER_MANAGEMENT: 8,
  TOPIC_KYC: 9,
  TOPIC_NODE_PROVIDER_REWARDS: 10
};

goog.object.extend(exports, proto.ic_nns_governance.pb.v1);
