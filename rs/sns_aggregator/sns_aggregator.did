type Config = record {
  update_interval_ms : nat64;
  fast_interval_ms : nat64;
};
type HttpHeader = record { text; text };
type HttpRequest = record {
  url : text;
  method : text;
  body : vec nat8;
  headers : vec HttpHeader;
};
type HttpResponse = record  {
    status_code: nat16;
    headers: vec HttpHeader;
    body: vec nat8;
};

type CanisterStatusResultV2 = record {
  controller : principal;
  status : CanisterStatusType;
  freezing_threshold : nat;
  balance : vec record { vec nat8; nat };
  memory_size : nat;
  cycles : nat;
  settings : DefiniteCanisterSettingsArgs;
  idle_cycles_burned_per_day : nat;
  module_hash : opt vec nat8;
};
type CanisterStatusType = variant { stopped; stopping; running };
type DefiniteCanisterSettingsArgs = record {
  controller : principal;
  freezing_threshold : nat;
  controllers : vec principal;
  memory_allocation : nat;
  compute_allocation : nat;
};

service : (opt Config) -> {
  get_canister_status : () -> (CanisterStatusResultV2);
  health_check : () -> (text) query;
  http_request : (HttpRequest) -> (HttpResponse) query;
  reconfigure : (opt Config) -> ();
  stable_data : () -> (text) query;
  tail_log : (opt nat16) -> (text) query;
}
