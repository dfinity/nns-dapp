diff --git b/rs/sns_aggregator/src/types/ic_sns_root.rs a/rs/sns_aggregator/src/types/ic_sns_root.rs
index cb295e4f0..33d538248 100644
--- b/rs/sns_aggregator/src/types/ic_sns_root.rs
+++ a/rs/sns_aggregator/src/types/ic_sns_root.rs
@@ -8,8 +8,7 @@ use crate::types::{CandidType, Deserialize, EmptyRecord, Serialize};
 use ic_cdk::api::call::CallResult;
 // This is an experimental feature to generate Rust binding from Candid.
 // You may want to manually adjust some of the types.
-#![allow(dead_code, unused_imports)]
-// use candid::{self, CandidType, Decode, Deserialize, Serialize, Clone, Debug, Encode, candid::Principal};
+// use candid::{self, CandidType, Deserialize, Serialize, Clone, Debug, candid::Principal};
 // use ic_cdk::api::call::CallResult as Result;
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
@@ -131,9 +130,9 @@ pub struct GetSnsCanistersSummaryResponse {
 }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
-pub struct ListSnsCanistersArg {}
+pub struct list_sns_canisters_arg0 {}
 
-#[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
+#[derive(CandidType, Deserialize, Serialize, Clone, Debug, Default)]
 pub struct ListSnsCanistersResponse {
     pub root: Option<candid::Principal>,
     pub swap: Option<candid::Principal>,
@@ -150,7 +149,7 @@ pub struct RegisterDappCanisterRequest {
 }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
-pub struct RegisterDappCanisterRet {}
+pub struct register_dapp_canister_ret0 {}
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
 pub struct RegisterDappCanistersRequest {
@@ -158,7 +157,7 @@ pub struct RegisterDappCanistersRequest {
 }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
-pub struct RegisterDappCanistersRet {}
+pub struct register_dapp_canisters_ret0 {}
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
 pub struct SetDappControllersRequest {
@@ -183,39 +182,42 @@ pub struct SetDappControllersResponse {
     pub failed_updates: Vec<FailedUpdate>,
 }
 
-pub struct Service(pub candid::Principal);
-impl Service {
-    pub async fn canister_status(&self, arg0: CanisterIdRecord) -> Result<(CanisterStatusResult,)> {
+pub struct SERVICE(pub candid::Principal);
+impl SERVICE {
+    pub async fn canister_status(&self, arg0: CanisterIdRecord) -> CallResult<(CanisterStatusResult,)> {
         ic_cdk::call(self.0, "canister_status", (arg0,)).await
     }
-    pub async fn change_canister(&self, arg0: ChangeCanisterProposal) -> Result<()> {
+    pub async fn change_canister(&self, arg0: ChangeCanisterProposal) -> CallResult<()> {
         ic_cdk::call(self.0, "change_canister", (arg0,)).await
     }
-    pub async fn get_build_metadata(&self) -> Result<(String,)> {
+    pub async fn get_build_metadata(&self) -> CallResult<(String,)> {
         ic_cdk::call(self.0, "get_build_metadata", ()).await
     }
     pub async fn get_sns_canisters_summary(
         &self,
         arg0: GetSnsCanistersSummaryRequest,
-    ) -> Result<(GetSnsCanistersSummaryResponse,)> {
+    ) -> CallResult<(GetSnsCanistersSummaryResponse,)> {
         ic_cdk::call(self.0, "get_sns_canisters_summary", (arg0,)).await
     }
-    pub async fn list_sns_canisters(&self, arg0: ListSnsCanistersArg) -> Result<(ListSnsCanistersResponse,)> {
+    pub async fn list_sns_canisters(&self, arg0: list_sns_canisters_arg0) -> CallResult<(ListSnsCanistersResponse,)> {
         ic_cdk::call(self.0, "list_sns_canisters", (arg0,)).await
     }
     pub async fn register_dapp_canister(
         &self,
         arg0: RegisterDappCanisterRequest,
-    ) -> Result<(RegisterDappCanisterRet,)> {
+    ) -> CallResult<(register_dapp_canister_ret0,)> {
         ic_cdk::call(self.0, "register_dapp_canister", (arg0,)).await
     }
     pub async fn register_dapp_canisters(
         &self,
         arg0: RegisterDappCanistersRequest,
-    ) -> Result<(RegisterDappCanistersRet,)> {
+    ) -> CallResult<(register_dapp_canisters_ret0,)> {
         ic_cdk::call(self.0, "register_dapp_canisters", (arg0,)).await
     }
-    pub async fn set_dapp_controllers(&self, arg0: SetDappControllersRequest) -> Result<(SetDappControllersResponse,)> {
+    pub async fn set_dapp_controllers(
+        &self,
+        arg0: SetDappControllersRequest,
+    ) -> CallResult<(SetDappControllersResponse,)> {
         ic_cdk::call(self.0, "set_dapp_controllers", (arg0,)).await
     }
 }
