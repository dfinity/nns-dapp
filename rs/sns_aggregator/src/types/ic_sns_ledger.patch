diff --git b/rs/sns_aggregator/src/types/ic_sns_ledger.rs a/rs/sns_aggregator/src/types/ic_sns_ledger.rs
index 7cbb51d8e..efb2fe93b 100644
--- b/rs/sns_aggregator/src/types/ic_sns_ledger.rs
+++ a/rs/sns_aggregator/src/types/ic_sns_ledger.rs
@@ -3,12 +3,12 @@
 #![allow(non_camel_case_types)]
 #![allow(dead_code)]
 
-use crate::types::{CandidType, Deserialize, Serialize, EmptyRecord};
+use crate::types::{CandidType, Deserialize, Serialize};
 use ic_cdk::api::call::CallResult;
 // This is an experimental feature to generate Rust binding from Candid.
 // You may want to manually adjust some of the types.
-// use candid::{self, CandidType, Deserialize, Serialize, Clone, Debug, candid::Principal};
-// use ic_cdk::api::call::CallResult as Result;
+// use candid::{self, CandidType, Deserialize, Serialize, Clone, Debug};
+// use ic_cdk::api::call::CallResult;
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
 pub enum MetadataValue {
@@ -93,23 +93,21 @@ pub struct BlockRange {
     pub blocks: Vec<Block>,
 }
 
-candid::define_function!(pub QueryBlockArchiveFn : (GetBlocksArgs) -> (
-    BlockRange,
-  ) query);
-#[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
-pub struct GetBlocksResponse_archived_blocks_item {
+pub type QueryBlockArchiveFn = candid::Func;
+#[derive(CandidType, Deserialize)]
+pub struct GetBlocksResponse_archived_blocks_inner {
     pub callback: QueryBlockArchiveFn,
     pub start: BlockIndex,
     pub length: candid::Nat,
 }
 
-#[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
+#[derive(CandidType, Deserialize)]
 pub struct GetBlocksResponse {
     pub certificate: Option<serde_bytes::ByteBuf>,
     pub first_index: BlockIndex,
     pub blocks: Vec<Block>,
     pub chain_length: u64,
-    pub archived_blocks: Vec<GetBlocksResponse_archived_blocks_item>,
+    pub archived_blocks: Vec<GetBlocksResponse_archived_blocks_inner>,
 }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
@@ -165,27 +163,25 @@ pub struct TransactionRange {
     pub transactions: Vec<Transaction>,
 }
 
-candid::define_function!(pub QueryArchiveFn : (GetTransactionsRequest) -> (
-    TransactionRange,
-  ) query);
-#[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
-pub struct GetTransactionsResponse_archived_transactions_item {
+pub type QueryArchiveFn = candid::Func;
+#[derive(CandidType, Deserialize)]
+pub struct GetTransactionsResponse_archived_transactions_inner {
     pub callback: QueryArchiveFn,
     pub start: TxIndex,
     pub length: candid::Nat,
 }
 
-#[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
+#[derive(CandidType, Deserialize)]
 pub struct GetTransactionsResponse {
     pub first_index: TxIndex,
     pub log_length: candid::Nat,
     pub transactions: Vec<Transaction>,
-    pub archived_transactions: Vec<GetTransactionsResponse_archived_transactions_item>,
+    pub archived_transactions: Vec<GetTransactionsResponse_archived_transactions_inner>,
 }
 
 pub type Tokens = candid::Nat;
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
-pub struct icrc1_supported_standards_ret0_item {
+pub struct icrc1_supported_standards_ret0_inner {
     pub url: String,
     pub name: String,
 }
@@ -248,7 +244,7 @@ impl SERVICE {
     pub async fn icrc1_name(&self) -> CallResult<(String,)> {
         ic_cdk::call(self.0, "icrc1_name", ()).await
     }
-    pub async fn icrc1_supported_standards(&self) -> CallResult<(Vec<icrc1_supported_standards_ret0_item>,)> {
+    pub async fn icrc1_supported_standards(&self) -> CallResult<(Vec<icrc1_supported_standards_ret0_inner>,)> {
         ic_cdk::call(self.0, "icrc1_supported_standards", ()).await
     }
     pub async fn icrc1_symbol(&self) -> CallResult<(String,)> {
