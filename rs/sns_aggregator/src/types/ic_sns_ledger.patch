diff --git b/rs/sns_aggregator/src/types/ic_sns_ledger.rs a/rs/sns_aggregator/src/types/ic_sns_ledger.rs
index 8b7243de1..f5baada32 100644
--- b/rs/sns_aggregator/src/types/ic_sns_ledger.rs
+++ a/rs/sns_aggregator/src/types/ic_sns_ledger.rs
@@ -4,7 +4,7 @@
 #![allow(non_camel_case_types)]
 #![allow(dead_code)]
 
-use crate::types::{CandidType, Deserialize, Serialize, EmptyRecord};
+use crate::types::{CandidType, Deserialize, Serialize};
 use ic_cdk::api::call::CallResult;
 // This is an experimental feature to generate Rust binding from Candid.
 // You may want to manually adjust some of the types.
@@ -81,14 +81,14 @@ pub type Block = Box<Value>;
 pub struct BlockRange { blocks: Vec<Block> }
 
 pub type QueryBlockArchiveFn = candid::Func;
-#[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
+#[derive(CandidType, Deserialize)]
 pub struct GetBlocksResponse_archived_blocks_inner {
   pub  callback: QueryBlockArchiveFn,
   pub  start: BlockIndex,
   pub  length: candid::Nat,
 }
 
-#[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
+#[derive(CandidType, Deserialize)]
 pub struct GetBlocksResponse {
   pub  certificate: Option<Vec<u8>>,
   pub  first_index: BlockIndex,
@@ -143,14 +143,14 @@ pub struct Transaction {
 pub struct TransactionRange { transactions: Vec<Transaction> }
 
 pub type QueryArchiveFn = candid::Func;
-#[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
+#[derive(CandidType, Deserialize)]
 pub struct GetTransactionsResponse_archived_transactions_inner {
   pub  callback: QueryArchiveFn,
   pub  start: TxIndex,
   pub  length: candid::Nat,
 }
 
-#[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
+#[derive(CandidType, Deserialize)]
 pub struct GetTransactionsResponse {
   pub  first_index: TxIndex,
   pub  log_length: candid::Nat,
