diff --git b/rs/sns_aggregator/src/types/ic_sns_ledger.rs a/rs/sns_aggregator/src/types/ic_sns_ledger.rs
index 4a838dd16..be57b827d 100644
--- b/rs/sns_aggregator/src/types/ic_sns_ledger.rs
+++ a/rs/sns_aggregator/src/types/ic_sns_ledger.rs
@@ -8,8 +8,7 @@ use crate::types::{CandidType, Deserialize, EmptyRecord, Serialize};
 use ic_cdk::api::call::CallResult;
 // This is an experimental feature to generate Rust binding from Candid.
 // You may want to manually adjust some of the types.
-#![allow(dead_code, unused_imports)]
-// use candid::{self, CandidType, Decode, Deserialize, Serialize, Clone, Debug, Encode, candid::Principal};
+// use candid::{self, CandidType, Deserialize, Serialize, Clone, Debug, candid::Principal};
 // use ic_cdk::api::call::CallResult as Result;
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
@@ -96,17 +95,15 @@ pub struct BlockRange {
     pub blocks: Vec<Block>,
 }
 
-candid::define_function!(pub QueryBlockArchiveFn : (GetBlocksArgs) -> (
-    BlockRange,
-  ) query);
-#[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
+pub type QueryBlockArchiveFn = candid::Func;
+#[derive(CandidType, Deserialize)]
 pub struct GetBlocksResponseArchivedBlocksItem {
     pub callback: QueryBlockArchiveFn,
     pub start: BlockIndex,
     pub length: candid::Nat,
 }
 
-#[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
+#[derive(CandidType, Deserialize)]
 pub struct GetBlocksResponse {
     pub certificate: Option<serde_bytes::ByteBuf>,
     pub first_index: BlockIndex,
@@ -168,17 +165,15 @@ pub struct TransactionRange {
     pub transactions: Vec<Transaction>,
 }
 
-candid::define_function!(pub QueryArchiveFn : (GetTransactionsRequest) -> (
-    TransactionRange,
-  ) query);
-#[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
+pub type QueryArchiveFn = candid::Func;
+#[derive(CandidType, Deserialize)]
 pub struct GetTransactionsResponseArchivedTransactionsItem {
     pub callback: QueryArchiveFn,
     pub start: TxIndex,
     pub length: candid::Nat,
 }
 
-#[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
+#[derive(CandidType, Deserialize)]
 pub struct GetTransactionsResponse {
     pub first_index: TxIndex,
     pub log_length: candid::Nat,
@@ -233,34 +228,34 @@ impl Service {
     pub async fn get_transactions(&self, arg0: GetTransactionsRequest) -> CallResult<(GetTransactionsResponse,)> {
         ic_cdk::call(self.0, "get_transactions", (arg0,)).await
     }
-    pub async fn icrc_1_balance_of(&self, arg0: Account) -> CallResult<(Tokens,)> {
+    pub async fn icrc1_balance_of(&self, arg0: Account) -> CallResult<(Tokens,)> {
         ic_cdk::call(self.0, "icrc1_balance_of", (arg0,)).await
     }
-    pub async fn icrc_1_decimals(&self) -> CallResult<(u8,)> {
+    pub async fn icrc1_decimals(&self) -> CallResult<(u8,)> {
         ic_cdk::call(self.0, "icrc1_decimals", ()).await
     }
-    pub async fn icrc_1_fee(&self) -> CallResult<(Tokens,)> {
+    pub async fn icrc1_fee(&self) -> CallResult<(Tokens,)> {
         ic_cdk::call(self.0, "icrc1_fee", ()).await
     }
-    pub async fn icrc_1_metadata(&self) -> CallResult<(Vec<(String, MetadataValue)>,)> {
+    pub async fn icrc1_metadata(&self) -> CallResult<(Vec<(String, MetadataValue)>,)> {
         ic_cdk::call(self.0, "icrc1_metadata", ()).await
     }
-    pub async fn icrc_1_minting_account(&self) -> CallResult<(Option<Account>,)> {
+    pub async fn icrc1_minting_account(&self) -> CallResult<(Option<Account>,)> {
         ic_cdk::call(self.0, "icrc1_minting_account", ()).await
     }
-    pub async fn icrc_1_name(&self) -> CallResult<(String,)> {
+    pub async fn icrc1_name(&self) -> CallResult<(String,)> {
         ic_cdk::call(self.0, "icrc1_name", ()).await
     }
-    pub async fn icrc_1_supported_standards(&self) -> CallResult<(Vec<Icrc1SupportedStandardsRetItem>,)> {
+    pub async fn icrc1_supported_standards(&self) -> CallResult<(Vec<Icrc1SupportedStandardsRetItem>,)> {
         ic_cdk::call(self.0, "icrc1_supported_standards", ()).await
     }
-    pub async fn icrc_1_symbol(&self) -> CallResult<(String,)> {
+    pub async fn icrc1_symbol(&self) -> CallResult<(String,)> {
         ic_cdk::call(self.0, "icrc1_symbol", ()).await
     }
-    pub async fn icrc_1_total_supply(&self) -> CallResult<(Tokens,)> {
+    pub async fn icrc1_total_supply(&self) -> CallResult<(Tokens,)> {
         ic_cdk::call(self.0, "icrc1_total_supply", ()).await
     }
-    pub async fn icrc_1_transfer(&self, arg0: TransferArg) -> CallResult<(TransferResult,)> {
+    pub async fn icrc1_transfer(&self, arg0: TransferArg) -> CallResult<(TransferResult,)> {
         ic_cdk::call(self.0, "icrc1_transfer", (arg0,)).await
     }
 }
