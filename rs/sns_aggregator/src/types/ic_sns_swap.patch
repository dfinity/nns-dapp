diff --git b/rs/sns_aggregator/src/types/ic_sns_swap.rs a/rs/sns_aggregator/src/types/ic_sns_swap.rs
index b1cfb799f..b373161c8 100644
--- b/rs/sns_aggregator/src/types/ic_sns_swap.rs
+++ a/rs/sns_aggregator/src/types/ic_sns_swap.rs
@@ -4,17 +4,17 @@
 #![allow(non_camel_case_types)]
 #![allow(dead_code)]
 
-use crate::types::{CandidType, Deserialize, Serialize, EmptyRecord};
+use crate::types::{CandidType, Deserialize, Serialize};
 use ic_cdk::api::call::CallResult;
 // This is an experimental feature to generate Rust binding from Candid.
 // You may want to manually adjust some of the types.
-// use candid::{self, CandidType, Deserialize, Serialize, Clone, Debug, Principal};
-// use ic_cdk::api::call::CallResult as Result;
+// use candid::{self, CandidType, Deserialize, Serialize, Clone, Debug};
+// use ic_cdk::api::call::CallResult;
 
-#[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
+#[derive(CandidType, Deserialize, Serialize, Clone, Debug, PartialEq)]
 pub struct Countries { iso_codes: Vec<String> }
 
-#[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
+#[derive(CandidType, Deserialize, Serialize, Clone, Debug, PartialEq)]
 pub struct Init {
   pub  sns_root_canister_id: String,
   pub  fallback_controller_principal_ids: Vec<String>,
@@ -29,7 +29,7 @@ pub struct Init {
 }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
-pub struct ErrorRefundIcpRequest { source_principal_id: Option<Principal> }
+pub struct ErrorRefundIcpRequest { source_principal_id: Option<candid::Principal> }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
 pub struct Ok { block_height: Option<u64> }
@@ -52,7 +52,7 @@ pub struct CanisterCallError { code: Option<i32>, description: String }
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
 pub struct FailedUpdate {
   pub  err: Option<CanisterCallError>,
-  pub  dapp_canister_id: Option<Principal>,
+  pub  dapp_canister_id: Option<candid::Principal>,
 }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
@@ -79,7 +79,7 @@ pub struct SettleCommunityFundParticipationResult {
 }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
-pub enum Possibility_2 { Ok{}, Err(CanisterCallError) }
+pub enum Possibility_2 { Ok, Err(CanisterCallError) }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
 pub struct SetModeCallResult { possibility: Option<Possibility_2> }
@@ -107,7 +107,7 @@ pub struct FinalizeSwapResponse {
 }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
-pub struct GetBuyerStateRequest { principal_id: Option<Principal> }
+pub struct GetBuyerStateRequest { principal_id: Option<candid::Principal> }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
 pub struct TransferableAmount {
@@ -138,16 +138,16 @@ pub enum CanisterStatusType { stopped, stopping, running }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
 pub struct DefiniteCanisterSettingsArgs {
-  pub  controller: Principal,
+  pub  controller: candid::Principal,
   pub  freezing_threshold: candid::Nat,
-  pub  controllers: Vec<Principal>,
+  pub  controllers: Vec<candid::Principal>,
   pub  memory_allocation: candid::Nat,
   pub  compute_allocation: candid::Nat,
 }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
 pub struct CanisterStatusResultV2 {
-  pub  controller: Principal,
+  pub  controller: candid::Principal,
   pub  status: CanisterStatusType,
   pub  freezing_threshold: candid::Nat,
   pub  balance: Vec<(serde_bytes::ByteBuf,candid::Nat,)>,
@@ -190,7 +190,7 @@ pub struct get_open_ticket_arg0 {}
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
 pub struct Icrc1Account {
-  pub  owner: Option<Principal>,
+  pub  owner: Option<candid::Principal>,
   pub  subaccount: Option<serde_bytes::ByteBuf>,
 }
 
@@ -217,13 +217,13 @@ pub struct GetOpenTicketResponse { result: Option<Result_1> }
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
 pub struct get_sale_parameters_arg0 {}
 
-#[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
+#[derive(CandidType, Deserialize, Serialize, Clone, Debug, PartialEq)]
 pub struct NeuronBasketConstructionParameters {
   pub  dissolve_delay_interval_seconds: u64,
   pub  count: u64,
 }
 
-#[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
+#[derive(CandidType, Deserialize, Serialize, Clone, Debug, PartialEq)]
 pub struct Params {
   pub  min_participant_icp_e8s: u64,
   pub  neuron_basket_construction_parameters: Option<
@@ -302,11 +302,8 @@ pub struct DerivedState {
   pub  cf_neuron_count: Option<u64>,
 }
 
-#[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
-pub struct GetStateResponse {
-  pub  swap: Option<Swap>,
-  pub  derived: Option<DerivedState>,
-}
+#[derive(CandidType, Deserialize, Serialize, Clone, Debug, Default)]
+pub struct GetStateResponse { pub swap: Option<Swap>, pub derived: Option<DerivedState> }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
 pub struct ListCommunityFundParticipantsRequest {
@@ -320,36 +317,25 @@ pub struct ListCommunityFundParticipantsResponse {
 }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
-pub struct ListDirectParticipantsRequest {
-  pub  offset: Option<u32>,
-  pub  limit: Option<u32>,
-}
+pub struct ListDirectParticipantsRequest { offset: Option<u32>, limit: Option<u32> }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
 pub struct Participant {
   pub  participation: Option<BuyerState>,
-  pub  participant_id: Option<Principal>,
+  pub  participant_id: Option<candid::Principal>,
 }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
 pub struct ListDirectParticipantsResponse { participants: Vec<Participant> }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
-pub struct ListSnsNeuronRecipesRequest {
-  pub  offset: Option<u64>,
-  pub  limit: Option<u32>,
-}
+pub struct ListSnsNeuronRecipesRequest { offset: Option<u64>, limit: Option<u32> }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
-pub struct ListSnsNeuronRecipesResponse {
-  pub  sns_neuron_recipes: Vec<SnsNeuronRecipe>,
-}
+pub struct ListSnsNeuronRecipesResponse { sns_neuron_recipes: Vec<SnsNeuronRecipe> }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
-pub struct NewSaleTicketRequest {
-  pub  subaccount: Option<serde_bytes::ByteBuf>,
-  pub  amount_icp_e8s: u64,
-}
+pub struct NewSaleTicketRequest { subaccount: Option<serde_bytes::ByteBuf>, amount_icp_e8s: u64 }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
 pub struct InvalidUserAmount {
@@ -398,29 +384,38 @@ pub struct RefreshBuyerTokensResponse {
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
 pub struct restore_dapp_controllers_arg0 {}
 
-pub struct SERVICE(pub Principal);
-impl SERVICE {
-  pub async fn error_refund_icp(&self, arg0: ErrorRefundIcpRequest) -> CallResult<
-    (ErrorRefundIcpResponse,)
-  > { ic_cdk::call(self.0, "error_refund_icp", (arg0,)).await }
+pub struct SERVICE(pub candid::Principal);
+impl SERVICE{
+  pub async fn error_refund_icp(
+    &self,
+    arg0: ErrorRefundIcpRequest,
+  ) -> CallResult<(ErrorRefundIcpResponse,)> {
+    ic_cdk::call(self.0, "error_refund_icp", (arg0,)).await
+  }
   pub async fn finalize_swap(&self, arg0: finalize_swap_arg0) -> CallResult<
     (FinalizeSwapResponse,)
   > { ic_cdk::call(self.0, "finalize_swap", (arg0,)).await }
   pub async fn get_buyer_state(&self, arg0: GetBuyerStateRequest) -> CallResult<
     (GetBuyerStateResponse,)
   > { ic_cdk::call(self.0, "get_buyer_state", (arg0,)).await }
-  pub async fn get_buyers_total(&self, arg0: get_buyers_total_arg0) -> CallResult<
-    (GetBuyersTotalResponse,)
-  > { ic_cdk::call(self.0, "get_buyers_total", (arg0,)).await }
+  pub async fn get_buyers_total(
+    &self,
+    arg0: get_buyers_total_arg0,
+  ) -> CallResult<(GetBuyersTotalResponse,)> {
+    ic_cdk::call(self.0, "get_buyers_total", (arg0,)).await
+  }
   pub async fn get_canister_status(
     &self,
     arg0: get_canister_status_arg0,
   ) -> CallResult<(CanisterStatusResultV2,)> {
     ic_cdk::call(self.0, "get_canister_status", (arg0,)).await
   }
-  pub async fn get_derived_state(&self, arg0: get_derived_state_arg0) -> CallResult<
-    (GetDerivedStateResponse,)
-  > { ic_cdk::call(self.0, "get_derived_state", (arg0,)).await }
+  pub async fn get_derived_state(
+    &self,
+    arg0: get_derived_state_arg0,
+  ) -> CallResult<(GetDerivedStateResponse,)> {
+    ic_cdk::call(self.0, "get_derived_state", (arg0,)).await
+  }
   pub async fn get_init(&self, arg0: get_init_arg0) -> CallResult<
     (GetInitResponse,)
   > { ic_cdk::call(self.0, "get_init", (arg0,)).await }
@@ -482,4 +477,3 @@ impl SERVICE {
     ic_cdk::call(self.0, "restore_dapp_controllers", (arg0,)).await
   }
 }
-
