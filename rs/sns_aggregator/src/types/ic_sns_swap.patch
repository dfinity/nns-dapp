diff --git b/rs/sns_aggregator/src/types/ic_sns_swap.rs a/rs/sns_aggregator/src/types/ic_sns_swap.rs
index 1d3d0ca6f..e3ead446f 100644
--- b/rs/sns_aggregator/src/types/ic_sns_swap.rs
+++ a/rs/sns_aggregator/src/types/ic_sns_swap.rs
@@ -8,39 +8,38 @@ use crate::types::{CandidType, Deserialize, EmptyRecord, Serialize};
 use ic_cdk::api::call::CallResult;
 // This is an experimental feature to generate Rust binding from Candid.
 // You may want to manually adjust some of the types.
-#![allow(dead_code, unused_imports)]
-// use candid::{self, CandidType, Decode, Deserialize, Serialize, Clone, Debug, Encode, candid::Principal};
+// use candid::{self, CandidType, Deserialize, Serialize, Clone, Debug, candid::Principal};
 // use ic_cdk::api::call::CallResult as Result;
 
-#[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
+#[derive(CandidType, Deserialize, Serialize, Clone, Debug, PartialEq)]
 pub struct NeuronBasketConstructionParameters {
     pub dissolve_delay_interval_seconds: u64,
     pub count: u64,
 }
 
-#[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
+#[derive(CandidType, Deserialize, Serialize, Clone, Debug, PartialEq)]
 pub struct CfNeuron {
     pub nns_neuron_id: u64,
     pub amount_icp_e8s: u64,
 }
 
-#[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
+#[derive(CandidType, Deserialize, Serialize, Clone, Debug, PartialEq)]
 pub struct CfParticipant {
     pub hotkey_principal: String,
     pub cf_neurons: Vec<CfNeuron>,
 }
 
-#[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
+#[derive(CandidType, Deserialize, Serialize, Clone, Debug, PartialEq)]
 pub struct NeuronsFundParticipants {
     pub cf_participants: Vec<CfParticipant>,
 }
 
-#[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
+#[derive(CandidType, Deserialize, Serialize, Clone, Debug, PartialEq)]
 pub struct Countries {
     pub iso_codes: Vec<String>,
 }
 
-#[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
+#[derive(CandidType, Deserialize, Serialize, Clone, Debug, PartialEq)]
 pub struct Init {
     pub nns_proposal_id: Option<u64>,
     pub sns_root_canister_id: String,
@@ -148,7 +147,7 @@ pub struct SettleCommunityFundParticipationResult {
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
 pub enum Possibility2 {
-    Ok(EmptyRecord),
+    Ok,
     Err(CanisterCallError),
 }
 
@@ -308,9 +307,9 @@ pub struct GetOpenTicketResponse {
 }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
-pub struct GetSaleParametersArg {}
+pub struct get_sale_parameters_arg0 {}
 
-#[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
+#[derive(CandidType, Deserialize, Serialize, Clone, Debug, PartialEq)]
 pub struct Params {
     pub min_participant_icp_e8s: u64,
     pub neuron_basket_construction_parameters: Option<NeuronBasketConstructionParameters>,
@@ -394,7 +393,7 @@ pub struct DerivedState {
     pub cf_neuron_count: Option<u64>,
 }
 
-#[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
+#[derive(CandidType, Deserialize, Serialize, Clone, Debug, Default)]
 pub struct GetStateResponse {
     pub swap: Option<Swap>,
     pub derived: Option<DerivedState>,
@@ -447,7 +446,7 @@ pub struct InvalidUserAmount {
 }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
-pub struct Err2 {
+pub struct Err_2 {
     pub invalid_user_amount: Option<InvalidUserAmount>,
     pub existing_ticket: Option<Ticket>,
     pub error_type: i32,
@@ -456,7 +455,7 @@ pub struct Err2 {
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
 pub enum Result2 {
     Ok(Ok1),
-    Err(Err2),
+    Err(Err_2),
 }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
@@ -465,7 +464,7 @@ pub struct NewSaleTicketResponse {
 }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
-pub struct NotifyPaymentFailureArg {}
+pub struct notify_payment_failure_arg0 {}
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
 pub struct OpenRequest {
@@ -475,7 +474,7 @@ pub struct OpenRequest {
 }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
-pub struct OpenRet {}
+pub struct open_ret0 {}
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
 pub struct RefreshBuyerTokensRequest {
@@ -490,77 +489,83 @@ pub struct RefreshBuyerTokensResponse {
 }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
-pub struct RestoreDappControllersArg {}
+pub struct restore_dapp_controllers_arg0 {}
 
-pub struct Service(pub candid::Principal);
-impl Service {
-    pub async fn error_refund_icp(&self, arg0: ErrorRefundIcpRequest) -> Result<(ErrorRefundIcpResponse,)> {
+pub struct SERVICE(pub candid::Principal);
+impl SERVICE {
+    pub async fn error_refund_icp(&self, arg0: ErrorRefundIcpRequest) -> CallResult<(ErrorRefundIcpResponse,)> {
         ic_cdk::call(self.0, "error_refund_icp", (arg0,)).await
     }
-    pub async fn finalize_swap(&self, arg0: FinalizeSwapArg) -> Result<(FinalizeSwapResponse,)> {
+    pub async fn finalize_swap(&self, arg0: FinalizeSwapArg) -> CallResult<(FinalizeSwapResponse,)> {
         ic_cdk::call(self.0, "finalize_swap", (arg0,)).await
     }
-    pub async fn get_buyer_state(&self, arg0: GetBuyerStateRequest) -> Result<(GetBuyerStateResponse,)> {
+    pub async fn get_buyer_state(&self, arg0: GetBuyerStateRequest) -> CallResult<(GetBuyerStateResponse,)> {
         ic_cdk::call(self.0, "get_buyer_state", (arg0,)).await
     }
-    pub async fn get_buyers_total(&self, arg0: GetBuyersTotalArg) -> Result<(GetBuyersTotalResponse,)> {
+    pub async fn get_buyers_total(&self, arg0: GetBuyersTotalArg) -> CallResult<(GetBuyersTotalResponse,)> {
         ic_cdk::call(self.0, "get_buyers_total", (arg0,)).await
     }
-    pub async fn get_canister_status(&self, arg0: GetCanisterStatusArg) -> Result<(CanisterStatusResultV2,)> {
+    pub async fn get_canister_status(&self, arg0: GetCanisterStatusArg) -> CallResult<(CanisterStatusResultV2,)> {
         ic_cdk::call(self.0, "get_canister_status", (arg0,)).await
     }
-    pub async fn get_derived_state(&self, arg0: GetDerivedStateArg) -> Result<(GetDerivedStateResponse,)> {
+    pub async fn get_derived_state(&self, arg0: GetDerivedStateArg) -> CallResult<(GetDerivedStateResponse,)> {
         ic_cdk::call(self.0, "get_derived_state", (arg0,)).await
     }
-    pub async fn get_init(&self, arg0: GetInitArg) -> Result<(GetInitResponse,)> {
+    pub async fn get_init(&self, arg0: GetInitArg) -> CallResult<(GetInitResponse,)> {
         ic_cdk::call(self.0, "get_init", (arg0,)).await
     }
-    pub async fn get_lifecycle(&self, arg0: GetLifecycleArg) -> Result<(GetLifecycleResponse,)> {
+    pub async fn get_lifecycle(&self, arg0: GetLifecycleArg) -> CallResult<(GetLifecycleResponse,)> {
         ic_cdk::call(self.0, "get_lifecycle", (arg0,)).await
     }
-    pub async fn get_open_ticket(&self, arg0: GetOpenTicketArg) -> Result<(GetOpenTicketResponse,)> {
+    pub async fn get_open_ticket(&self, arg0: GetOpenTicketArg) -> CallResult<(GetOpenTicketResponse,)> {
         ic_cdk::call(self.0, "get_open_ticket", (arg0,)).await
     }
-    pub async fn get_sale_parameters(&self, arg0: GetSaleParametersArg) -> Result<(GetSaleParametersResponse,)> {
+    pub async fn get_sale_parameters(
+        &self,
+        arg0: get_sale_parameters_arg0,
+    ) -> CallResult<(GetSaleParametersResponse,)> {
         ic_cdk::call(self.0, "get_sale_parameters", (arg0,)).await
     }
-    pub async fn get_state(&self, arg0: GetStateArg) -> Result<(GetStateResponse,)> {
+    pub async fn get_state(&self, arg0: GetStateArg) -> CallResult<(GetStateResponse,)> {
         ic_cdk::call(self.0, "get_state", (arg0,)).await
     }
     pub async fn list_community_fund_participants(
         &self,
         arg0: ListCommunityFundParticipantsRequest,
-    ) -> Result<(NeuronsFundParticipants,)> {
+    ) -> CallResult<(NeuronsFundParticipants,)> {
         ic_cdk::call(self.0, "list_community_fund_participants", (arg0,)).await
     }
     pub async fn list_direct_participants(
         &self,
         arg0: ListDirectParticipantsRequest,
-    ) -> Result<(ListDirectParticipantsResponse,)> {
+    ) -> CallResult<(ListDirectParticipantsResponse,)> {
         ic_cdk::call(self.0, "list_direct_participants", (arg0,)).await
     }
     pub async fn list_sns_neuron_recipes(
         &self,
         arg0: ListSnsNeuronRecipesRequest,
-    ) -> Result<(ListSnsNeuronRecipesResponse,)> {
+    ) -> CallResult<(ListSnsNeuronRecipesResponse,)> {
         ic_cdk::call(self.0, "list_sns_neuron_recipes", (arg0,)).await
     }
-    pub async fn new_sale_ticket(&self, arg0: NewSaleTicketRequest) -> Result<(NewSaleTicketResponse,)> {
+    pub async fn new_sale_ticket(&self, arg0: NewSaleTicketRequest) -> CallResult<(NewSaleTicketResponse,)> {
         ic_cdk::call(self.0, "new_sale_ticket", (arg0,)).await
     }
-    pub async fn notify_payment_failure(&self, arg0: NotifyPaymentFailureArg) -> Result<(Ok1,)> {
+    pub async fn notify_payment_failure(&self, arg0: notify_payment_failure_arg0) -> CallResult<(Ok1,)> {
         ic_cdk::call(self.0, "notify_payment_failure", (arg0,)).await
     }
-    pub async fn open(&self, arg0: OpenRequest) -> Result<(OpenRet,)> {
+    pub async fn open(&self, arg0: OpenRequest) -> CallResult<(open_ret0,)> {
         ic_cdk::call(self.0, "open", (arg0,)).await
     }
-    pub async fn refresh_buyer_tokens(&self, arg0: RefreshBuyerTokensRequest) -> Result<(RefreshBuyerTokensResponse,)> {
+    pub async fn refresh_buyer_tokens(
+        &self,
+        arg0: RefreshBuyerTokensRequest,
+    ) -> CallResult<(RefreshBuyerTokensResponse,)> {
         ic_cdk::call(self.0, "refresh_buyer_tokens", (arg0,)).await
     }
     pub async fn restore_dapp_controllers(
         &self,
-        arg0: RestoreDappControllersArg,
-    ) -> Result<(SetDappControllersCallResult,)> {
+        arg0: restore_dapp_controllers_arg0,
+    ) -> CallResult<(SetDappControllersCallResult,)> {
         ic_cdk::call(self.0, "restore_dapp_controllers", (arg0,)).await
     }
 }
