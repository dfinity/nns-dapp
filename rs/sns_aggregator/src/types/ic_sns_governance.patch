diff --git b/rs/sns_aggregator/src/types/ic_sns_governance.rs a/rs/sns_aggregator/src/types/ic_sns_governance.rs
index 8a23bc900..aefbadcc6 100644
--- b/rs/sns_aggregator/src/types/ic_sns_governance.rs
+++ a/rs/sns_aggregator/src/types/ic_sns_governance.rs
@@ -8,8 +8,7 @@ use crate::types::{CandidType, Deserialize, EmptyRecord, Serialize};
 use ic_cdk::api::call::CallResult;
 // This is an experimental feature to generate Rust binding from Candid.
 // You may want to manually adjust some of the types.
-#![allow(dead_code, unused_imports)]
-// use candid::{self, CandidType, Decode, Deserialize, Serialize, Clone, Debug, Encode, candid::Principal};
+// use candid::{self, CandidType, Deserialize, Serialize, Clone, Debug, candid::Principal};
 // use ic_cdk::api::call::CallResult as Result;
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
@@ -501,7 +500,7 @@ pub struct ClaimSwapNeuronsResponse {
 }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
-pub struct FailStuckUpgradeInProgressArg {}
+pub struct fail_stuck_upgrade_in_progress_arg0 {}
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
 pub struct FailStuckUpgradeInProgressRet {}
@@ -517,7 +516,7 @@ pub struct GetMaturityModulationResponse {
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
 pub struct GetMetadataArg {}
 
-#[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
+#[derive(CandidType, Deserialize, Serialize, Clone, Debug, Default)]
 pub struct GetMetadataResponse {
     pub url: Option<String>,
     pub logo: Option<String>,
@@ -539,14 +538,14 @@ pub struct GetNeuron {
 }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
-pub enum Result_ {
+pub enum Result {
     Error(GovernanceError),
     Neuron(Neuron),
 }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
 pub struct GetNeuronResponse {
-    pub result: Option<Result_>,
+    pub result: Option<Result>,
 }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
@@ -555,24 +554,21 @@ pub struct GetProposal {
 }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
-pub enum Result1 {
+pub enum Result_1 {
     Error(GovernanceError),
     Proposal(ProposalData),
 }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
 pub struct GetProposalResponse {
-    pub result: Option<Result1>,
+    pub result: Option<Result_1>,
 }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
 pub enum CanisterStatusType {
-    #[serde(rename = "stopped")]
-    Stopped,
-    #[serde(rename = "stopping")]
-    Stopping,
-    #[serde(rename = "running")]
-    Running,
+    stopped,
+    stopping,
+    running,
 }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
@@ -594,7 +590,7 @@ pub struct CanisterStatusResultV2 {
 }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
-pub struct GetRunningSnsVersionArg {}
+pub struct get_running_sns_version_arg0 {}
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
 pub struct GetRunningSnsVersionResponse {
@@ -603,14 +599,14 @@ pub struct GetRunningSnsVersionResponse {
 }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
-pub struct GetSnsInitializationParametersArg {}
+pub struct get_sns_initialization_parameters_arg0 {}
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
 pub struct GetSnsInitializationParametersResponse {
     pub sns_initialization_parameters: String,
 }
 
-#[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
+#[derive(CandidType, Deserialize, Serialize, Clone, Debug, Default)]
 pub struct ListNervousSystemFunctionsResponse {
     pub reserved_ids: Vec<u64>,
     pub functions: Vec<NervousSystemFunction>,
@@ -702,7 +698,7 @@ pub struct DisburseResponse {
 }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
-pub enum Command1 {
+pub enum Command_1 {
     Error(GovernanceError),
     Split(SplitResponse),
     Follow(EmptyRecord),
@@ -720,7 +716,7 @@ pub enum Command1 {
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
 pub struct ManageNeuronResponse {
-    pub command: Option<Command1>,
+    pub command: Option<Command_1>,
 }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
@@ -729,74 +725,74 @@ pub struct SetMode {
 }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
-pub struct SetModeRet {}
+pub struct set_mode_ret0 {}
 
-pub struct Service(pub candid::Principal);
-impl Service {
-    pub async fn claim_swap_neurons(&self, arg0: ClaimSwapNeuronsRequest) -> Result<(ClaimSwapNeuronsResponse,)> {
+pub struct SERVICE(pub candid::Principal);
+impl SERVICE {
+    pub async fn claim_swap_neurons(&self, arg0: ClaimSwapNeuronsRequest) -> CallResult<(ClaimSwapNeuronsResponse,)> {
         ic_cdk::call(self.0, "claim_swap_neurons", (arg0,)).await
     }
     pub async fn fail_stuck_upgrade_in_progress(
         &self,
-        arg0: FailStuckUpgradeInProgressArg,
-    ) -> Result<(FailStuckUpgradeInProgressRet,)> {
+        arg0: fail_stuck_upgrade_in_progress_arg0,
+    ) -> CallResult<(FailStuckUpgradeInProgressRet,)> {
         ic_cdk::call(self.0, "fail_stuck_upgrade_in_progress", (arg0,)).await
     }
-    pub async fn get_build_metadata(&self) -> Result<(String,)> {
+    pub async fn get_build_metadata(&self) -> CallResult<(String,)> {
         ic_cdk::call(self.0, "get_build_metadata", ()).await
     }
-    pub async fn get_latest_reward_event(&self) -> Result<(RewardEvent,)> {
+    pub async fn get_latest_reward_event(&self) -> CallResult<(RewardEvent,)> {
         ic_cdk::call(self.0, "get_latest_reward_event", ()).await
     }
     pub async fn get_maturity_modulation(
         &self,
         arg0: GetMaturityModulationArg,
-    ) -> Result<(GetMaturityModulationResponse,)> {
+    ) -> CallResult<(GetMaturityModulationResponse,)> {
         ic_cdk::call(self.0, "get_maturity_modulation", (arg0,)).await
     }
-    pub async fn get_metadata(&self, arg0: GetMetadataArg) -> Result<(GetMetadataResponse,)> {
+    pub async fn get_metadata(&self, arg0: GetMetadataArg) -> CallResult<(GetMetadataResponse,)> {
         ic_cdk::call(self.0, "get_metadata", (arg0,)).await
     }
-    pub async fn get_mode(&self, arg0: GetModeArg) -> Result<(GetModeResponse,)> {
+    pub async fn get_mode(&self, arg0: GetModeArg) -> CallResult<(GetModeResponse,)> {
         ic_cdk::call(self.0, "get_mode", (arg0,)).await
     }
-    pub async fn get_nervous_system_parameters(&self, arg0: ()) -> Result<(NervousSystemParameters,)> {
+    pub async fn get_nervous_system_parameters(&self, arg0: ()) -> CallResult<(NervousSystemParameters,)> {
         ic_cdk::call(self.0, "get_nervous_system_parameters", (arg0,)).await
     }
-    pub async fn get_neuron(&self, arg0: GetNeuron) -> Result<(GetNeuronResponse,)> {
+    pub async fn get_neuron(&self, arg0: GetNeuron) -> CallResult<(GetNeuronResponse,)> {
         ic_cdk::call(self.0, "get_neuron", (arg0,)).await
     }
-    pub async fn get_proposal(&self, arg0: GetProposal) -> Result<(GetProposalResponse,)> {
+    pub async fn get_proposal(&self, arg0: GetProposal) -> CallResult<(GetProposalResponse,)> {
         ic_cdk::call(self.0, "get_proposal", (arg0,)).await
     }
-    pub async fn get_root_canister_status(&self, arg0: ()) -> Result<(CanisterStatusResultV2,)> {
+    pub async fn get_root_canister_status(&self, arg0: ()) -> CallResult<(CanisterStatusResultV2,)> {
         ic_cdk::call(self.0, "get_root_canister_status", (arg0,)).await
     }
     pub async fn get_running_sns_version(
         &self,
-        arg0: GetRunningSnsVersionArg,
-    ) -> Result<(GetRunningSnsVersionResponse,)> {
+        arg0: get_running_sns_version_arg0,
+    ) -> CallResult<(GetRunningSnsVersionResponse,)> {
         ic_cdk::call(self.0, "get_running_sns_version", (arg0,)).await
     }
     pub async fn get_sns_initialization_parameters(
         &self,
-        arg0: GetSnsInitializationParametersArg,
-    ) -> Result<(GetSnsInitializationParametersResponse,)> {
+        arg0: get_sns_initialization_parameters_arg0,
+    ) -> CallResult<(GetSnsInitializationParametersResponse,)> {
         ic_cdk::call(self.0, "get_sns_initialization_parameters", (arg0,)).await
     }
-    pub async fn list_nervous_system_functions(&self) -> Result<(ListNervousSystemFunctionsResponse,)> {
+    pub async fn list_nervous_system_functions(&self) -> CallResult<(ListNervousSystemFunctionsResponse,)> {
         ic_cdk::call(self.0, "list_nervous_system_functions", ()).await
     }
-    pub async fn list_neurons(&self, arg0: ListNeurons) -> Result<(ListNeuronsResponse,)> {
+    pub async fn list_neurons(&self, arg0: ListNeurons) -> CallResult<(ListNeuronsResponse,)> {
         ic_cdk::call(self.0, "list_neurons", (arg0,)).await
     }
-    pub async fn list_proposals(&self, arg0: ListProposals) -> Result<(ListProposalsResponse,)> {
+    pub async fn list_proposals(&self, arg0: ListProposals) -> CallResult<(ListProposalsResponse,)> {
         ic_cdk::call(self.0, "list_proposals", (arg0,)).await
     }
-    pub async fn manage_neuron(&self, arg0: ManageNeuron) -> Result<(ManageNeuronResponse,)> {
+    pub async fn manage_neuron(&self, arg0: ManageNeuron) -> CallResult<(ManageNeuronResponse,)> {
         ic_cdk::call(self.0, "manage_neuron", (arg0,)).await
     }
-    pub async fn set_mode(&self, arg0: SetMode) -> Result<(SetModeRet,)> {
+    pub async fn set_mode(&self, arg0: SetMode) -> CallResult<(set_mode_ret0,)> {
         ic_cdk::call(self.0, "set_mode", (arg0,)).await
     }
 }
