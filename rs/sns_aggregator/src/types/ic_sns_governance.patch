diff --git b/rs/sns_aggregator/src/types/ic_sns_governance.rs a/rs/sns_aggregator/src/types/ic_sns_governance.rs
index 69f5c1ff8..3c3a440de 100644
--- b/rs/sns_aggregator/src/types/ic_sns_governance.rs
+++ a/rs/sns_aggregator/src/types/ic_sns_governance.rs
@@ -8,8 +8,9 @@ use crate::types::{CandidType, Deserialize, Serialize, EmptyRecord};
 use ic_cdk::api::call::CallResult;
 // This is an experimental feature to generate Rust binding from Candid.
 // You may want to manually adjust some of the types.
-// use candid::{self, CandidType, Deserialize, Serialize, Clone, Debug, candid::Principal};
-// use ic_cdk::api::call::CallResult as Result;
+// use candid::{self, CandidType, Deserialize, Serialize, Clone, Debug};
+// use ic_cdk::api::call::CallResult;
+
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
 pub struct GenericNervousSystemFunction {
@@ -21,7 +22,7 @@ pub struct GenericNervousSystemFunction {
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
 pub enum FunctionType {
-  NativeNervousSystemFunction{},
+  NativeNervousSystemFunction(EmptyRecord),
   GenericNervousSystemFunction(GenericNervousSystemFunction),
 }
 
@@ -245,7 +246,10 @@ pub struct Split { memo: u64, amount_e8s: u64 }
 pub struct Follow { function_id: u64, followees: Vec<NeuronId> }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
-pub struct Account { owner: Option<candid::Principal>, subaccount: Option<Subaccount> }
+pub struct Account {
+  pub  owner: Option<candid::Principal>,
+  pub  subaccount: Option<Subaccount>,
+}
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
 pub struct DisburseMaturity {
@@ -286,10 +290,13 @@ pub struct FinalizeDisburseMaturity {
 }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
-pub struct MemoAndController { controller: Option<candid::Principal>, memo: u64 }
+pub struct MemoAndController {
+  pub  controller: Option<candid::Principal>,
+  pub  memo: u64,
+}
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
-pub enum By { MemoAndController(MemoAndController), NeuronId{} }
+pub enum By { MemoAndController(MemoAndController), NeuronId(EmptyRecord) }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
 pub struct ClaimOrRefresh { by: Option<By> }
@@ -440,7 +447,7 @@ pub struct GetMaturityModulationResponse {
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
 pub struct get_metadata_arg0 {}
 
-#[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
+#[derive(CandidType, Deserialize, Serialize, Clone, Debug, Default)]
 pub struct GetMetadataResponse {
   pub  url: Option<String>,
   pub  logo: Option<String>,
@@ -514,7 +521,7 @@ pub struct GetSnsInitializationParametersResponse {
   pub  sns_initialization_parameters: String,
 }
 
-#[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
+#[derive(CandidType, Deserialize, Serialize, Clone, Debug, Default)]
 pub struct ListNervousSystemFunctionsResponse {
   pub  reserved_ids: Vec<u64>,
   pub  functions: Vec<NervousSystemFunction>,
@@ -562,10 +569,7 @@ pub enum Command {
 }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
-pub struct ManageNeuron {
-  pub  subaccount: serde_bytes::ByteBuf,
-  pub  command: Option<Command>,
-}
+pub struct ManageNeuron { subaccount: serde_bytes::ByteBuf, command: Option<Command> }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
 pub struct SplitResponse { created_neuron_id: Option<NeuronId> }
@@ -615,7 +619,7 @@ pub struct SetMode { mode: i32 }
 pub struct set_mode_ret0 {}
 
 pub struct SERVICE(pub candid::Principal);
-impl SERVICE {
+impl SERVICE{
   pub async fn claim_swap_neurons(
     &self,
     arg0: ClaimSwapNeuronsRequest,
@@ -686,4 +690,3 @@ impl SERVICE {
     ic_cdk::call(self.0, "set_mode", (arg0,)).await
   }
 }
-
