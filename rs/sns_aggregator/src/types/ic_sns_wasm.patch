diff --git b/rs/sns_aggregator/src/types/ic_sns_wasm.rs a/rs/sns_aggregator/src/types/ic_sns_wasm.rs
index 4d2c3f61e..a8fc475ec 100644
--- b/rs/sns_aggregator/src/types/ic_sns_wasm.rs
+++ a/rs/sns_aggregator/src/types/ic_sns_wasm.rs
@@ -4,18 +4,18 @@
 #![allow(non_camel_case_types)]
 #![allow(dead_code)]
 
-use crate::types::{CandidType, Deserialize, Serialize, EmptyRecord};
+use crate::types::{CandidType, Deserialize, Serialize};
 use ic_cdk::api::call::CallResult;
 // This is an experimental feature to generate Rust binding from Candid.
 // You may want to manually adjust some of the types.
-// use candid::{self, CandidType, Deserialize, Serialize, Clone, Debug, Principal};
-// use ic_cdk::api::call::CallResult as Result;
+// use candid::{self, CandidType, Deserialize, Serialize, Clone, Debug};
+// use ic_cdk::api::call::CallResult;
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
 pub struct SnsWasmCanisterInitPayload {
-  pub  allowed_principals: Vec<Principal>,
+  pub  allowed_principals: Vec<candid::Principal>,
   pub  access_controls_enabled: bool,
-  pub  sns_subnet_ids: Vec<Principal>,
+  pub  sns_subnet_ids: Vec<candid::Principal>,
 }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
@@ -38,7 +38,7 @@ pub struct TreasuryDistribution { total_e8s: u64 }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
 pub struct NeuronDistribution {
-  pub  controller: Option<Principal>,
+  pub  controller: Option<candid::Principal>,
   pub  dissolve_delay_seconds: u64,
   pub  memo: u64,
   pub  stake_e8s: u64,
@@ -102,16 +102,16 @@ pub struct DeployNewSnsRequest { sns_init_payload: Option<SnsInitPayload> }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
 pub struct SnsCanisterIds {
-  pub  root: Option<Principal>,
-  pub  swap: Option<Principal>,
-  pub  ledger: Option<Principal>,
-  pub  index: Option<Principal>,
-  pub  governance: Option<Principal>,
+  pub  root: Option<candid::Principal>,
+  pub  swap: Option<candid::Principal>,
+  pub  ledger: Option<candid::Principal>,
+  pub  index: Option<candid::Principal>,
+  pub  governance: Option<candid::Principal>,
 }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
 pub struct DeployNewSnsResponse {
-  pub  subnet_id: Option<Principal>,
+  pub  subnet_id: Option<candid::Principal>,
   pub  error: Option<SnsWasmError>,
   pub  canisters: Option<SnsCanisterIds>,
 }
@@ -120,7 +120,9 @@ pub struct DeployNewSnsResponse {
 pub struct get_allowed_principals_arg0 {}
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
-pub struct GetAllowedPrincipalsResponse { allowed_principals: Vec<Principal> }
+pub struct GetAllowedPrincipalsResponse {
+  pub  allowed_principals: Vec<candid::Principal>,
+}
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
 pub struct SnsVersion {
@@ -134,7 +136,7 @@ pub struct SnsVersion {
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
 pub struct GetNextSnsVersionRequest {
-  pub  governance_canister_id: Option<Principal>,
+  pub  governance_canister_id: Option<candid::Principal>,
   pub  current_version: Option<SnsVersion>,
 }
 
@@ -145,7 +147,7 @@ pub struct GetNextSnsVersionResponse { next_version: Option<SnsVersion> }
 pub struct get_sns_subnet_ids_arg0 {}
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
-pub struct GetSnsSubnetIdsResponse { sns_subnet_ids: Vec<Principal> }
+pub struct GetSnsSubnetIdsResponse { sns_subnet_ids: Vec<candid::Principal> }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
 pub struct GetWasmRequest { hash: serde_bytes::ByteBuf }
@@ -162,7 +164,7 @@ pub struct SnsUpgrade {
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
 pub struct InsertUpgradePathEntriesRequest {
   pub  upgrade_path: Vec<SnsUpgrade>,
-  pub  sns_governance_canister_id: Option<Principal>,
+  pub  sns_governance_canister_id: Option<candid::Principal>,
 }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
@@ -171,23 +173,23 @@ pub struct InsertUpgradePathEntriesResponse { error: Option<SnsWasmError> }
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
 pub struct list_deployed_snses_arg0 {}
 
-#[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
+#[derive(CandidType, Deserialize, Serialize, Clone, Debug, Default)]
 pub struct DeployedSns {
-  pub  root_canister_id: Option<Principal>,
-  pub  governance_canister_id: Option<Principal>,
-  pub  index_canister_id: Option<Principal>,
-  pub  swap_canister_id: Option<Principal>,
-  pub  ledger_canister_id: Option<Principal>,
+  pub  root_canister_id: Option<candid::Principal>,
+  pub  governance_canister_id: Option<candid::Principal>,
+  pub  index_canister_id: Option<candid::Principal>,
+  pub  swap_canister_id: Option<candid::Principal>,
+  pub  ledger_canister_id: Option<candid::Principal>,
 }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
-pub struct ListDeployedSnsesResponse { instances: Vec<DeployedSns> }
+pub struct ListDeployedSnsesResponse { pub instances: Vec<DeployedSns> }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
 pub struct ListUpgradeStepsRequest {
   pub  limit: u32,
   pub  starting_at: Option<SnsVersion>,
-  pub  sns_governance_canister_id: Option<Principal>,
+  pub  sns_governance_canister_id: Option<candid::Principal>,
 }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
@@ -211,8 +213,8 @@ pub struct ListUpgradeStepsResponse { steps: Vec<ListUpgradeStep> }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
 pub struct UpdateAllowedPrincipalsRequest {
-  pub  added_principals: Vec<Principal>,
-  pub  removed_principals: Vec<Principal>,
+  pub  added_principals: Vec<candid::Principal>,
+  pub  removed_principals: Vec<candid::Principal>,
 }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
@@ -228,74 +230,73 @@ pub struct UpdateAllowedPrincipalsResponse {
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
 pub struct UpdateSnsSubnetListRequest {
-  pub  sns_subnet_ids_to_add: Vec<Principal>,
-  pub  sns_subnet_ids_to_remove: Vec<Principal>,
+  pub  sns_subnet_ids_to_add: Vec<candid::Principal>,
+  pub  sns_subnet_ids_to_remove: Vec<candid::Principal>,
 }
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
 pub struct UpdateSnsSubnetListResponse { error: Option<SnsWasmError> }
 
-pub struct SERVICE(pub Principal);
-impl SERVICE {
-  pub async fn add_wasm(&self, arg0: AddWasmRequest) -> Result<
+pub struct SERVICE(pub candid::Principal);
+impl SERVICE{
+  pub async fn add_wasm(&self, arg0: AddWasmRequest) -> CallResult<
     (AddWasmResponse,)
   > { ic_cdk::call(self.0, "add_wasm", (arg0,)).await }
-  pub async fn deploy_new_sns(&self, arg0: DeployNewSnsRequest) -> Result<
+  pub async fn deploy_new_sns(&self, arg0: DeployNewSnsRequest) -> CallResult<
     (DeployNewSnsResponse,)
   > { ic_cdk::call(self.0, "deploy_new_sns", (arg0,)).await }
   pub async fn get_allowed_principals(
     &self,
     arg0: get_allowed_principals_arg0,
-  ) -> Result<(GetAllowedPrincipalsResponse,)> {
+  ) -> CallResult<(GetAllowedPrincipalsResponse,)> {
     ic_cdk::call(self.0, "get_allowed_principals", (arg0,)).await
   }
-  pub async fn get_latest_sns_version_pretty(&self, arg0: ()) -> Result<
+  pub async fn get_latest_sns_version_pretty(&self, arg0: ()) -> CallResult<
     (Vec<(String,String,)>,)
   > { ic_cdk::call(self.0, "get_latest_sns_version_pretty", (arg0,)).await }
   pub async fn get_next_sns_version(
     &self,
     arg0: GetNextSnsVersionRequest,
-  ) -> Result<(GetNextSnsVersionResponse,)> {
+  ) -> CallResult<(GetNextSnsVersionResponse,)> {
     ic_cdk::call(self.0, "get_next_sns_version", (arg0,)).await
   }
   pub async fn get_sns_subnet_ids(
     &self,
     arg0: get_sns_subnet_ids_arg0,
-  ) -> Result<(GetSnsSubnetIdsResponse,)> {
+  ) -> CallResult<(GetSnsSubnetIdsResponse,)> {
     ic_cdk::call(self.0, "get_sns_subnet_ids", (arg0,)).await
   }
-  pub async fn get_wasm(&self, arg0: GetWasmRequest) -> Result<
+  pub async fn get_wasm(&self, arg0: GetWasmRequest) -> CallResult<
     (GetWasmResponse,)
   > { ic_cdk::call(self.0, "get_wasm", (arg0,)).await }
   pub async fn insert_upgrade_path_entries(
     &self,
     arg0: InsertUpgradePathEntriesRequest,
-  ) -> Result<(InsertUpgradePathEntriesResponse,)> {
+  ) -> CallResult<(InsertUpgradePathEntriesResponse,)> {
     ic_cdk::call(self.0, "insert_upgrade_path_entries", (arg0,)).await
   }
   pub async fn list_deployed_snses(
     &self,
     arg0: list_deployed_snses_arg0,
-  ) -> Result<(ListDeployedSnsesResponse,)> {
+  ) -> CallResult<(ListDeployedSnsesResponse,)> {
     ic_cdk::call(self.0, "list_deployed_snses", (arg0,)).await
   }
   pub async fn list_upgrade_steps(
     &self,
     arg0: ListUpgradeStepsRequest,
-  ) -> Result<(ListUpgradeStepsResponse,)> {
+  ) -> CallResult<(ListUpgradeStepsResponse,)> {
     ic_cdk::call(self.0, "list_upgrade_steps", (arg0,)).await
   }
   pub async fn update_allowed_principals(
     &self,
     arg0: UpdateAllowedPrincipalsRequest,
-  ) -> Result<(UpdateAllowedPrincipalsResponse,)> {
+  ) -> CallResult<(UpdateAllowedPrincipalsResponse,)> {
     ic_cdk::call(self.0, "update_allowed_principals", (arg0,)).await
   }
   pub async fn update_sns_subnet_list(
     &self,
     arg0: UpdateSnsSubnetListRequest,
-  ) -> Result<(UpdateSnsSubnetListResponse,)> {
+  ) -> CallResult<(UpdateSnsSubnetListResponse,)> {
     ic_cdk::call(self.0, "update_sns_subnet_list", (arg0,)).await
   }
 }
-
