diff --git b/rs/sns_aggregator/src/types/ic_sns_wasm.rs a/rs/sns_aggregator/src/types/ic_sns_wasm.rs
index d53e53516..3f42e2b8f 100644
--- b/rs/sns_aggregator/src/types/ic_sns_wasm.rs
+++ a/rs/sns_aggregator/src/types/ic_sns_wasm.rs
@@ -8,8 +8,7 @@ use crate::types::{CandidType, Deserialize, EmptyRecord, Serialize};
 use ic_cdk::api::call::CallResult;
 // This is an experimental feature to generate Rust binding from Candid.
 // You may want to manually adjust some of the types.
-#![allow(dead_code, unused_imports)]
-// use candid::{self, CandidType, Decode, Deserialize, Serialize, Clone, Debug, Encode, candid::Principal};
+// use candid::{self, CandidType, Deserialize, Serialize, Clone, Debug, candid::Principal};
 // use ic_cdk::api::call::CallResult as Result;
 
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
@@ -229,7 +228,7 @@ pub struct InsertUpgradePathEntriesResponse {
 #[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
 pub struct ListDeployedSnsesArg {}
 
-#[derive(CandidType, Deserialize, Serialize, Clone, Debug)]
+#[derive(CandidType, Deserialize, Serialize, Clone, Debug, Default)]
 pub struct DeployedSns {
     pub root_canister_id: Option<candid::Principal>,
     pub governance_canister_id: Option<candid::Principal>,
@@ -299,54 +298,60 @@ pub struct UpdateSnsSubnetListResponse {
     pub error: Option<SnsWasmError>,
 }
 
-pub struct Service(pub candid::Principal);
-impl Service {
-    pub async fn add_wasm(&self, arg0: AddWasmRequest) -> Result<(AddWasmResponse,)> {
+pub struct SERVICE(pub candid::Principal);
+impl SERVICE {
+    pub async fn add_wasm(&self, arg0: AddWasmRequest) -> CallResult<(AddWasmResponse,)> {
         ic_cdk::call(self.0, "add_wasm", (arg0,)).await
     }
-    pub async fn deploy_new_sns(&self, arg0: DeployNewSnsRequest) -> Result<(DeployNewSnsResponse,)> {
+    pub async fn deploy_new_sns(&self, arg0: DeployNewSnsRequest) -> CallResult<(DeployNewSnsResponse,)> {
         ic_cdk::call(self.0, "deploy_new_sns", (arg0,)).await
     }
     pub async fn get_allowed_principals(
         &self,
         arg0: GetAllowedPrincipalsArg,
-    ) -> Result<(GetAllowedPrincipalsResponse,)> {
+    ) -> CallResult<(GetAllowedPrincipalsResponse,)> {
         ic_cdk::call(self.0, "get_allowed_principals", (arg0,)).await
     }
-    pub async fn get_latest_sns_version_pretty(&self, arg0: ()) -> Result<(Vec<(String, String)>,)> {
+    pub async fn get_latest_sns_version_pretty(&self, arg0: ()) -> CallResult<(Vec<(String, String)>,)> {
         ic_cdk::call(self.0, "get_latest_sns_version_pretty", (arg0,)).await
     }
-    pub async fn get_next_sns_version(&self, arg0: GetNextSnsVersionRequest) -> Result<(GetNextSnsVersionResponse,)> {
+    pub async fn get_next_sns_version(
+        &self,
+        arg0: GetNextSnsVersionRequest,
+    ) -> CallResult<(GetNextSnsVersionResponse,)> {
         ic_cdk::call(self.0, "get_next_sns_version", (arg0,)).await
     }
-    pub async fn get_sns_subnet_ids(&self, arg0: GetSnsSubnetIdsArg) -> Result<(GetSnsSubnetIdsResponse,)> {
+    pub async fn get_sns_subnet_ids(&self, arg0: GetSnsSubnetIdsArg) -> CallResult<(GetSnsSubnetIdsResponse,)> {
         ic_cdk::call(self.0, "get_sns_subnet_ids", (arg0,)).await
     }
-    pub async fn get_wasm(&self, arg0: GetWasmRequest) -> Result<(GetWasmResponse,)> {
+    pub async fn get_wasm(&self, arg0: GetWasmRequest) -> CallResult<(GetWasmResponse,)> {
         ic_cdk::call(self.0, "get_wasm", (arg0,)).await
     }
     pub async fn insert_upgrade_path_entries(
         &self,
         arg0: InsertUpgradePathEntriesRequest,
-    ) -> Result<(InsertUpgradePathEntriesResponse,)> {
+    ) -> CallResult<(InsertUpgradePathEntriesResponse,)> {
         ic_cdk::call(self.0, "insert_upgrade_path_entries", (arg0,)).await
     }
-    pub async fn list_deployed_snses(&self, arg0: ListDeployedSnsesArg) -> Result<(ListDeployedSnsesResponse,)> {
+    pub async fn list_deployed_snses(
+        &self,
+        arg0: ListDeployedSnsesArg,
+    ) -> CallResult<(ListDeployedSnsesResponse,)> {
         ic_cdk::call(self.0, "list_deployed_snses", (arg0,)).await
     }
-    pub async fn list_upgrade_steps(&self, arg0: ListUpgradeStepsRequest) -> Result<(ListUpgradeStepsResponse,)> {
+    pub async fn list_upgrade_steps(&self, arg0: ListUpgradeStepsRequest) -> CallResult<(ListUpgradeStepsResponse,)> {
         ic_cdk::call(self.0, "list_upgrade_steps", (arg0,)).await
     }
     pub async fn update_allowed_principals(
         &self,
         arg0: UpdateAllowedPrincipalsRequest,
-    ) -> Result<(UpdateAllowedPrincipalsResponse,)> {
+    ) -> CallResult<(UpdateAllowedPrincipalsResponse,)> {
         ic_cdk::call(self.0, "update_allowed_principals", (arg0,)).await
     }
     pub async fn update_sns_subnet_list(
         &self,
         arg0: UpdateSnsSubnetListRequest,
-    ) -> Result<(UpdateSnsSubnetListResponse,)> {
+    ) -> CallResult<(UpdateSnsSubnetListResponse,)> {
         ic_cdk::call(self.0, "update_sns_subnet_list", (arg0,)).await
     }
 }
