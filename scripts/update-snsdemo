#!/usr/bin/env bash
set -euo pipefail
SOURCE_DIR="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
PATH="$SOURCE_DIR:$PATH"

# Source the clap.bash file ---------------------------------------------------
source "$SOURCE_DIR/clap.bash"
# Define options
clap.define short=d long=dir desc="The path to an snsdemo repo checked out at the desired release" variable=SNSDEMO_REPO
clap.define short=r long=release desc="The release name" variable=SNSDEMO_RELEASE
# Source the output file ----------------------------------------------------------
source "$(clap.build)"

# Check that the snsdemo repository directory exists
SNSDEMO_REPO="${SNSDEMO_REPO:-${1:-}}"
test -e "${SNSDEMO_REPO:-}" || {
  echo "ERROR: Please supply the path to the snsdemo repository with --snsdemo_repo" >&2
  exit 1
} >&2

# Check that the SNSDEMO repo is checked out at the correct release
pushd "$SNSDEMO_REPO"
HEAD_COMMIT="$(git rev-parse HEAD)"
RELEASE_COMMIT="$(git rev-parse "tags/$SNSDEMO_RELEASE")"
[[ "$HEAD_COMMIT" == "$RELEASE_COMMIT" ]] || {
  echo "ERROR: The repo should be checked out at the release tag."
  echo "SNSDEMO repo HEAD:      $HEAD_COMMIT"
  echo "SNSDEMO release commit: $RELEASE_COMMIT"
  exit 1
} >&2
popd

DFX_VERSION="$(jq -r .dfx "$SNSDEMO_REPO/dfx.json")"
IC_COMMIT="$(
  . "$SNSDEMO_REPO/bin/versions.bash"
  echo "$DFX_IC_COMMIT"
)"

# Check that all values were found.
for var in DFX_VERSION IC_COMMIT RELEASE_COMMIT; do
  test -n "${!var}" || {
    echo "ERROR: Could not find $var" >&2
    exit 1
  } >&2
done

# Move to the root of the nns-dapp repository
cd "$SOURCE_DIR/.."

# Update the snsdemo commit in dfx.json
jq --arg c "$SNSDEMO_RELEASE" '.defaults.build.config.SNSDEMO_RELEASE |= $c' dfx.json | sponge dfx.json

# Update the IC commit to match snsdemo
scripts/update_ic_commit --ic_commit "$IC_COMMIT"

# Update dfx to match snsdemo
v="$DFX_VERSION" jq '.dfx |= env.v' dfx.json | sponge dfx.json

echo "Updated:"
echo " snsdemo commit to $SNSDEMO_COMMIT"
echo " dfx version to $DFX_VERSION"
echo " IC commit to $IC_COMMIT"
