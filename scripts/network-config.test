#!/usr/bin/env bash
# shellcheck disable=SC2030,SC2031,SC2001
# Note regarding shellcheck: These tests create subshells with variables, it is intentional that the variables are not set globally.
set -euo pipefail

SCRIPT_TO_TEST="$(realpath "${0%.test}")"

# Config used in tests.
sample_global_config() {
  cat <<-EOF
	{
	  "local": {
	    "config": {
	      "FETCH_ROOT_KEY": true,
	      "HOST": "http://localhost:8080",
	      "FEATURE_FLAGS": {
		"ENABLE_SNS": true,
		"ENABLE_SNS_2": true
	      }
	    },
	    "bind": "127.0.0.1:8080",
	    "type": "ephemeral",
	    "replica": {
	      "subnet_type": "system"
	    }
	  },
	  "nnsdapp": {
	    "config": {
	      "FETCH_ROOT_KEY": true,
	      "HOST": "https://nnsdapp.testnet.dfinity.network"
	    },
	    "providers": [
	      "http://[2a00:fb01:400:42:5000:d1ff:fefe:987e]:8080"
	    ],
	    "type": "persistent"
	  }
	}
	EOF
}

# Creates a test environment with:
# - HOME - a temporary HOME directory
# - GLOBAL_NETWORK_CONFIG_FILE - the global config file for that test environment
# - PWD - the PWD will be in a toy project in the temporary HOME
# - dfx.json - local network configuration.
mk_env() {
  HOME="$(mktemp -d)"
  export HOME
  cd "$HOME"
  . "$SCRIPT_TO_TEST"
  mkdir toy_project
  cd toy_project
  cat <<-EOF >dfx.json
	{
	  "version": 1,
	  "canisters": {
	    "foasdhfgkayewr_backend": {
	      "type": "rust",
	      "package": "foasdhfgkayewr_backend",
	      "candid": "src/foasdhfgkayewr_backend/foasdhfgkayewr_backend.did"
	    },
	    "foasdhfgkayewr_frontend": {
	      "type": "assets",
	      "source": [
		"src/foasdhfgkayewr_frontend/assets"
	      ],
	      "dependencies": [
		"foasdhfgkayewr_backend"
	      ]
	    }
	  },
	  "networks": {
	    "mainnet": {
	      "config": {
		"FETCH_ROOT_KEY": false,
		"API_HOST": "https://icp-api.io",
		"STATIC_HOST": "https://icp0.io",
		"FEATURE_FLAGS": {
		  "ENABLE_CKBTC": true,
		  "ENABLE_CKTESTBTC": false
		}
	      },
	      "providers": [
		"https://icp-api.io/"
	      ],
	      "type": "persistent"
	    },
	  },
	  "defaults": {
	    "build": {
	      "packtool": "",
	      "args": ""
	    }
	  },
	  "output_env_file": ".env"
	}
	EOF
  mkdir -p "$HOME/.config/dfx"
  sample_global_config >"$HOME/.config/dfx/networks.json"
}

# Prints a section title
title() {
  cat <<-EOF

	=============================================================================
	   $*
	=============================================================================
	EOF
}

(
  title "Self-check: Stock environment should be created"
  HOME_BEFORE="$HOME"
  mk_env
  if [[ "$HOME" == "$HOME_BEFORE" ]]; then
    {
      echo "ERROR: Should have a temporary home dir."
      echo "       HOME='$HOME'"
      exit 1
    } >&2
  fi
  echo OK
)

(
  title "assert_dfx_network_var_is_set should succeed when the network is set"
  mk_env
  export DFX_NETWORK
  DFX_NETWORK=gobbeldygook
  if assert_dfx_network_var_is_set; then
    echo OK
  else
    {
      echo "DFX_NETWORK is set (to '$DFX_NETWORK') so this should have succeeded."
      exit 1
    } >&2
  fi
)
(
  title "assert_dfx_network_var_is_set should fail when the network is unset"
  mk_env
  unset DFX_NETWORK
  if assert_dfx_network_var_is_set 2>/dev/null; then
    {
      echo "FAIL"
      exit 1
    } >&2
  else
    echo OK
  fi
)
(
  title "global_network_config should be able to get a globally defined network"
  mk_env
  DFX_NETWORK=local
  export DFX_NETWORK
  ACTUAL_CONFIG="$(global_network_config)" || {
    echo "FAIL: global_network_config should have returned zero but:"
    echo "Returned: $?"
    echo "With value: '$ACTUAL_CONFIG'"
    exit 1
  }
  # Format both actual and expected outputs with jq so that whitespace differences don't matter.
  ACTUAL_CONFIG="$(echo "$ACTUAL_CONFIG")"
  EXPECTED_CONFIG="$(sample_global_config | jq ".$DFX_NETWORK")"
  [[ "$ACTUAL_CONFIG" == "${EXPECTED_CONFIG:-}" ]] || {
    echo "FAIL: Config mismatch:"
    echo "Expected:"
    echo "$EXPECTED_CONFIG" | sed 's/^/    /g'
    echo "Actual:"
    echo "${ACTUAL_CONFIG:-}" | sed 's/^/    /g'
    exit 1
  } >&2
  echo OK
)
(
  title "global_network_config should return an error and null for a missing network"
  mk_env
  DFX_NETWORK=missingnetwork
  export DFX_NETWORK
  ACTUAL_CONFIG="$(! global_network_config)" || {
    echo "FAIL: global_network_config should have returned with a non-zero exit code but:"
    echo "Returned: $?"
    echo "With value: '$ACTUAL_CONFIG'"
    exit 1
  } >&2
  # Format both actual and expected outputs with jq so that whitespace differences don't matter.
  ACTUAL_CONFIG="$(echo "$ACTUAL_CONFIG")"
  EXPECTED_CONFIG="$(echo null | jq .)"
  [[ "$ACTUAL_CONFIG" == "${EXPECTED_CONFIG:-}" ]] || {
    echo "FAIL: Config mismatch:"
    echo "Expected:"
    echo "$EXPECTED_CONFIG" | sed 's/^/    /g'
    echo "Actual:"
    echo "${ACTUAL_CONFIG:-}" | sed 's/^/    /g'
    exit 1
  } >&2
  echo OK
)

title "SUCCESS: Tests in $0 passed."
