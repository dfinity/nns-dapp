#!/usr/bin/env bash
set -euo pipefail
SOURCE_DIR="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"

# shellcheck disable=SC2317
print_help() {
  cat <<-EOF

	Tests that SNSs can be obtained without error from the aggregator.

	Prerequisites:
	 * The aggregator has been installed.
	 * The aggregator has had time to populate its cache, so all data should be present and correct.
	 * No new SNSs are being added, as this could cause a race condition when checking
	  the number of SNSs against the "latest" endpoint.
	EOF
}
# Source the clap.bash file ---------------------------------------------------
source "$SOURCE_DIR/../../clap.bash"
# Define options
clap.define short=n long=network desc="The dfx network to use" variable=DFX_NETWORK default="local"
clap.define short=s long=snss desc="The number of SNSs" variable=NUM_SNS default=""
# Source the output file ----------------------------------------------------------
source "$(clap.build)"
EXIT=0

AGGREGATOR_CANISTER_URL="$(dfx-canister-url --network "$DFX_NETWORK" sns_aggregator)"
curl --fail -sSL "$AGGREGATOR_CANISTER_URL" >/dev/null || {
  echo "ERROR: SNS aggregator not found at $AGGREGATOR_CANISTER_URL"
  exit 1
} >&2
[[ "" != "${NUM_SNS:-}" ]] || NUM_SNS="$(curl --fail -sSL "${AGGREGATOR_CANISTER_URL}/v1/sns/list/latest/slow.json" | jq '.[0].index +1' 2>/dev/null || echo 0)"

(
  printf "\n\n\n=========================================\n"
  printf "%s\n" "Test that:" \
    " * Successive pages can be downloaded until we get a page that is not full." \
    " * These pages provide the same number of SNS suggested by the 'latest' API."
  PAGE_SIZE=10
  PAGE_FILE="$(mktemp aggregator-last-page-XXXXX.json)"
  for ((page = 0, sns_count = 0; ; page++)); do
    # Get the page
    curl -Lf "${AGGREGATOR_CANISTER_URL}/v1/sns/list/page/${page}/slow.json" -o "$PAGE_FILE"
    # Verify that the expected number of SNSs is prseent.
    expect=$((sns_count + PAGE_SIZE > NUM_SNS ? NUM_SNS - sns_count : PAGE_SIZE))
    actual="$(jq length "$PAGE_FILE")"
    sns_count=$((sns_count + actual))
    ((expect == actual)) || {
      echo ERROR: Expected to have $expect SNS in the aggregator page $page but found $actual.
      echo Data is in: $PAGE_FILE
      exit 1
    } >&2
    # Verify that the SNS indices in each page are as expected
    expect="$(seq "$((PAGE_SIZE * page))" "$((sns_count - 1))")"
    actual="$(jq '.[]|.index' "$PAGE_FILE")"
    [[ "$expect" == "$actual" ]] || {
      echo ERROR: Expected to have $expect SNS in the aggregator page $page but found $actual.
      echo Data is in: $PAGE_FILE
      exit 1
    } >&2
    # A caller should be able to get pages until they get an incomplete page:
    page_size="$(jq length "$PAGE_FILE")"
    ((page_size == PAGE_SIZE)) || break
  done
)
