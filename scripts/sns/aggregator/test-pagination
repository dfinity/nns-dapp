#!/usr/bin/env bash
set -euo pipefail
SOURCE_DIR="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"

# shellcheck disable=SC2317
print_help() {
  cat <<-EOF

	Tests that SNSs can be obtained without error from the aggregator.

    Prerequisites:
    * The aggregator has been installed.
    * No new SNSs are being added, as this could cause a race condition when checking
      the number of SNSs against the "latest" endpoint.
	EOF
}
# Source the clap.bash file ---------------------------------------------------
source "$SOURCE_DIR/../../clap.bash"
# Define options
# Source the output file ----------------------------------------------------------
source "$(clap.build)"
EXIT=0

(
  printf "\n\n\n=========================================\n"
  printf "%s\n" "Test that:" \
    " * Successive pages can be downloaded until we get a page that is not full." \
    " * These pages provide the same number of SNS suggested by the 'latest' API."
  PAGE_SIZE=10
  AGGREGATOR_CANISTER_URL="$(dfx-canister-url sns_aggregator)"
  NUM_SNS="$(curl --retry 10 "${AGGREGATOR_CANISTER_URL}/v1/sns/list/latest/slow.json" | jq '(.[0].index // -1) +1')"
  PAGE_FILE="$(mktemp aggregator-last-page-XXXXX.json)"
  for ((page = 0, sns_count = 0; ; page++)); do
    expect=$((sns_count + PAGE_SIZE > NUM_SNS ? NUM_SNS - sns_count : PAGE_SIZE))
    curl -Lf "${AGGREGATOR_CANISTER_URL}/v1/sns/list/page/${page}/slow.json" -o "$PAGE_FILE"
    actual="$(jq length "$LAST_PAGE_FILE")"
    ((expect == actual)) || {
      echo ERROR: Expected to have $expect SNS in the aggregator but found $actual.
      echo Data:
      jq . "$PAGE_FILE"
      exit 1
    } >&2
    sns_count=$((sns_count + actual))
    # A caller should be able to get pages until they get an incomplete page:
    ((actual == PAGE_SIZE)) || break
  done
)
