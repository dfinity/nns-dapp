#!/usr/bin/env bash
set -euo pipefail
SOURCE_DIR="$(dirname "$(realpath "${BASH_SOURCE[0]}")")/.."
PATH="$SOURCE_DIR:$PATH"

# Source the clap.bash file ---------------------------------------------------
source "$SOURCE_DIR/clap.bash"
# Define options
clap.define short=n long=network desc="The dfx network to use" variable=DFX_NETWORK default="mainnet"
clap.define short=c long=ci desc="A link to the wasm build on CI" variable=CI default=""
# Source the output file ----------------------------------------------------------
source "$(clap.build)"
cd "$SOURCE_DIR/.."
export DFX_NETWORK

mkdir -p release/ci
[[ "${CI:-}" != "" ]] || {
  CI="$("$SOURCE_DIR/nns-dapp/ci-link" --commit tags/release-candidate | tail -n1 | grep .)"
}
WASM="release/ci/nns-dapp.wasm.gz"
if test -f "$WASM"; then
  SHA="$(sha256sum "$WASM" | awk '{print $1}')"
else
  echo "Please populate ${WASM} and run this again."
  exit 0
fi

get_unreleased_changelog() {
  # The command below does:
  # 1. Take the CHANGELOG-Nns-Dapp-unreleased.md file from (including) the first occurrence
  #    of "### Application" until the end.
  # 2. Of that, take the lines until (excluding) the first occurrence of
  #    "### Operations"
  # 3. Remove the first line (containing "### Application").
  # 4. Remove blank lines.
  # 5. Add a line with "####" at the end. (To correctly recognize an empty
  #    section at the end.)
  # 6. Remove empty sections. (Only output lines that don't start with # or that
  #    are followed by a line that doesn't start with #.)
  # 7. Add a blank line before and after each section heading.
  # 8. Remove 2 leading blank lines which were added by the previous 2 steps.
  # 8. Replace "###" with "##" to make the heading depth correct for the context
  #    of the proposal text.
  sed -nE '/^### Application/,//p' CHANGELOG-Nns-Dapp-unreleased.md |
    sed -nE '/^### Operations/q;p' |
    sed '1d' |
    grep -v "^$" |
    (
      cat -
      echo '####'
    ) |
    awk '{if ($0 !~ /^#/ || prev !~ /^#/) print prev} {prev=$0}' |
    awk '{ if ($0 ~ /^#/) print "\n"$0"\n"; else print $0 }' |
    sed '1,2d' |
    sed -E 's/###/##/'
}

cat <<EOF >release/PROPOSAL.md
# Upgrade frontend NNS Dapp canister to commit \`$(git rev-parse tags/release-candidate)\`
Wasm sha256 hash: \`${SHA}\` (\`${CI}\`)

## Change Log

$(get_unreleased_changelog)

## Commit Log

\`\`\`
+ bash -xc "git log --format='%C(auto) %h %s' $(git rev-parse --short tags/prod)..$(git rev-parse --short tags/release-candidate)"
$(bash -xc "git log --format='%C(auto) %h %s' $(git rev-parse --short tags/prod)..$(git rev-parse --short tags/release-candidate)")
\`\`\`

## Wasm Verification

To build the wasm module yourself and verify its hash, run the following commands from the root of the [nns-dapp repo](https://github.com/dfinity/nns-dapp):

\`\`\`
git fetch  # to ensure you have the latest changes.
git checkout "$(git rev-parse tags/release-candidate)"
git merge-base --is-ancestor HEAD origin/main && echo "OK" || echo "Commit is not on main branch!"
./scripts/docker-build
sha256sum nns-dapp.wasm.gz
\`\`\`

You may also want to verify the canister arguments.  In the proposal they are
binary, which is not very readable. Docker provides both binary and text formats
and you can verify that the text format corresponds to the binary \`arg_hex\`
field in the proposal.

\`\`\`
cat nns-dapp-arg-${DFX_NETWORK}.did
didc encode "\$(cat nns-dapp-arg-${DFX_NETWORK}.did)"
\`\`\`
EOF

cat <<EOF >release/ROLLBACK.md
# Downgrade frontend NNS Dapp canister to commit \`$(git rev-parse tags/release-candidate)\`
Wasm sha256 hash: \`${SHA}\` (\`${WASM}\`)

## Wasm Verification

To build the wasm module yourself and verify its hash, run the following commands from the root of the nns-dapp repo:

\`\`\`
git fetch  # to ensure you have the latest changes.
git checkout "$(git rev-parse tags/release-candidate)"
git merge-base --is-ancestor HEAD origin/main && echo "OK" || echo "Commit is not on main branch!"
./scripts/docker-build
sha256sum nns-dapp.wasm.gz
\`\`\`

You may also want to verify the canister arguments.  In the proposal they are
binary, which is not very readable. Docker provides both binary and text formats
and you can verify that the text format corresponds to the binary \`arg_hex\`
field in the proposal.

\`\`\`
cat nns-dapp-arg-${DFX_NETWORK}.did
didc encode "\$(cat nns-dapp-arg-${DFX_NETWORK}.did)"
\`\`\`
EOF

./config.sh
cp "nns-dapp-arg-${DFX_NETWORK}.did" "./release/nns-dapp-arg-${DFX_NETWORK}.did"

echo
echo "Output files:"
echo "  release/PROPOSAL.md"
echo "  release/ROLLBACK.md"
