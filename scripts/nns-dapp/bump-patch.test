#!/usr/bin/env bash
set -euo pipefail
SOURCE_DIR="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"

expected_file_changes() {
  # Expect these changes:
  # Cargo.lock: 2 changes: the nns-dapp and sns_aggregator package versions.
  # Cargo.toml: 1 change: The workspace version.
  # frontend/package.json: 1 change: The package version.
  # frontend/package-lock.json: The number of changes seems to be unbounded in principle but 2 in practice.
  cat <<-EOF
	2	2	Cargo.lock
	1	1	Cargo.toml
	2	2	frontend/package-lock.json
	1	1	frontend/package.json
	EOF
}
expected_file_changes="$(expected_file_changes)"

# Check that git is clean before running this test.
test -z "${COMMIT_CHANGES:-}" || [[ "$(git status --untracked-files=no --porcelain)" == "" ]] || {
  echo "ERROR: Git should be clean before running this command."
  echo "       Untracked files will be ignored, but changes to tracked files"
  echo "       should be removed or committed."
  echo "       Please do so before re-running this command."
  echo
  echo "Changes:"
  git status --untracked-files=no --porcelain | head
  exit 1
} >&2

(
  printf "########\n## %s\n" "Verifies that the expected files are changed"
  "${SOURCE_DIR}/bump-patch"
  actual_changes="$(git diff --numstat)"
  [[ "$expected_file_changes" == "$actual_changes" ]] || {
    echo "ERROR: Unexpected file changes."
    echo
    echo "Expected:"
    echo "$expected_file_changes"
    echo
    echo "Actual:"
    echo "$actual_changes"
    echo
    echo "Diff:"
    diff <(echo "$expected_file_changes") <(echo "$actual_changes")
    echo "Changes checked with: git diff --numstat"
    exit 1
  } >&2
  git checkout .
)

# TODO:  Verify that the version number has bumped in:
# - Cargo.toml (version can be obtained with: yq -r '.workspace.package.version' -o json Cargo.toml
# - Cargo.lock (seems to be too hard for yq?)
# - package.json
# - package-lock.json

# TODO:
# - Verify that the changes are as expected when committing.
