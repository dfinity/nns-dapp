#!/usr/bin/env bash
set -euo pipefail
SOURCE_DIR="$(dirname "$(realpath "${BASH_SOURCE[0]}")")/.."
PATH="$SOURCE_DIR:$PATH"

print_help() {
  cat <<-EOF

	Finds CI builds of the current commit.

	Note: This searches through gihub logs.  Only fairly recent logs are readily accessible.
	      Older runs may be found using high velues for the '--limit' flag but this is very slow.

	EOF
}

# Source the clap.bash file ---------------------------------------------------
source "$SOURCE_DIR/clap.bash"
# Define options
clap.define short=l long=limit desc="The number of runs to search though" variable=DFX_LIMIT default="200"
clap.define short=f long=file desc="The file to compare" variable=DFX_ASSET default="nns-dapp.wasm"
# Source the output file ----------------------------------------------------------
source "$(clap.build)"

DFX_COMMIT="$(git rev-parse "HEAD")"
export DFX_COMMIT

echo "Commit: $DFX_COMMIT"

build_hash_from_logs() {
  sed -nr 's&.*\<([a-z0-9]{64}) +(\/build\/)?'"$DFX_ASSET"'.*&\1&g;ta;b;:a;p' | tail -n1 | grep .
}

echo "Build hashes for $DFX_ASSET:"
: CI builds:
LOG_END="$(($(date +%s) / 3600))"
logfile=",ci-builds-of-${DFX_LIMIT}-${LOG_END}.txt"
test -e "$logfile" || gh run list --workflow "Docker build" --limit "${DFX_LIMIT}" --json name,conclusion,databaseId,headSha --jq '.[] | select(.headSha==env.DFX_COMMIT) | select(.conclusion=="success") | .databaseId' >"$logfile"
readarray -t runs <"$logfile"
for run in "${runs[@]}"; do
  : Cache the logfile:
  logfile=",ci-log-${DFX_LIMIT}-$run.log"
  test -e "$logfile" || gh run view "$run" --log >"$logfile"
  hash="$(grep 'Build mainnet nns-dapp Docker image' "$logfile" | build_hash_from_logs)"
  echo "$hash $run"
  : Get the assets
  logfile=",ci-assets-$run"
  test -d "$logfile" || (
    mkdir "$logfile"
    cd "$logfile"
    gh run download "$run"
  )
done

: Local docker build
docker_hash="$(./scripts/docker-build |& build_hash_from_logs)"
printf "% 64s Local docker build\n" "${docker_hash:-}"

: Native build
case "$DFX_ASSET" in
assets.tar.xz)
  native_hash="$({ rm -f "$DFX_ASSET" && DFX_NETWORK=mainnet ./config.sh && ./build-frontend.sh; } &>/dev/null && sha256sum "$DFX_ASSET")"
  ;;
esac
printf "% 64s Local native build\n" "${native_hash:-}"
