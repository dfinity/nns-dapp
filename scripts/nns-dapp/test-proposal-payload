#!/usr/bin/env bash
set -euo pipefail
SOURCE_DIR="$(dirname "$(realpath "${BASH_SOURCE[0]}")")/.."

print_help() {
  cat <<-EOF

	Create proposals of different types and test that nns-dapp can get their payloads.
	EOF
}

# Source the clap.bash file ---------------------------------------------------
source "$SOURCE_DIR/clap.bash"
# Define options
clap.define short=i long=identity desc="Identity to use to create proposals" variable=DFX_IDENTITY default="snsdemo8"
# Source the output file ----------------------------------------------------------
source "$(clap.build)"

# Check if a replica is running:
if ! pgrep -x replica; then
  echo "A replica must be running to submit proposals to." >&2
  exit 1
fi

IDENTITY_PATH="$HOME/.config/dfx/identity/${DFX_IDENTITY}"

# Check that the identity exists
if ! [ -d "$IDENTITY_PATH" ]; then
  echo "Identity $IDENTITY_PATH does not exist" >&2
  exit 1
fi

PEM="${IDENTITY_PATH}/identity.pem"
NNS_URL="http://localhost:$(
  cd ~
  dfx info replica-port
)"
NEURON_ID="$(cat "${IDENTITY_PATH}/neurons/local")"
SUMMARY="Testing proposal payloads"

NODE_ID="ynkov-ujzr4-rgyrv-ou4yf-orw6f-rrslu-w65tu-agnfu-xwdrv-xmayj-qae"
NODE_ID_2="7e6za-cdhql-kvxja-dfse5-jrme3-rwmau-6foiv-fxnwt-h7qos-wqryb-pae"
SUBNET_ID="52o7h-ke47f-b5z7i-ah4wu-qhruc-kfdcl-xzzhl-sjmfh-3ryrf-xxtei-bae"
SUBNET_ID_2="gxevo-lhkam-aaaaa-aaaap-yai"
REPLICA_VERSION_ID="48da85ee6c03e8c15f3e90b21bf9ccae7b753ee6"
USER_PRINCIPAL="fw6gp-yqo6v-iuhjd-pv26u-cn4qv-bzewd-ubz6s-fcssu-pfpct-xrda2-uqe"

test_nns_function_06() {
  HEIGHT=107428000
  TIME_NS=1719241477392602354
  STATE_HASH="5d6601ac575f565b7c61d6bf5f9b25fa503bf7d756210a9a1fe8d8a32967f2e5"
  JSON_STATE_HASH="[$(echo "$STATE_HASH" | sed 's/../0x&,/g' | gawk -F, '{for(i=1;i<NF;i++) printf "%d,", strtonum($i)}' | sed 's/,$//')]"
  KEY_NAME="some_key_name_1"
  KEY_ROTATION_PERIOD_MS=111
  SIGNATURE_REQUEST_TIMEOUT_NS=222
  MAX_QUEUE_SIZE=155
  NUM_PRE_SIGNATURES=99

  subcommand="propose-to-update-recovery-cup"

  PROPOSAL_ID="$(run_ic_admin \
    "$subcommand" \
    --initial-chain-key-configs-to-request "[
        {
            \"key_id\": \"schnorr:Bip340Secp256k1:$KEY_NAME\",
            \"pre_signatures_to_create_in_advance\": \"$NUM_PRE_SIGNATURES\",
            \"max_queue_size\": \"$MAX_QUEUE_SIZE\",
            \"subnet_id\": \"$SUBNET_ID_2\"
        }
    ]" \
    --idkg-key-rotation-period-ms "$KEY_ROTATION_PERIOD_MS" \
    --signature-request-timeout-ns "$SIGNATURE_REQUEST_TIMEOUT_NS" \
    --subnet "$SUBNET_ID" \
    --state-hash $STATE_HASH \
    --time-ns $TIME_NS \
    --height $HEIGHT)"

  ACTUAL_PAYLOAD="$(get_payload "$PROPOSAL_ID")"
  EXPECTED_PAYLOAD="{\"height\":$HEIGHT,\"replacement_nodes\":null,\"subnet_id\":\"$SUBNET_ID\",\"registry_store_uri\":null,\"ecdsa_config\":null,\"state_hash\":$JSON_STATE_HASH,\"chain_key_config\":{\"signature_request_timeout_ns\":$SIGNATURE_REQUEST_TIMEOUT_NS,\"key_configs\":[{\"subnet_id\":\"$SUBNET_ID_2\",\"key_config\":{\"max_queue_size\":$MAX_QUEUE_SIZE,\"key_id\":{\"Schnorr\":{\"algorithm\":\"bip340secp256k1\",\"name\":\"$KEY_NAME\"}},\"pre_signatures_to_create_in_advance\":$NUM_PRE_SIGNATURES}}],\"idkg_key_rotation_period_ms\":$KEY_ROTATION_PERIOD_MS},\"time_ns\":$TIME_NS}"

  verify_payload "$subcommand" "$ACTUAL_PAYLOAD" "$EXPECTED_PAYLOAD"
}

test_nns_function_11() {
  subcommand="propose-to-deploy-guestos-to-all-subnet-nodes"

  PROPOSAL_ID="$(run_ic_admin \
    "$subcommand" \
    $SUBNET_ID $REPLICA_VERSION_ID)"

  ACTUAL_PAYLOAD="$(get_payload "$PROPOSAL_ID")"
  EXPECTED_PAYLOAD="{\"subnet_id\":\"$SUBNET_ID\",\"replica_version_id\":\"$REPLICA_VERSION_ID\"}"

  verify_payload "$subcommand" "$ACTUAL_PAYLOAD" "$EXPECTED_PAYLOAD"
}

test_nns_function_25() {
  subcommand="propose-to-add-firewall-rules"

  rules_json='[{
    "ipv4_prefixes": [],
    "ipv6_prefixes": [ "fd1a:f125:8573::/64" ],
    "ports": [ 1234 ],
    "action": 1,
    "comment": "This is a test rule"
  }]'
  expected_hash="8CD8BDC28D2C572CB26391C60B83CD40FF15DA206FF2A893C7233E54E7055ABE"

  rules_json_file="$(mktemp rules.json.XXXXXX)"
  echo "$rules_json" >"$rules_json_file"

  PROPOSAL_ID="$(run_ic_admin \
    "$subcommand" \
    --proposal-title "Proposal to modify firewall rules" \
    api_boundary_nodes \
    "$rules_json_file" \
    0 \
    "$expected_hash")"

  rm "$rules_json_file"

  ACTUAL_PAYLOAD="$(get_payload "$PROPOSAL_ID")"
  EXPECTED_PAYLOAD="{\"expected_hash\":\"$expected_hash\",\"scope\":\"ApiBoundaryNodes\",\"positions\":[0],\"rules\":$rules_json}"

  verify_payload "$subcommand" "$ACTUAL_PAYLOAD" "$EXPECTED_PAYLOAD"
}

test_nns_function_38() {
  subcommand="propose-to-revise-elected-guestos-versions"

  PROPOSAL_ID="$(run_ic_admin \
    "$subcommand" \
    --replica-versions-to-unelect $REPLICA_VERSION_ID)"

  ACTUAL_PAYLOAD="$(get_payload "$PROPOSAL_ID")"
  EXPECTED_PAYLOAD="{\"release_package_urls\":[],\"replica_versions_to_unelect\":[\"$REPLICA_VERSION_ID\"],\"replica_version_to_elect\":null,\"guest_launch_measurement_sha256_hex\":null,\"release_package_sha256_hex\":null}"

  verify_payload "$subcommand" "$ACTUAL_PAYLOAD" "$EXPECTED_PAYLOAD"
}

test_nns_function_43() {
  subcommand="propose-to-add-api-boundary-nodes"

  PROPOSAL_ID="$(run_ic_admin \
    "$subcommand" \
    --nodes $NODE_ID \
    --nodes $NODE_ID_2 \
    --version $REPLICA_VERSION_ID)"

  ACTUAL_PAYLOAD="$(get_payload "$PROPOSAL_ID")"
  EXPECTED_PAYLOAD="{\"version\":\"$REPLICA_VERSION_ID\",\"node_ids\":[\"$NODE_ID\",\"$NODE_ID_2\"]}"

  verify_payload "$subcommand" "$ACTUAL_PAYLOAD" "$EXPECTED_PAYLOAD"
}

test_nns_function_47() {
  subcommand="propose-to-deploy-guestos-to-some-api-boundary-nodes"

  PROPOSAL_ID="$(run_ic_admin \
    "$subcommand" \
    --nodes $NODE_ID \
    --version $REPLICA_VERSION_ID)"

  ACTUAL_PAYLOAD="$(get_payload "$PROPOSAL_ID")"
  EXPECTED_PAYLOAD="{\"version\":\"$REPLICA_VERSION_ID\",\"node_ids\":[\"$NODE_ID\"]}"

  verify_payload "$subcommand" "$ACTUAL_PAYLOAD" "$EXPECTED_PAYLOAD"
}

test_nns_function_48() {
  subcommand="propose-to-deploy-guestos-to-all-unassigned-nodes"

  PROPOSAL_ID="$(run_ic_admin \
    "$subcommand" \
    --replica-version-id $REPLICA_VERSION_ID)"

  ACTUAL_PAYLOAD="$(get_payload "$PROPOSAL_ID")"
  EXPECTED_PAYLOAD="{\"elected_replica_version\":\"$REPLICA_VERSION_ID\"}"

  verify_payload "$subcommand" "$ACTUAL_PAYLOAD" "$EXPECTED_PAYLOAD"
}

test_nns_function_49() {
  subcommand="propose-to-update-ssh-readonly-access-for-all-unassigned-nodes"

  PROPOSAL_ID="$(run_ic_admin "$subcommand")"

  ACTUAL_PAYLOAD="$(get_payload "$PROPOSAL_ID")"
  EXPECTED_PAYLOAD="{\"ssh_readonly_keys\":[]}"

  verify_payload "$subcommand" "$ACTUAL_PAYLOAD" "$EXPECTED_PAYLOAD"
}

test_nns_function_50() {
  subcommand="propose-to-revise-elected-hostos-versions"

  PROPOSAL_ID="$(run_ic_admin \
    "$subcommand" \
    --hostos-versions-to-unelect $REPLICA_VERSION_ID)"

  ACTUAL_PAYLOAD="$(get_payload "$PROPOSAL_ID")"
  EXPECTED_PAYLOAD="{\"release_package_urls\":[],\"hostos_version_to_elect\":null,\"hostos_versions_to_unelect\":[\"$REPLICA_VERSION_ID\"],\"release_package_sha256_hex\":null}"

  verify_payload "$subcommand" "$ACTUAL_PAYLOAD" "$EXPECTED_PAYLOAD"
}

test_nns_function_51() {
  subcommand="propose-to-deploy-hostos-to-some-nodes"

  PROPOSAL_ID="$(run_ic_admin "$subcommand" $NODE_ID)"

  ACTUAL_PAYLOAD="$(get_payload "$PROPOSAL_ID")"
  EXPECTED_PAYLOAD="{\"hostos_version_id\":null,\"node_ids\":[\"$NODE_ID\"]}"

  verify_payload "$subcommand" "$ACTUAL_PAYLOAD" "$EXPECTED_PAYLOAD"
}

test_nns_function_52() {
  subcommand="propose-to-rent-subnet"

  # TODO: Use `run_ic_admin` instead of `run_ic_admin_with_test_neuron` once `ic-admin` is fixed.
  PROPOSAL_ID="$(run_ic_admin \
    "$subcommand" \
    --rental-condition-id App13CH \
    --user "$USER_PRINCIPAL")"

  ACTUAL_PAYLOAD="$(get_payload "$PROPOSAL_ID")"
  EXPECTED_PAYLOAD="{\"user\":\"$USER_PRINCIPAL\",\"rental_condition_id\":\"App13CH\"}"

  verify_payload "$subcommand" "$ACTUAL_PAYLOAD" "$EXPECTED_PAYLOAD"
}

run_ic_admin() {
  ic-admin \
    --secret-key-pem "$PEM" \
    --nns-url "$NNS_URL" \
    "$@" \
    --summary "$SUMMARY" \
    --proposer "$NEURON_ID" |
    grep -E '^proposal [0-9]+$' | sed 's/proposal //'
}

get_payload() {
  proposal_id="$1"
  dfx canister call nns-dapp get_proposal_payload "($proposal_id : nat64)" | idl2json | jq -r '.Ok'
}

verify_payload() {
  subcommand="$1"
  ACTUAL_PAYLOAD="$2"
  EXPECTED_PAYLOAD="$3"

  if ! jq --exit-status -n "$ACTUAL_PAYLOAD | contains($EXPECTED_PAYLOAD)"; then
    {
      echo "Unexpected payload for $subcommand."
      echo "EXPECTED_PAYLOAD='$EXPECTED_PAYLOAD'"
      echo "  ACTUAL_PAYLOAD='$ACTUAL_PAYLOAD'"
      wdiff -3 <(echo "${ACTUAL_PAYLOAD//,/, }") <(echo "${EXPECTED_PAYLOAD//,/, }") | colordiff
    } >&2
    exit 1
  else
    echo "Payload for $subcommand is as expected."
  fi
}

# Find and run declared test functions.
declare -F | grep test_nns_function_ | sed -e 's/declare -f //' | while read -r test; do
  echo "Running $test"
  $test
done

# Make sure that we add tests for new NNS function.
FIRST_UNDEFINED_NNS_FUNCTION=53

for i in $(seq 0 5); do
  undefined_nns_function=$((FIRST_UNDEFINED_NNS_FUNCTION + i))

  ERROR=$(dfx canister call nns-governance manage_neuron "(record {id=opt record{id=$NEURON_ID : nat64}; command=opt variant{MakeProposal=record{url=\"https://forum.dfinity.org/\"; title=opt \"title\"; summary=\"summary\"; action=opt variant{ExecuteNnsFunction=record{nns_function = $undefined_nns_function : int32; payload=blob \"payload\" } } } } })" | idl2json | jq -c '.command[0].Error.error_message')

  if [[ "$ERROR" != "\"Topic not specified."* ]]; then
    {
      echo "NNS function $undefined_nns_function is no longer undefined."
      echo "Please add a test for it."
    } >&2
    exit 1
  else
    echo "NNS function $undefined_nns_function is still undefined as expected."
  fi
done
