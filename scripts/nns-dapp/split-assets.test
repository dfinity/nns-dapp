#!/usr/bin/env bash
set -euo pipefail
SOURCE_DIR="$(dirname "$(realpath "${BASH_SOURCE[0]}")")/.."
PATH="$SOURCE_DIR:$PATH"

print_help() {
  cat <<-EOF

	Verifies that the ${0%.test} command behaves as advertised.

	EOF
}

# Source the clap.bash file ---------------------------------------------------
source "$SOURCE_DIR/clap.bash"
# Define options
# Source the output file ----------------------------------------------------------
source "$(clap.build)"
cd "$SOURCE_DIR/.."

tarfile_contents() {
  # Tarfile contents, excluding directories
  tar -Jtf "$1" | grep -vE '/$'
}

canonical_tar_filenames() {
  # Omit the leading ./ if present.
  # Sort the filenames
  sed -r 's#^./##g' | sort
}

(
  echo "Chunks should contain all the original files"

  : "Get or create a .tar.xz file"
  # Note: Any .tar.xz file will do.  If we happen to have the assets.tar.xz around, we use that,
  # otherwise we create a .tar.xz from the contents of the frontend dir.  We could equally use
  # any other directory or .tar.xz as long as it contains at least two files.
  original="$(mktemp ,original-XXXXXX)"
  if test -e out/assets.tar.xz; then
    cp out/assets.tar.xz "$original"
  else
    tar -cJf "$original" frontend
  fi

  : "Chunk the original"
  chunks_dir="$(mktemp -d ,chunks-XXXXXX)"
  scripts/nns-dapp/split-assets --assets "${original}" --out "$chunks_dir"

  : "Check that the list of files is the same"
  diff <(tarfile_contents "$original" | canonical_tar_filenames) <(find "$chunks_dir" -type f | while read -r line; do tarfile_contents "$line"; done | canonical_tar_filenames) || {
    echo "ERROR: The list of files present in the chunks should be the same as that in the original, without duplicates or omissions."
    echo "Original:   $original"
    echo "Chunks dir: $chunks_dir"
    exit 1
  } >&2

  : "Check that the file contents are the same"
  original_unpacked="$(mktemp -d ,original-assets-XXXXXX)"
  tar -Jxf "$original" -C "$original_unpacked"
  chunks_unpacked="$(mktemp -d ,chunked-assets-XXXXXX)"
  find "$chunks_dir" -type f -printf '%p\n' | xargs -I{} tar -Jxf {} -C "$chunks_unpacked"
  diff --recursive "$original_unpacked" "$chunks_unpacked" || {
    echo "ERROR: The contents of the chunked tarballs should match the contents of the original tarball"
    echo "Unpacked original: $original_unpacked"
    echo "Unpacked chunks:   $chunks_unpacked"
    exit 1
  } >&2

  : "Clean up"
  rm -fr "$original" "$chunks_dir" "$original_unpacked" "$chunks_unpacked"
)

echo "$(basename "$0") PASSED"
