#!/usr/bin/env bash
set -euo pipefail

# Prints help message
migration_test_canisters_help() {
  cat <<-EOF
	A library of methods for getting and manipulating the nns-canister state.

	Usage:
	- Source this file from your code.
	- You can also call this file directly.  This may be useful for
	  ad-hoc runs but is not intended for production use.

	Usage: scripts/nns-dapp/migration-test.canister <function> [arguments..]
	e.g.:  scripts/nns-dapp/migration-test.canister verify_healthy

	A list of functions:
	EOF
  declare -F | awk '{print "        " $3}' | grep -vw "${FUNCNAME[0]}"
}

# Verifies that the nns-dapp canister is healthy
verify_healthy() {
  dfx canister call nns-dapp get_stats
  dfx canister call nns-dapp get_canisters
}

# Gets the number of transactions; this list may be pruned so is not invariant.
get_transactions_count() {
  dfx canister call nns-dapp get_stats | idl2json | jq -r '.transactions_count'
}

# Gets stats that should be invariant across upgrades
get_upgrade_invariant_stats() {
  dfx canister call nns-dapp get_stats | idl2json | jq '{accounts_count, neurons_created_count, neurons_topped_up_count, sub_accounts_count}'
}

# Verifies that accounts were not recomputed on upgrade.
# Recomputing on upgrade is very expensive for stable memory.
assert_accounts_db_stats_are_not_recomputed_on_upgrade() {
  local expected_value actual_value
  expected_value="[false]"
  actual_value="$(dfx canister call nns-dapp get_stats | idl2json | jq -c '.accounts_db_stats_recomputed_on_upgrade')"
  [[ "$expected_value" == "$actual_value" ]] || {
    echo "ERROR: Recompute stats on upgrade is not as expected."
    echo "Expected: $expected_value"
    echo "Actual:   $actual_value"
    exit 1
  }
}

get_accounts_count() {
  dfx canister call nns-dapp get_stats | idl2json | jq -r .accounts_count
}

# Gets some sample accounts
sample_toy_accounts() {
  seq 0 "$TOY_ACCOUNT_CHUNK_SIZE" "$(($(get_accounts_count) - 1))" | xargs -I{} dfx canister call nns-dapp get_toy_account "({})" --query
}

# Gets data that should be invariant across upgrades
get_upgrade_invariants() {
  echo "==== UPGRADE INVARIANT STATS ===="
  get_upgrade_invariant_stats
  echo "==== END ===="
  echo "==== SAMPLE INVARIANT STATS ===="
  sample_toy_accounts
  echo "==== END ===="
}

# Verifies that the state is at least as large as expected.
check_state_size() {
  local invariants accounts_count expected_min_accounts
  expected_min_accounts="$1"
  invariants="$(get_upgrade_invariant_stats)"
  accounts_count="$(jq -r .accounts_count <<<"$invariants")"
  if ((accounts_count < expected_min_accounts)); then
    {
      echo "ERROR: 'accounts_count' is smaller than expected."
      printf "  Expected at least: %10d\n" "$expected_min_accounts"
      printf "  Actual:            %10d\n" "$accounts_count"
      printf "  State:\n%s\n" "$invariants"
      exit 1
    } >&2
  fi
}

# Wait for the migration countdown to complete.
wait_for_migration() {
  local migration_countdown
  for ((i = 0; i < 1200; i++)); do
    migration_countdown="$(dfx canister call nns-dapp get_stats --query | idl2json | jq '.migration_countdown[0] // 0')" # TODO: Remove the default when prod has migration countdown stats
    echo "Migration countdown: $migration_countdown"
    if ((migration_countdown == 0)); then
      return
    fi
    sleep 1
  done
  {
    echo "ERROR: Migration did not complete within the expected time."
    echo "       For a migration to be considered complete, the migration_countdown should reach zero."
    echo "       Here are the current stats:"
    dfx canister call nns-dapp get_stats
    exit 1
  } >&2
}

# Installs the nns-dapp canister
# - Creates the canister if it doesn't exist
# - Installs the canister even if the wasm is the same
install_nnsdapp() {
  local wasm argfile argument
  wasm="$1"
  argfile="$2"
  argument="$(cat "$argfile")"
  if dfx canister id nns-dapp >/dev/null 2>/dev/null; then
    upgrade_nnsdapp "$wasm" "$argfile"
  else
    dfx canister create nns-dapp
    dfx canister install nns-dapp --wasm "$wasm" --argument "$argument" --yes --upgrade-unchanged
    scripts/dfx-canister-check-wasm-hash --wasm "$wasm" --canister nns-dapp
    verify_healthy
  fi
}

# Installs the current build of nns-dapp
# TODO: Record upgrade time
# TODO: Record upgrade cycles
# TODO: Record state size
upgrade_nnsdapp() {
  local prestate poststate wasm argfile argument
  wasm="$1"
  argfile="$2"
  argument="$(cat "$argfile")"
  prestate="$(get_upgrade_invariants | tee /dev/stderr)"
  # Check that the data is plausible
  # TODO: Check that the prestate is not empty; first we need to populate the state.
  # TODO: Consider storing all accounts data in a merkle tree so that we can check just the root hash.
  dfx canister stop nns-dapp
  dfx canister install --upgrade-unchanged nns-dapp --wasm "$wasm" --mode upgrade --argument "$argument" --yes
  dfx canister start nns-dapp
  scripts/dfx-canister-check-wasm-hash --wasm "$wasm" --canister nns-dapp
  verify_healthy
  poststate="$(get_upgrade_invariants)"
  if [[ "$prestate" != "$poststate" ]]; then
    {
      echo "ERROR: The upgrade changed the state of the canister."
      echo "Prestate: $prestate"
      echo "Poststate: $poststate"
      echo "Diff:"
      diff -u <(echo "$prestate") <(echo "$poststate") || true
      exit 1
    } >&2
  fi

  # Going forwards, this should always be false.  Historically it was always true.
  #
  # TODO: Delete the code path for recomputing stats on upgrade.
  assert_accounts_db_stats_are_not_recomputed_on_upgrade
}

# This file is intended to be sourced, but if called directly, offer some help
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  if (($# == 0)) || [[ "${1:-}" == "--help" ]]; then
    migration_test_canisters_help
    exit 0
  fi
  "${@}"
fi
