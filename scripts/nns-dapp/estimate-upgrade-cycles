#!/usr/bin/env bash
set -euo pipefail

SOURCE_DIR="$(dirname "${BASH_SOURCE[0]}")"

print_help() {
  cat <<-EOF

	Estimates the post-upgrade cycle counts given a local deployment of a release candidate
	and a mainnet stats.
	EOF
}

# Source the clap.bash file ---------------------------------------------------
source "$SOURCE_DIR/../clap.bash"
# Define options
# Source the output file ------------------------------------------------------
source "$(clap.build)"

: "Collect data from the local run, and from mainnet to get counts for a realistic state size."
for network in mainnet local; do
  : "## $network stats"
  dfx canister call nns-dapp get_stats --network $network | idl2json >,counts-$network.json
  : "## $network post_upgrade instruction counts"
  jq '[.performance_counts | map (.instruction_count = (.instruction_count | tonumber)) | foreach .[] as $record ( {this: 0}; {last: .this, this: $record.instruction_count}; {key: $record.name, value: {increase: (.this - .last), cumulative: .this}} )] | from_entries' ,counts-$network.json >,postupgrade-$network.json
done

post_upgrade_instruction_count="$(jq -r '.["post_upgrade stop"].cumulative' ,postupgrade-local.json)"
mainnet_state_recovery_instruction_count="$(jq -r '.["post_upgrade after state_recovery"].increase' ,postupgrade-mainnet.json)"
max_instructions=1000000000000

humreadable() { numfmt --to=si --format="%.1f" "${!1}"; }
body_columns() { printf "| %-60s | %20s | %12s |\n" "**$1**" "$(humreadable "$2")" "$(percent "$2")"; }
percent() { echo "$(((${!1} * 100) / max_instructions))%"; }

# Declare the variables as exported to satisfy shellcheck; it is not needed for the code.
export post_upgrade_instruction_count mainnet_state_recovery_instruction_count
(
  echo
  echo "## Upgrade cycle counts"
  echo "| Name                                                         | Cycles               | % max cycles | "
  echo "|--------------------------------------------------------------|----------------------|--------------|"
  body_columns "Mainnet state recovery instruction count" mainnet_state_recovery_instruction_count
  # TODO: Show the downgrade cycle count; this should be similar to production, most of the time.
  body_columns "PR post upgrade instruction count" post_upgrade_instruction_count
  echo
)

(
  echo
  echo "## State size"
  echo "The test state size should be similar to production."
  echo "| Data type                             | Num in Production | Num in test | % test/production |"
  echo "|---------------------------------------|-------------------|-------------|-------------------|"
  for metric in accounts_count sub_accounts_count hardware_wallet_accounts_count transactions_count; do
    mainnet_metric="$(jq -r ".$metric // 0" ,counts-mainnet.json)"
    mainnet_metric_str="$(humreadable mainnet_metric)"
    local_metric="$(jq -r ".$metric // 0" ,counts-local.json)"
    local_metric_str="$(humreadable local_metric)"
    if ((mainnet_metric == 0)); then
      percent_str="-"
    else
      percent_str="$(((local_metric * 100) / mainnet_metric))%"
    fi
    printf '| %-37s | %17s | %11s | %17s |\n' "**$metric**" "$mainnet_metric_str" "$local_metric_str" "$percent_str"
  done
  echo
)

{
  echo "# Details"
  for network in mainnet local; do
    echo "## $network stats"
    jq . ,counts-$network.json
    echo "## $network post upgrade cycle counts"
    jq . ,postupgrade-$network.json
  done
} >&2
