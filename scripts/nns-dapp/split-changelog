#!/usr/bin/env bash
set -euo pipefail

SOURCE_DIR="$(dirname "${BASH_SOURCE[0]}")"

print_help() {
  cat <<-EOF
	Takes the entries in the '## Unreleased' section of
  CHANGELOG-Nns-Dapp-unreeleased.md and
	splits them into a section with entries before and after the last release was
	cut.

	The second section gets a title like "PROPOSAL XXXXXX" based on the proposal
	number tag, and is moved to CHANGELOG-Nns-Dapp.md.
	EOF
}

# Source the clap.bash file ---------------------------------------------------
source "$SOURCE_DIR/../clap.bash"
# Define options
clap.define long=commit desc="Entries after this commit are considered new" variable=COMMIT default="tags/release-candidate"
clap.define long=test-released-changelog desc="An alternate released CHANGELOG file for testing" variable=RELEASED_CHANGELOG default=""
clap.define long=test-unreleased-changelog desc="An alternate unreleased CHANGELOG file for testing" variable=UNRELEASED_CHANGELOG default=""
clap.define long=test-old-unreleased-changelog desc="An alternate old unrelesed CHANGELOG for testing" variable=OLD_UNRELEASED_CHANGELOG default=""
clap.define long=test-proposal desc="An alternate proposal number for testing" variable=PROPOSAL_NUMBER default=""
# Source the output file ------------------------------------------------------
source "$(clap.build)"

# The script does the following to create the new released changelog:
# 1. Take the introduction of the old release changelog.
# 2. Append the title "Proposal XXX". The XXX is taken from the commit tag.
# 3. Append the Unreleased section of the old unreleased changelog.
# 4. Append the remainder of the old released changelog.

# Writes stdin to the given file, but only after reading all of stdin.
# Polyfill because `sponge` is not available everywhere.
sponge() {
  local tmp_file
  tmp_file="$(mktemp)"
  cat >"$tmp_file"
  mv "$tmp_file" "$1"
}

RELEASED_CHANGELOG_BASENAME="CHANGELOG-Nns-Dapp.md"

TOP_DIR="$(git rev-parse --show-toplevel)"
RELEASED_CHANGELOG="${RELEASED_CHANGELOG:-$TOP_DIR/$RELEASED_CHANGELOG_BASENAME}"

START_OF_LAST_PROPOSAL="$(($(grep -n -m 1 '^## Proposal [0-9]\+' "$RELEASED_CHANGELOG" | cut -d: -f1) - 1))"

UNRELEASED_CHANGELOG_BASENAME="CHANGELOG-Nns-Dapp-unreleased.md"
UNRELEASED_CHANGELOG="${UNRELEASED_CHANGELOG:-$TOP_DIR/$UNRELEASED_CHANGELOG_BASENAME}"

if ! [ "${OLD_UNRELEASED_CHANGELOG:-}" ]; then
  OLD_UNRELEASED_CHANGELOG="$(mktemp)"
  trap 'rm "$OLD_UNRELEASED_CHANGELOG"' EXIT

  # Get the old changelog from git history.
  git show "$COMMIT:$UNRELEASED_CHANGELOG_BASENAME" >"$OLD_UNRELEASED_CHANGELOG"
fi

START_OF_UNRELEASED_SECTION="$(($(grep -n -m 1 '^## Unreleased$' "$UNRELEASED_CHANGELOG" | cut -d: -f1) + 1))"

NEW_RELEASE_SECTION_TMP_FILE="$(mktemp)"

{
  # Get proposal number from tags applied to same commit as prod tag
  PROPOSAL_NUMBER="${PROPOSAL_NUMBER:-"$(git tag --contains "$COMMIT" | grep -E '^proposal-[0-9]+$' | cut -d- -f2)"}"
  PROPOSAL_NUMBER="${PROPOSAL_NUMBER:-XXXXXX}"
  echo "## Proposal $PROPOSAL_NUMBER"

  # The command below does:
  # 1. Take the unreleased section of the old change log file.
  # 2. Remove blank lines.
  # 3. Add a line with "####" at the end. (To correctly recognize an empty
  #    section at the end.)
  # 4. Remove empty sections. (Only output lines that don't start with #### or
  #    that are followed by a line that doesn't start with ##.)
  # 5. Add a blank line before and after each section heading.
  tail -n +"$START_OF_UNRELEASED_SECTION" "$OLD_UNRELEASED_CHANGELOG" |
    grep -v "^$" |
    (
      cat -
      echo '####'
    ) |
    awk '{if ($0 !~ /^##/ || prev !~ /^####/) print prev} {prev=$0}' |
    awk '{ if ($0 ~ /^###/) print "\n"$0"\n"; else print $0 }'
  echo
} >"$NEW_RELEASE_SECTION_TMP_FILE"

sed -i.bak "${START_OF_LAST_PROPOSAL}r $NEW_RELEASE_SECTION_TMP_FILE" "$RELEASED_CHANGELOG"

# Remove .bak file created by sed.
rm "$RELEASED_CHANGELOG.bak"

rm "$NEW_RELEASE_SECTION_TMP_FILE"

# Remove duplicate blank lines.
cat -s "$RELEASED_CHANGELOG" | sponge "$RELEASED_CHANGELOG"

# The script does the following to create the new unrelease changelog:
# 1. Take the old unrelease changelog.
# 2. Apply the change that have been made since, but add an extra '+' at the
#    start of new entries
# 3. Remove the entries without the extra '+'.
# 4. Remove the extra '+' from the new entries.

# Add 1 to start after the title.
START_OF_UNRELEASED_SECTION="$(($(grep -n -m 1 '^## Unreleased$' "$OLD_UNRELEASED_CHANGELOG" | cut -d: -f1) + 1))"

# Find which entries are new.
PATCH="$(mktemp)"
diff -u "$OLD_UNRELEASED_CHANGELOG" "$UNRELEASED_CHANGELOG" >"$PATCH" || true

# Apply the new entries with an extra '+'.
sed -e 's@^+[-*]@+&@' <"$PATCH" | patch "$OLD_UNRELEASED_CHANGELOG"

# Remove the entries that don't have the extra '+'.
grep -v '^[-* ] ' "$OLD_UNRELEASED_CHANGELOG" | sed -E 's@^\+([-* ] )@* @' >"$UNRELEASED_CHANGELOG"

# Remove duplicate blank lines.
cat -s "$UNRELEASED_CHANGELOG" | sponge "$UNRELEASED_CHANGELOG"

rm "$PATCH"
