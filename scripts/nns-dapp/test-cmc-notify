#!/usr/bin/env bash
set -euo pipefail
SOURCE_DIR="$(dirname "$(realpath "${BASH_SOURCE[0]}")")/.."

print_help() {
  cat <<-EOF

	Creating or topping up a canister is a 2-step process:
	1. Sending ICP to a subaccount of the CMC.
	2. Notifying the CMC about the transaction.
	Both steps are done in the frontend, but if the process is interrupted and
	the second step is not performed, the ICP could go missing.
	So the nns-dapp canister monitors the ledger for such transactions and also
	notifies the CMC about them.

	This script tests that fallback notification mechanism of the nns-dapp
	canister.
	EOF
}

# Source the clap.bash file ---------------------------------------------------
source "$SOURCE_DIR/clap.bash"
# Define options
clap.define short=i long=identity desc="Identity to use to create proposals" variable=DFX_IDENTITY default="snsdemo8"
# Source the output file ----------------------------------------------------------
source "$(clap.build)"

export DFX_IDENTITY

# Magic numbers defined at https://github.com/dfinity/ic/blob/be47f18b190689a055c7b198030a85e8cc816b65/rs/nns/cmc/src/lib.rs#L229-L230
CREATE_CANISTER_MEMO="$((16#41455243))" # 1095062083
TOP_UP_CANISTER_MEMO="$((16#50555054))" # 1347768404

ICP_E8S=11000000

function convert() {
  "$SOURCE_DIR/convert-id" "$@"
}

function hex_to_blob() {
  convert --input hex --output blob "$1"
}

function get_cmc_account_identifier() {
  subaccount="$1"
  convert --output account_identifier --subaccount_format text "$CMC_ID" "$subaccount"
}

function get_user_canisters() {
  dfx canister call nns-dapp get_canisters | idl2json | jq -r '.[] | .canister_id'
}

function get_cycles_balance() {
  canister_id="$1"
  dfx canister status "$canister_id" |
    grep "Balance:" |
    sed -e 's@Balance: \(.*\) Cycles@\1@' |
    sed -e 's@_@@g'
}

# Make sure we have an account so nns-dapp tracks our transactions
dfx canister call nns-dapp add_account

OLD_CANISTERS="$(get_user_canisters)"

CMC_ID="$(dfx canister id nns-cycles-minting)"

CYCLES_PER_ICP_E8="$(
  dfx canister call nns-cycles-minting get_icp_xdr_conversion_rate |
    idl2json |
    jq -r '.data.xdr_permyriad_per_icp'
)"

PRINCIPAL="$(dfx identity get-principal)"

CREATE_CANISTER_ACCOUNT_IDENTIFIER="$(get_cmc_account_identifier "$PRINCIPAL")"
dfx canister call nns-ledger transfer "(
  record {
    to = blob \"$(hex_to_blob "$CREATE_CANISTER_ACCOUNT_IDENTIFIER")\";
    fee = record { e8s = 10_000 : nat64 };
    memo = $CREATE_CANISTER_MEMO : nat64;
    amount = record { e8s = $ICP_E8S : nat64 };
  }
)"

# Wait for the nns-dapp canister to see the transaction, to notify the CMC and
# to add the canister to the list of user canisters.
for ((try = 30; try > 0; try--)); do
  ALL_CANISTERS="$(get_user_canisters)"
  if [[ "$ALL_CANISTERS" != "$OLD_CANISTERS" ]]; then
    break
  fi
  echo "Waiting for canister to be created..."
  sleep 1
done

NEW_CANISTER="$(
  echo "$ALL_CANISTERS $OLD_CANISTERS" |
    sed -e 's@ @\n@g' |
    sort |
    uniq -u |
    grep -v '^$'
)"

if [[ -z "$NEW_CANISTER" ]]; then
  echo "No new canister found"
  exit 1
fi

echo "Created canister ID $NEW_CANISTER"

EXPECTED_CYCLES="$((ICP_E8S * CYCLES_PER_ICP_E8))"

ACTUAL_CYCLES="$(get_cycles_balance "$NEW_CANISTER")"

echo "Cycles balance: $ACTUAL_CYCLES"

if [[ "$ACTUAL_CYCLES" != "$EXPECTED_CYCLES" ]]; then
  echo "Expected $EXPECTED_CYCLES cycles, got $ACTUAL_CYCLES"
  exit 1
fi

TOP_UP_ACCOUNT_IDENTIFIER="$(get_cmc_account_identifier "$NEW_CANISTER")"
dfx canister call nns-ledger transfer "(
  record {
    to = blob \"$(hex_to_blob "$TOP_UP_ACCOUNT_IDENTIFIER")\";
    fee = record { e8s = 10_000 : nat64 };
    memo = $TOP_UP_CANISTER_MEMO : nat64;
    amount = record { e8s = $ICP_E8S : nat64 };
  }
)"

EXPECTED_CYCLES="$((2 * ICP_E8S * CYCLES_PER_ICP_E8))"
OLD_CYCLES="$ACTUAL_CYCLES"

# Wait for the nns-dapp canister to see the transaction, for it to notify the
# CMC and for the CMC to update the canister's cycles balance.
for ((try = 30; try > 0; try--)); do
  ACTUAL_CYCLES="$(get_cycles_balance "$NEW_CANISTER")"
  if [[ "ACTUAL_CYCLES" != "$OLD_CYCLES" ]]; then
    break
  fi
  echo "Waiting for canister to be topped up..."
  sleep 1
done

echo "Cycles balance: $ACTUAL_CYCLES"

if [[ "$ACTUAL_CYCLES" != "$EXPECTED_CYCLES" ]]; then
  echo "Expected $EXPECTED_CYCLES cycles, got $ACTUAL_CYCLES"
  exit 1
fi

echo "âœ… PASS"
