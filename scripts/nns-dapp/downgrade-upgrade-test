#!/usr/bin/env bash
SOURCE_DIR="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
PATH="$SOURCE_DIR:$PATH"

PROD_WASM="nns-dapp-prod_local.wasm"
CURRENT_WASM="nns-dapp.wasm"

help_text() {
  cat <<-EOF
	Downgrade and then upgrade a local deployment.

	1) Prepare:
	  1.1) Make sure that $CURRENT_WASM exists:
	       - If it does not exist, build it.
	       - If it does exits, it is the caller's responsibility
	         to make sure that it is the wasm that is to be tested.
	  1.2) Make sure that $CURRENT_WASM is deployed:
	       - If the nns-dapp has already been created, upgrade the wasm
	         to $CURRENT_WASM.  If successful, this will preserve
	         existing state.
	       - If nns-dapp has NOT been created, deploy it.
	2) Test:
	  2.1) Perform a basic health check.
	  2.2) Downgrade to the prod release.
	  2.3) Perform a basic health check.
	  2.4) Upgrade to $CURRENT_WASM
	  2.5) Perform a basic health check.
	EOF
	# Note: If the code changes, please update the summary above to match.
}

# Source the clap.bash file ---------------------------------------------------
source "$SOURCE_DIR/../clap.bash"
# Define options
# Source the output file ----------------------------------------------------------
source "$(clap.build)"
set -euo pipefail

verify_healthy() {
  dfx canister call nns-dapp get_stats
}

get_current_wasm() {
  DFX_NETWORK=local ./scripts/docker-build
}

get_prod_wasm() {
  curl -sL https://github.com/dfinity/nns-dapp/releases/download/prod/nns-dapp_local.wasm >"$PROD_WASM"
}

# Installs the current build of nns-dapp
upgrade_nnsdapp() {
  dfx canister install --upgrade-unchanged nns-dapp --wasm "$1" --mode upgrade
}

echo "Ensuring that $CURRENT_WASM exists..."
test -e "$CURRENT_WASM" || {
  echo "Building $CURRENT_WASM..."
  DFX_NETWORK=local ./scripts/docker-build
}
echo "Installing $CURRENT_WASM..."
if dfx canister id nns-dapp >/dev/null 2>/dev/null; then
  upgrade_nnsdapp "$CURRENT_WASM"
else
  dfx canister create nns-dapp
  dfx canister install nns-dapp --wasm "$CURRENT_WASM"
fi
echo "Checking that the current wasm is healthy..."
verify_healthy
echo "Downloading and installing the prod wasm..."
get_prod_wasm
upgrade_nnsdapp "$PROD_WASM"
echo "Checking that the rollback is healthy..."
verify_healthy
echo "Rolling forwards..."
upgrade_nnsdapp "$CURRENT_WASM"
echo "Checking that the upgrade is healthy..."
verify_healthy
echo SUCCESS
