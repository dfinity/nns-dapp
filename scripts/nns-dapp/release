#!/usr/bin/env bash
set -euo pipefail
SOURCE_DIR="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
PATH="$SOURCE_DIR:$PATH"

print_help() {
  cat <<-EOF

	Creates an NNS proposal to upgrade the nns-dapp.

	EOF
}

# Source the clap.bash file ---------------------------------------------------
source "$SOURCE_DIR/clap.bash"
# Define options
clap.define short=n long=network desc="The dfx network to use" variable=DFX_NETWORK default="local"
clap.define short=N long=neuron desc="The neuron ID to propose with" variable=DFX_NEURON_ID
clap.define short=i long=identity desc="The dfx identity to use" variable=DFX_IDENTITY default="$(dfx identity whoami)"
# Source the output file ----------------------------------------------------------
source "$(clap.build)"

#!/usr/bin/env bash
set -euo pipefail
cd "$(dirname "$0")/../../.."

# Gets the neuron ID.
# ... if saved in a file, get it:
[[ "${DFX_NEURON_ID:-}" != "" ]] || {
  DFX_NEURON_ID="$(dfx-neuron-id --identity "$DFX_IDENTITY" --network "$DFX_NETWORK" 2>/dev/null || true)"
}
# ... else ask the user:
[[ "${DFX_NEURON_ID:-}" != "" ]] || {
  read -rp "Please enter your Neuron ID: " DFX_NEURON_ID
}
[[ "${DFX_NEURON_ID:-}" != "" ]] || {
  echo "ERROR: Neuron ID not provided."
  exit 1
} >&2

read -rp "HSM Pin: " DFX_HSM_PIN

# Gets the nns-dapp  canister ID
NNS_DAPP_CANISTER_ID="$(dfx canister id nns-dapp --network mainnet)"
# ... just checking...
if [[ "${DFX_NETWORK:-}" =~ mainnet|ic ]]; then
  [[ "${NNS_DAPP_CANISTER_ID:-}" == "qoctq-giaaa-aaaaa-aaaea-cai" ]] || {
    echo "ERROR: Has the mainnet nns-dapp canister ID really changed?"
    echo "       If so, please update this script: '${BASH_SOURCE[0]}'"
    exit 1
  } >&2
fi

# Gets the proposal URL
DFX_NNS_URL="$(dfx-network-provider --network "$DFX_NETWORK")"
# ... just checking...
if [[ "${DFX_NETWORK:-}" =~ mainnet|ic ]]; then
  [[ "$DFX_NNS_URL" == "https://ic0.app" ]] || {
    echo "ERROR: Is the proposal URL really correct? '$DFX_NNS_URL'"
    echo "       If so, please update this script: '${BASH_SOURCE[0]}'"
    exit 1
  } >&2
fi

# Gets the wasm
# Note: If the wasm is not provided, the SHA will fail.
WASM="./release/docker/nns-dapp.wasm"
SHA="$(sha256sum <"$WASM" | awk '{print $1}')"

# Gets the canister arguments
ARG_DID="./release/nns-dapp-arg.did"
ARG_PATH="./release/nns-dapp-arg.bin"
test -e "$ARG_DID" || {
  echo "ERROR: Arguments need to be provided in $ARG_DID"
  exit 1
} >&2
didc encode "$(cat "$ARG_DID")" | xxd -r -p >"$ARG_PATH"
test -e "$ARG_PATH" || {
  echo "ERROR: Failed to create arguments in $ARG_PATH"
  exit 1
} >&2

# Prepares the command
set ic-admin --pin "$DFX_HSM_PIN" --nns-url "$DFX_NNS_URL" --use-hsm --key-id 01 --slot 0 propose-to-change-nns-canister --proposer "$DFX_NEURON_ID" --canister-id "$AGGREGATOR_CANISTER_ID" --mode upgrade --wasm-module-path "$WASM" --summary-file ./release/AGGREGATOR_PROPOSAL.md --wasm-module-sha256 "$SHA" --arg "$ARG_PATH"
# ... just checking...
echo
echo PLEASE REVIEW THIS COMMAND:
echo
echo "${@}"
echo

read -rp "Execute? (y/N)" COMMAND_OK
if [[ "$COMMAND_OK" = [yY] ]]; then
  "${@}"
fi
