#!/usr/bin/env bash
set -euo pipefail
cd "$(dirname "$0")/.."

help_text() {
  cat <<-EOF

	Installs the dependencies needed to run ./build.sh

	Warning: This is a record of one installation on an M1 mac.
	         The code is untested on Linux and on CI.

	Flags:
	--help
	  prints this help text.

	--profile
	  sets the file that is sourced by the user shell.  The script MAY
	  append lines to that file, if some software is not already installed.
	  Default: $DEFAULT_USER_PROFILE

	EOF
}

case "$(basename "${SHELL:-}")" in
bash) DEFAULT_USER_PROFILE="$HOME/.bashrc" ;;
zsh) DEFAULT_USER_PROFILE="$HOME/.zshrc" ;;
ksh) DEFAULT_USER_PROFILE="$HOME/.kshrc" ;;
*) # dash, ash, tsh, tcsh
  DEFAULT_USER_PROFILE="$HOME/.profile" ;;
esac
USER_PROFILE=""

while (($# > 0)); do
  arg="$1"
  shift 1
  case "$arg" in
  --help)
    help_text
    exit 0
    ;;
  --profile)
    USER_PROFILE="$1"
    shift 1
    ;;
  *)
    echo "Unsupported argument: $arg" >&2
    exit 1
    ;;
  esac
done

if test -z "${USER_PROFILE:-}"; then
  USER_PROFILE="$DEFAULT_USER_PROFILE"
  echo "Assuming user profile script: $USER_PROFILE"
  read -rp "Is it OK to add to this profile? y/N " _USER_PROFILE_OK
  [[ "$_USER_PROFILE_OK" = [yY] ]] || {
    echo "Please specify the profile to use with --profile"
    exit 1
  }
fi

USER_BIN="$HOME/.local/bin"
mkdir -p "$USER_BIN"

NEW_TERMINAL_NEEDED=false
append_to_profile() {
  printf '\n%s\n' "$1" >>"$USER_PROFILE"
  set +eu
  . "$USER_PROFILE"
  set -eu
  NEW_TERMINAL_NEEDED=true
}

have_correct_dfx() {
  # Sadly `command -V dfx` just gives the path to `dfx` so we need both `command` and `dfx --version`.
  command -v dfx >/dev/null && {
    expected="$(jq -r .dfx dfx.json)"
    actual="$(dfx --version | awk '{print $2}')"
    [[ "$expected" == "$actual" ]]
  }
}
install_dfx() {
  DFX_VERSION="$(jq -r .dfx dfx.json)" sh -ci "$(curl -fsSL https://sdk.dfinity.org/install.sh)"
}

install_rosetta_maybe() {
  if [[ "$(uname)-$(uname -m)" == "Darwin-arm64" ]]; then
    test -d /usr/libexec/rosetta/ || {
      read -rp "Installing Rosetta for M1.  It lets you run x86_64 binaries.  Press enter to proceed... "
      softwareupdate --install-rosetta
    }
  fi
}

install_brew_maybe() {
  [[ "$OS" != "darwin" ]] || command -v brew || {
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    # Shellcheck: The text in the single quotes is not meant to be expanded here but rather when the user profile is sourced.
    # shellcheck disable=SC2016
    echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >>"$USER_PROFILE"
    eval "$(/opt/homebrew/bin/brew shellenv)"
  }
}

check_coreutils() {
  : Checks that everything we need from coreutils is installed
  for command in sha256sum date; do
    "$command" --version | grep 'GNU coreutils' || return 1
  done
}
install_coreutils_darwin() {
  echo "Installing coreutils..."
  brew install coreutils
  append_to_profile "export PATH=\"/opt/homebrew/opt/coreutils/libexec/gnubin:\$PATH\""
}
install_coreutils_linux() {
  echo "Installing coreutils..."
  # Coreutils is included in build-essential, but you almost certainly need the other packages as well.
  sudo apt-get install build-essential
}

install_moreutils_darwin() {
  echo "Installing moreutils..."
  brew install moreutils
}
install_moreutils_linux() {
  echo "Installing moreutils..."
  sudo apt-get install moreutils
}

install_jq_darwin() {
  echo "Installing jq..."
  brew install jq
}
install_jq_linux() {
  echo "Installing jq..."
  sudo apt-get install jq
}

ARCH="$(uname -p | sed 's/x86_64/amd64/g')"
YQ_VERSION="4.33.1"
install_yq_darwin() {
  echo "Installing yq..."
  tempfile="$(mktemp ,yq-XXXXXXXX)"
  curl -Lf "https://github.com/mikefarah/yq/releases/download/v${YQ_VERSION}/yq_darwin_${ARCH/arm/arm64}" >"$tempfile"
  install -m 755 "$tempfile" "$USER_BIN/yq"
  rm "$tempfile"
}
install_yq_linux() {
  echo "Installing yq..."
  curl -Lf "https://github.com/mikefarah/yq/releases/download/v${YQ_VERSION}/yq_linux_${ARCH}" | install -m 755 /dev/stdin "$USER_BIN/yq"
}

install_npm_darwin() {
  echo "Installing npm"
  brew install node
}
install_npm_linux() {
  echo "Installing npm"
  sudo apt-get install nodejs
}

install_rust() {
  echo "Installing rust"
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
  append_to_profile 'export CARGO_BUILD_JOBS=2'
}

install_binstall() {
  local BINSTALL_VERSION
  BINSTALL_VERSION="$(jq -r .defaults.build.config.BINSTALL_VERSION dfx.json)"
  curl -L --proto '=https' --tlsv1.2 -sSf "https://github.com/cargo-bins/cargo-binstall/releases/download/v${BINSTALL_VERSION}/cargo-binstall-x86_64-unknown-linux-musl.tgz" | tar -xvzf -
  ./cargo-binstall -y --force "cargo-binstall@$BINSTALL_VERSION"
}

install_xz_darwin() {
  brew install xz
}
install_xz_linux() {
  sudo apt-get install xz-utils
}

install_tar_darwin() {
  brew install gnu-tar
}
install_tar_linux() {
  sudo apt-get install tar
}

is_docker_installed() {
  command -v docker >/dev/null 2>&1 || return 1
  local major_version
  major_version="$(docker --version | sed -E 's/(^|.*[^0-9])([0-9]+)[.][0-9]+[.][0-9]+.*/\2/g')"
  ((major_version >= 10))
}
install_docker() {
  while ! command -v docker; do
    echo "Please install docker from: https://docs.docker.com/get-docker/"
    read -rp "Press enter when docker has been installed...  "
  done
}

install_wget_darwin() {
  brew install wget
}
install_wget_linux() {
  sudo apt-get install wget
}

install_curl_linux() {
  sudo apt-get install curl
}
install_curl_darwin() {
  brew install curl
}

install_cmake_darwin() {
  brew install cmake
}
install_cmake_linux() {
  sudo apt-get install cmake
}

check_ic_wasm() {
  EXPECTED_IC_WASM_VERSION="$(jq -r '.defaults.build.config.IC_WASM_VERSION' dfx.json)"
  INSTALLED_IC_WASM_VERSION="$(ic-wasm --version | awk '{print $2}')"
  [[ "${INSTALLED_IC_WASM_VERSION:-}" == "$EXPECTED_IC_WASM_VERSION" ]]
}
install_ic_wasm() {
  IC_WASM_VERSION="$(jq -r '.defaults.build.config.IC_WASM_VERSION' dfx.json)"
  cargo binstall --force --no-confirm "ic-wasm@${IC_WASM_VERSION}"
}

check_cargo_sort() {
  EXPECTED_CARGO_SORT_VERSION="$(jq -r '.defaults.build.config.CARGO_SORT_VERSION' dfx.json)"
  INSTALLED_CARGO_SORT_VERSION="$(cargo sort --version | awk '{print $2}')"
  [[ "${INSTALLED_CARGO_SORT_VERSION:-}" == "$EXPECTED_CARGO_SORT_VERSION" ]]
}
install_cargo_sort() {
  CARGO_SORT_VERSION="$(jq -r '.defaults.build.config.CARGO_SORT_VERSION' dfx.json)"
  cargo binstall --force --no-confirm "cargo-sort@${CARGO_SORT_VERSION}"
}

install_idl2json() {
  (
    set -euo pipefail # These are not inherited in a subsell.
    build_dir="$(mktemp -d)"
    cd "$build_dir"
    git clone https://github.com/dfinity/idl2json.git
    cd idl2json
    cargo build --release
    mv target/release/idl2json "$USER_BIN"
    cd /tmp
    rm -fr "${build_dir:-this-is-not-the-dir-you-are-looking-for}" # This is defensive code; build_dir SHOULD be defined.
  )
}

install_didc_linux() {
  local version
  version="$(jq -r .defaults.build.config.DIDC_RELEASE dfx.json)"
  # TODO: Use binstall
  curl -Lf "https://github.com/dfinity/candid/releases/download/${version}/didc-linux64" | install -m 755 /dev/stdin "$USER_BIN/didc"
}
install_didc_darwin() {
  local version
  version="$(jq -r .defaults.build.config.DIDC_RELEASE dfx.json)"
  tempfile="$(mktemp ,didc-XXXXXXXX)"
  curl -Lf "https://github.com/dfinity/candid/releases/download/${version}/didc-macos" >"$tempfile"
  install -m 755 "$tempfile" "$USER_BIN/didc"
  rm "$tempfile"
}

OS="$(uname | tr '[:upper:]' '[:lower:]')"

echo "Checking that you can install software..."
sudo echo I have superpowers || {
  echo "Sorry, you will need admin priveleges on this machine to install software."
  exit 1
}
install_rosetta_maybe
install_brew_maybe
command -v wget || "install_wget_$OS"
command -v curl || "install_curl_$OS"
is_docker_installed || install_docker
check_coreutils || "install_coreutils_$OS"
command -v sponge || "install_moreutils_$OS"
command -v jq || "install_jq_$OS"
command -v yq || "install_yq_$OS"
command -v npm || "install_npm_$OS"
command -v cargo || install_rust
cargo binstall -V || install_binstall
check_ic_wasm 2>/dev/null || { install_ic_wasm && check_ic_wasm; }
check_cargo_sort 2>/dev/null || { install_cargo_sort && check_cargo_sort; }
command -v xz || "install_xz_$OS"
. <(./build-config.sh)
have_correct_dfx || install_dfx
command -v gtar || tar --help | grep GNU >/dev/null || "install_tar_$OS"
command -v cmake || "install_cmake_$OS"
command -v idl2json || install_idl2json
command -v didc || "install_didc_$OS"

echo "OK, all set to go!"
[[ "$NEW_TERMINAL_NEEDED" == "false" ]] || echo "Please open a fresh terminal for these changes to take effect."
