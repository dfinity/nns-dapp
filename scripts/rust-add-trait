#!/usr/bin/env bash
set -euo pipefail
SOURCE_DIR="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
PATH="$SOURCE_DIR:$PATH"

print_help() {
  cat <<-"EOF"

	Adds a trait to a Rust type (struct or enum).

	This command is sensitive to formatting.  It is intended to be applied against
	code autogenerated by didc and expects type definitions to have the following form:

	```
	#[derive(Some, Existing, Traits)]
	pub struct Foo
	```

	Given that input, running this command with `--type Foo --trait Debug` will yield:
	```
	#[derive(Debug, Some, Existing, Traits)]
	pub struct Foo
	```
	EOF
}

# Source the clap.bash file ---------------------------------------------------
source "$SOURCE_DIR/clap.bash"
# Define options
clap.define short=f long=file desc="The rust file" variable=FILE
clap.define short=i long=in desc="The input Rust file" variable=INFILE default="/dev/stdin"
clap.define short=o long=file desc="The output rust file" variable=OUTFILE default="/dev/stdout"
clap.define short=s long=type desc="The struct or enum to modify." variable=TYPE
clap.define short=a long=trait desc="A comma separated list of traits to add" variable=TRAITS
# Source the output file ----------------------------------------------------------
source "$(clap.build)"

test -z "${FILE:-}" || {
  test -e "$FILE" || {
    echo "ERROR: File does not exist: '$FILE'"
    echo "       Please check and specify a valid Rust file with --file or -f."
    exit 1
  }
  INFILE="$FILE"
  OUTFILE="$FILE"
}

{
  test -e "${INFILE:-}" || {
    echo "ERROR: Input file does not exist: '$INFILE'"
    echo "       Please check and specify a valid Rust file with --in or -i."
    exit 1
  }
}
{
  test -e "${OUTFILE:-}" || {
    echo "ERROR: Input file does not exist: '$OUTFILE'"
    echo "       Please check and specify a valid Rust file with --out or -o."
    exit 1
  }
}

# Writes stdin to the given file, but only after reading all of stdin.
# Polyfill because `sponge` is not available everywhere.
sponge() {
  local tmp_file
  tmp_file="$(mktemp)"
  cat >"$tmp_file"
  mv "$tmp_file" "$1"
}

# Strategy:
# - Reverse the lines, so that we read the type line just before the line with the traits.
# - When we see a #[derive(...)] line, check whether the type provided in the last line is the type we need to modify.  If so, add traits.
# - Reverse the lines again.
rustfmt <"$INFILE" --edition 2021 | tac | gawk -v traits="$TRAITS" -v type="$TYPE" '(match($0,/^(#\[derive\(.*)(\)])/,groups) && match(last, /^pub +(struct|enum) +(\S+)/, type_groups) && (type_groups[2] == type)){$0=groups[1] ", "traits groups[2]}{last=$0; print}' | tac | rustfmt --edition 2021 | sponge "$OUTFILE"
