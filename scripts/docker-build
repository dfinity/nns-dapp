#!/usr/bin/env bash
# vim: ft=bash
# Build nns-dapp.wasm inside docker. This outputs a single file, nns-dapp.wasm,
# in the top-level directory.

set -euo pipefail

cd "$(dirname "${BASH_SOURCE[0]}")"
SCRIPTS_DIR="$(pwd)"

cd "$SCRIPTS_DIR/.."

# Note: This script is intended to be extremely robust and work on many platforms
#       so we parse arguments manually rather than using a clever, feature-rich but
#       fragile general purpose argument parser.
print_help() {
  cat <<-EOF
	Builds the nns-dapp wasm and artifacts in docker.

	Usage: $(basename "$0") [--network <network>] [--verbose] [--help] [-- <docker flags>]

	<docker flags>
	  Any flags that are to be passed on to Docker.  A common example is --no-cache.
	  A full list is here: https://docs.docker.com/engine/reference/commandline/build/#options
	EOF
}
DFX_NETWORK=${DFX_NETWORK:-mainnet}
PROGRESS="--progress=auto"
while (($# > 0)); do
  arg="$1"
  shift 1
  case "$arg" in
  --network)
    DFX_NETWORK="$1"
    shift 1
    ;;
  --verbose)
    PROGRESS="--progress=plain"
    ;;
  --help)
    print_help
    exit 0
    ;;
  --)
    break
    ;;
  *)
    {
      echo "ERROR: Unsupported flag: '$arg'"
      print_help
    } >&2
    exit 1
    ;;
  esac
done

echo "DFX_NETWORK: $DFX_NETWORK"
echo "PWD: $PWD"

image_name="nns-dapp-$DFX_NETWORK"

echo "The following image name will be used: $image_name"

# All the files in the final docker stage will be copied to this directory:
OUTDIR=out
rm -rf "${OUTDIR:-not-the-file-you-were-looking-for}"
# These files will be copied out of OUTDIR into the repository root.
# In normal production builds, only these files will be generated,
# but a small code change can easily produce much more.  We ensure that
# even in such circumstances only expected files end up in ./.
assets=(assets.tar.xz nns-dapp.wasm sns_aggregator.wasm nns-dapp-arg.did nns-dapp-arg.bin)
for file in "${assets[@]}"; do
  rm -f "$file"
done

set -x
DOCKER_BUILDKIT=1 docker build \
  --target scratch \
  "$PROGRESS" \
  --build-arg DFX_NETWORK="$DFX_NETWORK" \
  -t "$image_name" \
  -o "$OUTDIR" . \
  "${@+${@}}"
set +x

for file in "${assets[@]}"; do
  if test -d "$OUTDIR/$file"; then
    shafile="$OUTDIR/$file.sha256sums"
    find "$OUTDIR/$file" -type f | grep -v node_modules | awk '{print $2, $1}' | sort | xargs sha256sum >"$shafile"
    echo "Shas for dir '$file' are in '$shafile'."
  else
    cp "$OUTDIR/$file" "$file"
    shasum -a 256 "$file"
  fi
done

echo FIN
