#!/usr/bin/env bash
# vim: ft=bash
# Build nns-dapp.wasm inside docker. This outputs a single file, nns-dapp.wasm,
# in the top-level directory.

set -euo pipefail

SCRIPTS_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

cd "$SCRIPTS_DIR/.."

DFX_NETWORK=${DFX_NETWORK:-mainnet}

case "$DFX_NETWORK" in
mainnet)
  OWN_CANISTER_ID=""
  ;;
"local")
  OWN_CANISTER_ID=${OWN_CANISTER_ID:-rwlgt-iiaaa-aaaaa-aaaaa-cai}
  ;;
*)
  echo "don't know how to set OWN_CANISTER_ID for DFX_NETWORK $DFX_NETWORK"
  echo "please set the environment variable OWN_CANISTER_ID"
  exit 1
  ;;
esac

echo "DFX_NETWORK: $DFX_NETWORK"
echo "OWN_CANISTER_ID: $OWN_CANISTER_ID"
echo "PWD: $PWD"

image_name="nns-dapp-$DFX_NETWORK"

echo "The following image name will be used: $image_name"

# All the files in the final docker stage will be copied to this directory:
OUTDIR=out
rm -rf "${OUTDIR:-not-the-file-you-were-looking-for}"
# These files will be copied out of OUTDIR into the repository root.
# In normal production builds, only these files will be generated,
# but a small code change can easily produce much more.  We ensure that
# even in such circumstances only expected files end up in ./.
assets=(assets.tar.xz nns-dapp.wasm sns_aggregator.wasm)

set -x
DOCKER_BUILDKIT=1 docker build \
  --target scratch \
  --build-arg DFX_NETWORK="$DFX_NETWORK" \
  --build-arg OWN_CANISTER_ID="$OWN_CANISTER_ID" \
  -t "$image_name" \
  -o "$OUTDIR" . \
  "${@+${@}}"
set +x

for file in "${assets[@]}"; do
  if test -d "$OUTDIR/$file"; then
    shafile="$OUTDIR/$file.sha256sums"
    find "$OUTDIR/$file" -type f | grep -v node_modules | awk '{print $2, $1}' | sort | xargs sha256sum >"$shafile"
    echo "Shas for dir '$file' are in '$shafile'."
  else
    cp "$OUTDIR/$file" "$file"
    shasum -a 256 "$file"
  fi
done

echo FIN
