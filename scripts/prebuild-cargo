#!/usr/bin/env bash
set -euo pipefail
SOURCE_DIR="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
PATH="$SOURCE_DIR:$PATH"

print_help() {
	cat <<-EOF

	Deletes Rust source code and builds the dependencies of the blank crate.

	WARNING: This deletes the 'src' dirs of your rust code.

	WARNING: Cargo uses timestamps to decide whether to rebuild a crate.
	         If you use this, make sure that when you replace the code, it has
	         fresh timestamps, and remove the dummy outputs.
	EOF
}

# Source the clap.bash file ---------------------------------------------------
source "$SOURCE_DIR/clap.bash"
# Define options
clap.define short=d long=dir desc="The package dir" variable=DFX_CRATE_DIR default="."
# Source the output file ----------------------------------------------------------
source "$(clap.build)"

cd "${DFX_CRATE_DIR:-.}"

test -e Cargo.toml || {
	echo "ERROR: Not a rust source dir: $(pwd)"
	exit 1
} >&2


if test -d src ; then
# Get a list of the root library and executable source files.
readarray -t minimal_files < <(find src/main.rs src/lib.rs src/main/*.rs 2>/dev/null)

# Remove the code
rm -fr src

# Create minimal files
for file in "${minimal_files[@]}" ; do
	mkdir -p "$(dirname "${file:-}")"
	touch "${file:-}"
	# Main files need a main function
	[[ "${file:-}" == "src/lib.rs" ]] || echo 'fn main(){}' > "$file"
done

cargo build
# Remove the dummy code
rm -fr src
fi

readarray packages < <(yq -r .workspace.members[] Cargo.toml -o json)
for package in "${packages[@]}"; do
	echo "Pre-building ${package:-}"
"$0" --dir "${package:-}"
done
