#!/usr/bin/env bash
set -euo pipefail

SOURCE_DIR="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"

print_help() {
  cat <<-EOF

	Manage canister_ids.json.

	Usage: $(basename "$0") --export --network <network> (outputs to stdout)
	       $(basename "$0") --import                     (reads from stdin)
	       $(basename "$0") --import-from-index-html <URL> --network <network>
	       $(basename "$0") --remove --network <network> --canister <canister>
	EOF
}

# Source the clap.bash file ---------------------------------------------------
source "$SOURCE_DIR/clap.bash"
# Define options
clap.define short=e long=export desc="Export canister IDs" variable=EXPORT nargs=0 default="false"
clap.define short=i long=import desc="Import canister IDs from stdin" variable=IMPORT nargs=0 default="false"
clap.define long=import-from-index-html desc="URL of nns-dapp canister to import from" variable=IMPORT_FROM
clap.define short=r long=remove desc="Remove canister ID" variable=REMOVE nargs=0 default="false"
clap.define short=n long=network desc="dfx network to use" variable=NETWORK default="staging"
clap.define short=c long=canister desc="canister to remove" variable=CANISTER default="nns-dapp"
clap.define short=j long=json-file desc="Path to the canister_ids.json file" variable=JSON_FILE default="./canister_ids.json"
clap.define long=create desc="Create the json file if missing" variable=CREATE nargs=0
# Source the output file ----------------------------------------------------------
source "$(clap.build)"

if ! [ -f "${JSON_FILE:-}" ]; then
  if [ "${CREATE:-}" ]; then
    echo "{}" >"$JSON_FILE"
  else
    echo "${JSON_FILE:-} is missing.  Consider using: --create" >&2
    exit 1
  fi
fi

useCommand() {
  declare -g command
  if [ "${command:-}" ]; then
    echo "Only specify one of --import, --import-from-index-html, --export, --remove" >&2
    exit 1
  fi
  command="$1"
}

if [ "$EXPORT" = "true" ]; then
  useCommand "export"
fi

if [ "$IMPORT" = "true" ]; then
  useCommand "import"
fi

if [ "${IMPORT_FROM:-}" ]; then
  useCommand "import-from-index-html"
fi

if [ "$REMOVE" = "true" ]; then
  useCommand "remove"
fi

if ! [ "${command:-}" ]; then
  print_help
  exit 0
fi

if [ "$command" = "export" ]; then
  # This whole block can be done in a single line of jq script but it woudn't
  # be readable.
  canisters=$(jq -r 'keys|join(" ")' "$JSON_FILE")
  output="{}"
  for canister in $canisters; do
    id=$(jq -r --arg network "$NETWORK" --arg canister "$canister" '.[$canister][$network]?' "$JSON_FILE")
    if [ "$id" != "null" ]; then
      new_output=$(echo "$output" | jq --arg network "$NETWORK" --arg canister "$canister" --arg id "$id" '.[$canister][$network]=$id')
      output="$new_output"
    fi
  done
  echo "$output"
  exit
fi

if [ "$command" = "import" ]; then
  echo "Reading from stdin..."
  input="$(cat)"
  output="$(jq --argjson input "$input" '. * $input' "$JSON_FILE")"
  echo "$output" >"$JSON_FILE"
  exit
fi

if [ "$command" = "remove" ]; then
  # ShellCheck misfires, thinking $CANISTER isn't set.
  # shellcheck disable=SC2153
  old_canister_id="$(jq -r --arg network "$NETWORK" --arg canister "$CANISTER" '.[$canister][$network]' "$JSON_FILE")"

  if ! [ "$old_canister_id" ]; then
    echo "$CANISTER already didn't have an ID for $NETWORK."
    exit
  fi

  new_name="$NETWORK-before-$(date +%Y%m%d-%H%M%S)"
  tmp_file="$(mktemp)"
  jq --arg network "$NETWORK" --arg canister "$CANISTER" --arg new_name "$new_name" '.[$canister][$new_name] = .[$canister][$network] | del(.[$canister][$network])' "$JSON_FILE" >"$tmp_file"
  mv "$tmp_file" "$JSON_FILE"

  echo "Renamed $CANISTER.$NETWORK to $new_name."
  exit
fi

get_value_from_html() {
  key="$1"
  file="$2"
  pattern="$key=\"([^\"]+)\""
  # E.g. find a line like `data-own-canister-id="lf43c-fyaaa-aaaaa-aacva-cai"`
  # and outputs the value between quotes.
  grep -oE "$pattern" "$file" | sed -E "s/$pattern/\\1/" | head -1 || true
}

canister_id_from_url() {
  echo "$1" | sed -E 's@https://([^.]*)\..*@\1@'
}

if [ "$command" = "import-from-index-html" ]; then
  tmp_index_html="$(mktemp)"
  trap 'rm -f "$tmp_index_html"' EXIT
  curl -sS "$IMPORT_FROM" >"$tmp_index_html"
  if [ "$(file --brief --mime-type "$tmp_index_html")" = "application/gzip" ]; then
    mv "$tmp_index_html" "${tmp_index_html}.gz"
    gunzip "${tmp_index_html}.gz"
  fi

  identityServiceUrl="$(get_value_from_html data-identity-service-url "$tmp_index_html")"
  internetIdentity="$(canister_id_from_url "$identityServiceUrl")"

  snsAggregatorUrl="$(get_value_from_html data-sns-aggregator-url "$tmp_index_html")"
  snsAggregator="$(canister_id_from_url "$snsAggregatorUrl")"

  nnsIndex="$(get_value_from_html data-index-canister-id "$tmp_index_html")"
  ckbtcIndex="$(get_value_from_html data-ckbtc-index-canister-id "$tmp_index_html")"
  ckbtcLedger="$(get_value_from_html data-ckbtc-ledger-canister-id "$tmp_index_html")"
  ckbtcMinter="$(get_value_from_html data-ckbtc-minter-canister-id "$tmp_index_html")"
  ckethIndex="$(get_value_from_html data-cketh-index-canister-id "$tmp_index_html")"
  ckethLedger="$(get_value_from_html data-cketh-ledger-canister-id "$tmp_index_html")"
  ckusdcIndex="$(get_value_from_html data-ckusdc-index-canister-id "$tmp_index_html")"
  ckusdcLedger="$(get_value_from_html data-ckusdc-ledger-canister-id "$tmp_index_html")"
  snsWasm="$(get_value_from_html data-wasm-canister-id "$tmp_index_html")"
  nnsDapp="$(get_value_from_html data-own-canister-id "$tmp_index_html")"

  tmp_file="$(mktemp)"
  jq '
    .["nns-index"][$network] = $nnsIndex |
    .ckbtc_index[$network] = $ckbtcIndex |
    .ckbtc_ledger[$network] = $ckbtcLedger |
    .ckbtc_minter[$network] = $ckbtcMinter |
    .cketh_index[$network] = $ckethIndex |
    .cketh_ledger[$network] = $ckethLedger |
    .ckusdc_index[$network] = $ckusdcIndex |
    .ckusdc_ledger[$network] = $ckusdcLedger |
    .["nns-sns-wasm"][$network] = $snsWasm |
    .internet_identity[$network] = $internetIdentity |
    .["nns-dapp"][$network] = $nnsDapp |
    .sns_aggregator[$network] = $snsAggregator' \
    --arg network "$NETWORK" \
    --arg nnsIndex "$nnsIndex" \
    --arg ckbtcIndex "$ckbtcIndex" \
    --arg ckbtcLedger "$ckbtcLedger" \
    --arg ckbtcMinter "$ckbtcMinter" \
    --arg ckethIndex "$ckethIndex" \
    --arg ckethLedger "$ckethLedger" \
    --arg ckusdcIndex "$ckusdcIndex" \
    --arg ckusdcLedger "$ckusdcLedger" \
    --arg snsWasm "$snsWasm" \
    --arg internetIdentity "$internetIdentity" \
    --arg nnsDapp "$nnsDapp" \
    --arg snsAggregator "$snsAggregator" \
    "$JSON_FILE" >"$tmp_file"
  mv "$tmp_file" "$JSON_FILE"
fi
